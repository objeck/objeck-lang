use Collection;

class Test {
	@stream : Char[];
	@stream_position : Int;
	@cur_char : Char;

	@level : Int;
	@skip_next : Bool;

	New(input : String) {
		@stream := input->ToCharArray();
	}

	function : Main(args : String[]) ~ Nil {
		stream := System.IO.Filesystem.FileReader->ReadFile(args[0]);
		Test->New(stream)->Go();
	}

	method : public : Go() ~ Nil {
		NextChar();
		string_buffer : String;
		num_buffer : String;		

		while(@cur_char <> '\0') {
			Whitespace();

			if(@cur_char = '{' ) {
Show("+ object start");
				@level += 1;
			}
			else if(@cur_char = '[') {
Show("+ array start");
				@level += 1;
			}
			else if(@cur_char = '}' ) {
				@level -= 1;
Show("- object end");
			}
			else if(@cur_char = ']') {
				@level -= 1;
Show("- array end");
			}
			else if(@cur_char = '"') {
				if(string_buffer = Nil) {
					string_buffer := String->New();
				}
				else {
	
					NextChar();
					@skip_next := true;
					Whitespace();

					if(@cur_char = ':') {
Show("label: |{$string_buffer}|");
					}
					else {
Show("string: |{$string_buffer}|");
					};

					string_buffer := Nil;
				};
			}
			else if(@cur_char->IsDigit() | (num_buffer <> Nil & @cur_char = '.')) {
				if(string_buffer = Nil) {
					if(num_buffer = Nil) {
						num_buffer := String->New();
					}
					num_buffer->Append(@cur_char);
				}
				else {
					string_buffer->Append(@cur_char);
				};
			}
			else if(string_buffer = Nil & num_buffer = Nil) {
				if(@cur_char = 'n') {
					if(<>Match("null")) {
						SetError("expected 'null'")
					}
					else {						
Show("null");
					};
				}
				else if(@cur_char = 't') {
					if(<>Match("true")) {
						SetError("expected 'true'")
					}
					else {						
Show("true");
					};
				}
				else if(@cur_char = 'f') {
					if(<>Match("false")) {
						SetError("expected 'false'")
					}
					else {						
Show("false");
					};
				}
				else {
					if(@cur_char <> ',' & @cur_char <> ':') {
						SetError("expected : [':' or ',' or '\"']")
					};	
				};	
			}
			else if(@cur_char->IsChar()) {
				string_buffer->Append(@cur_char);
			}
			else {
				if(num_buffer <> Nil) {
Show("number: |{$num_buffer}|");
					num_buffer := Nil;						
				};
			};
			
			if(@skip_next) {
				@skip_next := false;
			}
			else {
				NextChar();
			};
		};
	}

	method : SetError(message : String) ~ Nil {
		">>> {$message} <<<"->PrintLine();
		@cur_char := '\0';
		@skip_next := true;
	}

	method : native : Whitespace() ~ Nil {
		while(@cur_char = ' ' | @cur_char = '\t' | @cur_char = '\r' | @cur_char = '\n') {
			NextChar();
		};
	}

	method : native : NextChar() ~ Nil {
		if(@stream_position < @stream->Size()) {
			@cur_char := @stream[@stream_position];
		}
		else {
			@cur_char := '\0';
		};

		@stream_position += 1;
	}

	method : native : Match(string : String) ~ Bool {
		each(c in string) {
			if(c <> @cur_char) {
				return false;
			};
			NextChar();
		};

		return true;
	}
	
	method : Show(message : String) ~ Nil {
		each(i : @level) {
			'\t'->Print();
		};
		message->PrintLine();
	}
}