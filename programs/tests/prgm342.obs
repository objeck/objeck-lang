use System.IO;
use Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		words := ["nose", "live", "invincible", "gifted", "known", "shame", "annoying", "direction", "wicked", "throne", "secretive", "noxious", "able", "camp", "cream", "drawer", "visit", "ocean", "auspicious", "kill", "tin", "rely", "sock", "agreeable", "cannon", "earthy", "outrageous", "basin", "actually", "threatening", "tired", "used", "young", "stale", "cub", "tangible", "outstanding", "card", "representative", "regret", "hat", "harsh", "abounding", "exultant", "huge", "club", "offer", "best", "wobble", "relation", "territory", "male", "shiny", "part", "pigs", "account", "cultured", "brush", "truculent", "mouth", "picture", "alluring", "clean", "guttural", "scarce", "handsomely", "sassy", "woebegone", "permit", "well-made", "defeated", "quickest", "house", "enjoy", "oven", "determined", "wiggly", "thick", "vest", "mountain", "lamp", "arrogant", "whimsical", "expert", "entertain", "song", "fang", "thinkable", "gorgeous", "damage", "holistic", "recondite", "hideous", "welcome", "milky", "automatic", "bleach", "selection", "thoughtless", "record", "wet", "undesirable", "pack", "desire", "tick", "excite", "switch", "kiss", "surround", "trick", "needless", "yak", "protest", "crowd", "gaudy", "wing", "lumber", "instruct", "didactic", "doubtful", "mother", "concern", "zip", "geese", "carve", "range", "receptive", "zipper"];
		
		iters := 100;
		timer := System.Time.Timer->New();

		timer->Start();		
		check := 0;
		each(i : iters) {
			check += DoSelect(words);
		};
		timer->End();

		Runtime->Assert(words->Size() * iters = check);
		set_time := timer->GetElapsedTime()->As(Float);
		"select_time={$set_time}"->PrintLine();

		check := 0;
		each(i : iters) {
			check += DoCompare(words);
		};
		timer->End();

		Runtime->Assert(words->Size() * iters = check);
		compare_time := timer->GetElapsedTime()->As(Float);
		"compare_time={$compare_time}"->PrintLine();

		timer->Start();	
		check := 0;

		set := Set->New()<String>;
		each(word in words) {
			set->Insert(word);
		};

		each(i : iters) {
			check += DoSet(set, words);
		};
		timer->End();

		Runtime->Assert(words->Size() * iters = check);
		compare_time := timer->GetElapsedTime()->As(Float);
		"set_time={$compare_time}"->PrintLine();

		check := 0;
		timer->Start();	

		set_hash := Hash->New()<String, IntRef>;
		each(word in words) {
			set_hash->Insert(word, 1);
		};

		each(i : iters) {
			check += DoSetHash(set_hash, words);
		};
		timer->End();

		Runtime->Assert(words->Size() * iters = check);
		compare_time := timer->GetElapsedTime()->As(Float);
		"set_hash_time={$compare_time}"->PrintLine();
	}

	function : DoCompare(words : String[]) ~ Int {
		count := 0;

		each(word in words) {
			if(word->Equals("nose")) {
				count += 1;
			}
			else if(word->Equals("live")) {
				count += 1;
			}
			else if(word->Equals("invincible")) {
				count += 1;
			}
			else if(word->Equals("gifted")) {
				count += 1;
			}
			else if(word->Equals("known")) {
				count += 1;
			}
			else if(word->Equals("shame")) {
				count += 1;
			}
			else if(word->Equals("annoying")) {
				count += 1;
			}
			else if(word->Equals("direction")) {
				count += 1;
			}
			else if(word->Equals("wicked")) {
				count += 1;
			}
			else if(word->Equals("throne")) {
				count += 1;
			}
			else if(word->Equals("secretive")) {
				count += 1;
			}
			else if(word->Equals("noxious")) {
				count += 1;
			}
			else if(word->Equals("able")) {
				count += 1;
			}
			else if(word->Equals("camp")) {
				count += 1;
			}
			else if(word->Equals("cream")) {
				count += 1;
			}
			else if(word->Equals("drawer")) {
				count += 1;
			}
			else if(word->Equals("visit")) {
				count += 1;
			}
			else if(word->Equals("ocean")) {
				count += 1;
			}
			else if(word->Equals("auspicious")) {
				count += 1;
			}
			else if(word->Equals("kill")) {
				count += 1;
			}
			else if(word->Equals("tin")) {
				count += 1;
			}
			else if(word->Equals("rely")) {
				count += 1;
			}
			else if(word->Equals("sock")) {
				count += 1;
			}
			else if(word->Equals("agreeable")) {
				count += 1;
			}
			else if(word->Equals("cannon")) {
				count += 1;
			}
			else if(word->Equals("earthy")) {
				count += 1;
			}
			else if(word->Equals("outrageous")) {
				count += 1;
			}
			else if(word->Equals("basin")) {
				count += 1;
			}
			else if(word->Equals("actually")) {
				count += 1;
			}
			else if(word->Equals("threatening")) {
				count += 1;
			}
			else if(word->Equals("tired")) {
				count += 1;
			}
			else if(word->Equals("used")) {
				count += 1;
			}
			else if(word->Equals("young")) {
				count += 1;
			}
			else if(word->Equals("stale")) {
				count += 1;
			}
			else if(word->Equals("cub")) {
				count += 1;
			}
			else if(word->Equals("tangible")) {
				count += 1;
			}
			else if(word->Equals("outstanding")) {
				count += 1;
			}
			else if(word->Equals("card")) {
				count += 1;
			}
			else if(word->Equals("representative")) {
				count += 1;
			}
			else if(word->Equals("regret")) {
				count += 1;
			}
			else if(word->Equals("hat")) {
				count += 1;
			}
			else if(word->Equals("harsh")) {
				count += 1;
			}
			else if(word->Equals("abounding")) {
				count += 1;
			}
			else if(word->Equals("exultant")) {
				count += 1;
			}
			else if(word->Equals("huge")) {
				count += 1;
			}
			else if(word->Equals("club")) {
				count += 1;
			}
			else if(word->Equals("offer")) {
				count += 1;
			}
			else if(word->Equals("best")) {
				count += 1;
			}
			else if(word->Equals("wobble")) {
				count += 1;
			}
			else if(word->Equals("relation")) {
				count += 1;
			}
			else if(word->Equals("territory")) {
				count += 1;
			}
			else if(word->Equals("male")) {
				count += 1;
			}
			else if(word->Equals("shiny")) {
				count += 1;
			}
			else if(word->Equals("part")) {
				count += 1;
			}
			else if(word->Equals("pigs")) {
				count += 1;
			}
			else if(word->Equals("account")) {
				count += 1;
			}
			else if(word->Equals("cultured")) {
				count += 1;
			}
			else if(word->Equals("brush")) {
				count += 1;
			}
			else if(word->Equals("truculent")) {
				count += 1;
			}
			else if(word->Equals("mouth")) {
				count += 1;
			}
			else if(word->Equals("picture")) {
				count += 1;
			}
			else if(word->Equals("alluring")) {
				count += 1;
			}
			else if(word->Equals("clean")) {
				count += 1;
			}
			else if(word->Equals("guttural")) {
				count += 1;
			}
			else if(word->Equals("scarce")) {
				count += 1;
			}
			else if(word->Equals("handsomely")) {
				count += 1;
			}
			else if(word->Equals("sassy")) {
				count += 1;
			}
			else if(word->Equals("woebegone")) {
				count += 1;
			}
			else if(word->Equals("permit")) {
				count += 1;
			}
			else if(word->Equals("well-made")) {
				count += 1;
			}
			else if(word->Equals("defeated")) {
				count += 1;
			}
			else if(word->Equals("quickest")) {
				count += 1;
			}
			else if(word->Equals("house")) {
				count += 1;
			}
			else if(word->Equals("enjoy")) {
				count += 1;
			}
			else if(word->Equals("oven")) {
				count += 1;
			}
			else if(word->Equals("determined")) {
				count += 1;
			}
			else if(word->Equals("wiggly")) {
				count += 1;
			}
			else if(word->Equals("thick")) {
				count += 1;
			}
			else if(word->Equals("vest")) {
				count += 1;
			}
			else if(word->Equals("mountain")) {
				count += 1;
			}
			else if(word->Equals("lamp")) {
				count += 1;
			}
			else if(word->Equals("arrogant")) {
				count += 1;
			}
			else if(word->Equals("whimsical")) {
				count += 1;
			}
			else if(word->Equals("expert")) {
				count += 1;
			}
			else if(word->Equals("entertain")) {
				count += 1;
			}
			else if(word->Equals("song")) {
				count += 1;
			}
			else if(word->Equals("fang")) {
				count += 1;
			}
			else if(word->Equals("thinkable")) {
				count += 1;
			}
			else if(word->Equals("gorgeous")) {
				count += 1;
			}
			else if(word->Equals("damage")) {
				count += 1;
			}
			else if(word->Equals("holistic")) {
				count += 1;
			}
			else if(word->Equals("recondite")) {
				count += 1;
			}
			else if(word->Equals("hideous")) {
				count += 1;
			}
			else if(word->Equals("welcome")) {
				count += 1;
			}
			else if(word->Equals("milky")) {
				count += 1;
			}
			else if(word->Equals("automatic")) {
				count += 1;
			}
			else if(word->Equals("bleach")) {
				count += 1;
			}
			else if(word->Equals("selection")) {
				count += 1;
			}
			else if(word->Equals("thoughtless")) {
				count += 1;
			}
			else if(word->Equals("record")) {
				count += 1;
			}
			else if(word->Equals("wet")) {
				count += 1;
			}
			else if(word->Equals("undesirable")) {
				count += 1;
			}
			else if(word->Equals("pack")) {
				count += 1;
			}
			else if(word->Equals("desire")) {
				count += 1;
			}
			else if(word->Equals("tick")) {
				count += 1;
			}
			else if(word->Equals("excite")) {
				count += 1;
			}
			else if(word->Equals("switch")) {
				count += 1;
			}
			else if(word->Equals("kiss")) {
				count += 1;
			}
			else if(word->Equals("surround")) {
				count += 1;
			}
			else if(word->Equals("trick")) {
				count += 1;
			}
			else if(word->Equals("needless")) {
				count += 1;
			}
			else if(word->Equals("yak")) {
				count += 1;
			}
			else if(word->Equals("protest")) {
				count += 1;
			}
			else if(word->Equals("crowd")) {
				count += 1;
			}
			else if(word->Equals("gaudy")) {
				count += 1;
			}
			else if(word->Equals("wing")) {
				count += 1;
			}
			else if(word->Equals("lumber")) {
				count += 1;
			}
			else if(word->Equals("instruct")) {
				count += 1;
			}
			else if(word->Equals("didactic")) {
				count += 1;
			}
			else if(word->Equals("doubtful")) {
				count += 1;
			}
			else if(word->Equals("mother")) {
				count += 1;
			}
			else if(word->Equals("concern")) {
				count += 1;
			}
			else if(word->Equals("zip")) {
				count += 1;
			}
			else if(word->Equals("geese")) {
				count += 1;
			}
			else if(word->Equals("carve")) {
				count += 1;
			}
			else if(word->Equals("range")) {
				count += 1;
			}
			else if(word->Equals("receptive")) {
				count += 1;
			}
			else if(word->Equals("zipper")) {
				count += 1;
			}
		};

		return count;

	}

	function : DoSelect(words : String[]) ~ Int {
		count := 0;

		each(word in words) {
			select(word) {
				label "nose" {
					count += 1;
				}

				label "live" {
					count += 1;
				}

				label "invincible" {
					count += 1;
				}

				label "gifted" {
					count += 1;
				}

				label "known" {
					count += 1;
				}

				label "shame" {
					count += 1;
				}

				label "annoying" {
					count += 1;
				}

				label "direction" {
					count += 1;
				}

				label "wicked" {
					count += 1;
				}

				label "throne" {
					count += 1;
				}

				label "secretive" {
					count += 1;
				}

				label "noxious" {
					count += 1;
				}

				label "able" {
					count += 1;
				}

				label "camp" {
					count += 1;
				}

				label "cream" {
					count += 1;
				}

				label "drawer" {
					count += 1;
				}

				label "visit" {
					count += 1;
				}

				label "ocean" {
					count += 1;
				}

				label "auspicious" {
					count += 1;
				}

				label "kill" {
					count += 1;
				}

				label "tin" {
					count += 1;
				}

				label "rely" {
					count += 1;
				}

				label "sock" {
					count += 1;
				}

				label "agreeable" {
					count += 1;
				}

				label "cannon" {
					count += 1;
				}

				label "earthy" {
					count += 1;
				}

				label "outrageous" {
					count += 1;
				}

				label "basin" {
					count += 1;
				}

				label "actually" {
					count += 1;
				}

				label "threatening" {
					count += 1;
				}

				label "tired" {
					count += 1;
				}

				label "used" {
					count += 1;
				}

				label "young" {
					count += 1;
				}

				label "stale" {
					count += 1;
				}

				label "cub" {
					count += 1;
				}

				label "tangible" {
					count += 1;
				}

				label "outstanding" {
					count += 1;
				}

				label "card" {
					count += 1;
				}

				label "representative" {
					count += 1;
				}

				label "regret" {
					count += 1;
				}

				label "hat" {
					count += 1;
				}

				label "harsh" {
					count += 1;
				}

				label "abounding" {
					count += 1;
				}

				label "exultant" {
					count += 1;
				}

				label "huge" {
					count += 1;
				}

				label "club" {
					count += 1;
				}

				label "offer" {
					count += 1;
				}

				label "best" {
					count += 1;
				}

				label "wobble" {
					count += 1;
				}

				label "relation" {
					count += 1;
				}

				label "territory" {
					count += 1;
				}

				label "male" {
					count += 1;
				}

				label "shiny" {
					count += 1;
				}

				label "part" {
					count += 1;
				}

				label "pigs" {
					count += 1;
				}

				label "account" {
					count += 1;
				}

				label "cultured" {
					count += 1;
				}

				label "brush" {
					count += 1;
				}

				label "truculent" {
					count += 1;
				}

				label "mouth" {
					count += 1;
				}

				label "picture" {
					count += 1;
				}

				label "alluring" {
					count += 1;
				}

				label "clean" {
					count += 1;
				}

				label "guttural" {
					count += 1;
				}

				label "scarce" {
					count += 1;
				}

				label "handsomely" {
					count += 1;
				}

				label "sassy" {
					count += 1;
				}

				label "woebegone" {
					count += 1;
				}

				label "permit" {
					count += 1;
				}

				label "well-made" {
					count += 1;
				}

				label "defeated" {
					count += 1;
				}

				label "quickest" {
					count += 1;
				}

				label "house" {
					count += 1;
				}

				label "enjoy" {
					count += 1;
				}

				label "oven" {
					count += 1;
				}

				label "determined" {
					count += 1;
				}

				label "wiggly" {
					count += 1;
				}

				label "thick" {
					count += 1;
				}

				label "vest" {
					count += 1;
				}

				label "mountain" {
					count += 1;
				}

				label "lamp" {
					count += 1;
				}

				label "arrogant" {
					count += 1;
				}

				label "whimsical" {
					count += 1;
				}

				label "expert" {
					count += 1;
				}

				label "entertain" {
					count += 1;
				}

				label "song" {
					count += 1;
				}

				label "fang" {
					count += 1;
				}

				label "thinkable" {
					count += 1;
				}

				label "gorgeous" {
					count += 1;
				}

				label "damage" {
					count += 1;
				}

				label "holistic" {
					count += 1;
				}

				label "recondite" {
					count += 1;
				}

				label "hideous" {
					count += 1;
				}

				label "welcome" {
					count += 1;
				}

				label "milky" {
					count += 1;
				}

				label "automatic" {
					count += 1;
				}

				label "bleach" {
					count += 1;
				}

				label "selection" {
					count += 1;
				}

				label "thoughtless" {
					count += 1;
				}

				label "record" {
					count += 1;
				}

				label "wet" {
					count += 1;
				}

				label "undesirable" {
					count += 1;
				}

				label "pack" {
					count += 1;
				}

				label "desire" {
					count += 1;
				}

				label "tick" {
					count += 1;
				}

				label "excite" {
					count += 1;
				}

				label "switch" {
					count += 1;
				}

				label "kiss" {
					count += 1;
				}

				label "surround" {
					count += 1;
				}

				label "trick" {
					count += 1;
				}

				label "needless" {
					count += 1;
				}

				label "yak" {
					count += 1;
				}

				label "protest" {
					count += 1;
				}

				label "crowd" {
					count += 1;
				}

				label "gaudy" {
					count += 1;
				}

				label "wing" {
					count += 1;
				}

				label "lumber" {
					count += 1;
				}

				label "instruct" {
					count += 1;
				}

				label "didactic" {
					count += 1;
				}

				label "doubtful" {
					count += 1;
				}

				label "mother" {
					count += 1;
				}

				label "concern" {
					count += 1;
				}

				label "zip" {
					count += 1;
				}

				label "geese" {
					count += 1;
				}

				label "carve" {
					count += 1;
				}

				label "range" {
					count += 1;
				}

				label "receptive" {
					count += 1;
				}

				label "zipper" {
					count += 1;
				}
			};
		};

		return count;

	}

	function : DoSet(set : Set<String>, words : String[]) ~ Int {
		count := 0;

		each(word in words) {
			if(set->Has(word)) {
				count += 1;
			};
		};

		return count;

	}

	function : DoSetHash(set_hash : Hash<String, IntRef>, words : String[]) ~ Int {
		count := 0;

		each(word in words) {
			if(set_hash->Has(word)) {
				count += 1;
			}
			else {
				"unfound: {$word}"->PrintLine();
			}
		};

		return count;

	}
}

