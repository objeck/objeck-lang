#~ The Computer Language Shootout Benchmarks
   http://shootout.alioth.debian.org/

   contributed by Kevin Carson
   translated by Randy Hollines
~#

class BinaryTrees {
	function : Main(args : String[]) ~ Nil {
		n := 0;
		if (args->Size() > 0) {
			n := args[0]->ToInt();
		};	
		Run(n);
	}
	
	function : native : Run(n : Int) ~ Nil {
		minDepth := 4;
		
		maxDepth := (minDepth + 2 > n) ? minDepth + 2 : n;
		stretchDepth := maxDepth + 1;
	
		check := (TreeNode->BottomUpTree(0, stretchDepth))->ItemCheck();
		IO.Console->Print("stretch tree of depth ")->Print(stretchDepth)->Print("\t check: ")->PrintLine(check);

		longLivedTree := TreeNode->BottomUpTree(0, maxDepth);
		for(depth := minDepth; depth <= maxDepth; depth += 2;) {
			iterations := 1 << (maxDepth - depth + minDepth);
			check := 0;

			for(i := 1; i <= iterations; i += 1;) {
				check += (TreeNode->BottomUpTree(i, depth))->ItemCheck();
				check += (TreeNode->BottomUpTree(-1 * i, depth))->ItemCheck();
			};
			IO.Console->Print(iterations*2)->Print("\t trees of depth ")
				->Print(depth)->Print("\t check: ")->PrintLine(check);
		};
		IO.Console->Print("long lived tree of depth ")->Print(maxDepth)->Print("\t check: ")
			->PrintLine(longLivedTree->ItemCheck());
	}
}

class TreeNode {
	@left : TreeNode;
	@right : TreeNode;
	@item : Int;
	
	New(item : Int) {
		@item := item;
	}

	New(left : TreeNode, right : TreeNode, item : Int) {
		@left := left;
		@right := right;
		@item := item;
	}
	
	function : BottomUpTree(item : Int, depth : Int) ~ TreeNode {
		if(depth > 0) {
			return TreeNode->New(BottomUpTree(2*item-1, depth-1), BottomUpTree(2*item, depth-1), item);
		};
		
		return TreeNode->New(item);
	}

	method : public : ItemCheck() ~ Int {
		if(@left = Nil) {
			return @item;
		};
		
		return @item + @left->ItemCheck() - @right->ItemCheck();
	}
}
