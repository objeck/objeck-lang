use API.Onnx, System.IO.Filesystem, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			root_dir := args[0];

			image_path := root_dir + "/data/grasshopper.jpg";
			model_path := root_dir + "/resnet34-v2-7.onnx";
			label_path := root_dir + "/data/test2017/labels.txt";

			image_labels := LoadLabels(label_path);
			image_labels_size := image_labels->Size();

			"image_labels_size={$image_labels_size}"->PrintLine();
			"image_path={$image_path}"->PrintLine();
			"model_path={$model_path}"->PrintLine();

			image_bytes := FileReader->ReadBinaryFile(image_path);
			image_size := image_bytes->Size();
			"image_size={$image_size}"->PrintLine();

			result_vector := OnnxRuntime->ProcessImage(image_bytes, 224, 224, model_path);
			result_size := result_vector->Size();

			# find max for numerical stability
			max_logit := result_vector[0];
			for(j := 1; j < result_size; j++) {
			   if(result_vector[j] > max_logit) {
			      max_logit := result_vector[j];
			   }
			}

			# compute exp(logit - max_logit)
			probs := Float->New[result_size];
			sum_exp := 0.0;
			for(j := 0; j < result_size; j++) {
			   probs[j] := Float->Exp(result_vector[j] - max_logit);
			   sum_exp += probs[j];
			}

			# normalize
			for(j := 0; j < result_size; j++) {
			   probs[j] /= sum_exp;
			}

			# find the top confidence
			image_index := 0;
			top_confidence := result_vector[0];			
			for(j := 1; j < result_size; j++) {
			   if(probs[j] > top_confidence) {
			      top_confidence := probs[j];
			      image_index := j;
			   };
			};

			data_label := image_labels->Get(image_index);
			"result_conf={$top_confidence}, image_index={$image_index}, data_label={$data_label}"->PrintLine();
		};
	}

	function : LoadLabels(label_path : String) ~ Vector<String> {
		labels := Vector->New()<String>;

		file_in := FileReader->New(label_path);
		while(<>file_in->IsEoF()) {
			data_label := file_in->ReadLine();
			labels->AddBack(data_label);
		};
		file_in->Close();

		return labels;
	}
}
