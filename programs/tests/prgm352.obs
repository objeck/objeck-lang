use API.Onnx, System.IO.Filesystem, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			provider_names := OnnxRuntime->GetProviderNames();
			each(provider_name in provider_names) {
				provider_name->PrintLine();
			};

			ProcessImages(args[0]);
		};
	}

	function : ProcessImages(root_dir : String) ~ Nil {
		image_path := root_dir + "/images/";
		model_path := root_dir + "/resnet34-v2-7.onnx";
		label_path := root_dir + "/images/labels.txt";

		image_labels := LoadLabels(label_path);

		each(i : 50) {
			j := Int->Random(0, 6);

			select(j) {
				label 0: {
					image_path += "lion.jpg";
				}

				label 1: {
					image_path += "tarantula.jpg";
				}

				label 2: {
					image_path += "grasshopper.jpg";
				}

				label 3: {
					image_path += "ski.jpg";
				}

				label 4: {
					image_path += "wine.jpg";
				}

				label 5: {
					image_path += "pier.jpg";
				}

				label 6: {
					image_path += "prison.jpg";
				}
			}

#~
			image_labels_size := image_labels->Size();

			"image_labels_size={$image_labels_size}"->PrintLine();
			"image_path={$image_path}"->PrintLine();
			"model_path={$model_path}"->PrintLine();
			"label_path={$label_path}"->PrintLine();
~#

			image_bytes := FileReader->ReadBinaryFile(image_path);
			image_size := image_bytes->Size();
			"image_size={$image_size}"->PrintLine();

			result_vector := OnnxRuntime->ProcessImage(image_bytes, 224, 224, model_path);
			if(result_vector <> Nil) {
				result_size := result_vector->Size();

				# find max for numerical stability
				max_logit := result_vector[0];
				for(j := 1; j < result_size; j++) {
				   if(result_vector[j] > max_logit) {
				      max_logit := result_vector[j];
				   }
				}

				# compute exp(logit - max_logit)
				probs := Float->New[result_size];
				sum_exp := 0.0;
				for(j := 0; j < result_size; j++) {
				   probs[j] := Float->Exp(result_vector[j] - max_logit);
				   sum_exp += probs[j];
				}

				# normalize
				for(j := 0; j < result_size; j++) {
				   probs[j] /= sum_exp;
				}

				# find the top confidence
				image_index := 0;
				top_confidence := result_vector[0];			
				for(j := 1; j < result_size; j++) {
				   if(probs[j] > top_confidence) {
				      top_confidence := probs[j];
				      image_index := j;
				   };
				};

				data_label := image_labels->Get(image_index);
				"result_conf={$top_confidence}, image_index={$image_index}, data_label={$data_label}\n---\n"->PrintLine();
			};

			image_path := root_dir + "/images/";
		};
	}

	function : LoadLabels(label_path : String) ~ Vector<String> {
		labels := Vector->New()<String>;

		file_in := FileReader->New(label_path);
		while(<>file_in->IsEoF()) {
			data_label := file_in->ReadLine();
			labels->AddBack(data_label);
		};
		file_in->Close();

		return labels;
	}
}
