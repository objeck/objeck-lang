class Test {
	function : Main(args : String[]) ~ Nil {
		queue := Queue->New();

		queue->Push(3); queue->Push(6); queue->Push(9); queue->Push(12);
		queue->Pop(7)->PrintLine();

#~		
		queue->Pop();
		queue->Push(12);
		queue->Push(15);

		while(<>queue->Empty()) {
			queue->Top()->GetValue()->PrintLine();
			queue->Pop()->PrintLine();
		};
		queue->Pop()->PrintLine();
~#	
	}
}

class Queue {
	@head : Node;
	@size : Int;

	New() {
	}

	method : public : Push(value : Int) ~ Nil {
		if(@head = Nil) {
			@head := Node->New(value);
		}
		else {
			next := Node->New(value);
			next->SetNext(@head);
			@head := next;
		};

		@size += 1;
	}

	method : public : Pop(n : Int) ~ Int {
		value := 0;

		if(n > 0) {
			while(@head <> Nil & n < @size) {
				@head := @head->GetNext();
				value := @head->GetValue();
				@size -= 1;
			};
		};

		return value;
	}

	method : public : Pop() ~ Int {
		value := 0;

		if(@head <> Nil) {
			@head := @head->GetNext();
			value := @head->GetValue();
			@size -= 1;
		};

		return value;
	}

	method : public : Top() ~ Int {
		value := 0;

		if(@head <> Nil) {
			value := @head->GetValue();
		};

		return value;
	}

	method : public : IsEmpty() ~ Bool {
		return @head = Nil;
	}

	method : public : Empty() ~ Nil {
		@head := Nil;
	}

	method : public : Size() ~ Int {
		return @size;
	}
}

class Node {
	@value : Int;
	@next : Node;

	New(value : Int) {
		@value := value;
	}

	method : public : GetValue() ~ Int {
		return @value;
	}

	method : public : GetNext() ~ Node {
		return @next;
	}

	method : public : SetNext(next : Node) ~ Nil {
		@next := next;
	}

	method : public : ToString() ~ String {
		return @value->ToString();
	}
}