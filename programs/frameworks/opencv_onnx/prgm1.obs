use API.Onnx, use API.OpenCV, System.IO.Filesystem, Collection;

class Test {
	# Nvidia DML 650-750 ms
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			data_dir := args[0];
			
			ProcessResNet(data_dir);

#~
			ProcessDeepLab(data_dir);
			ProcessYolo(data_dir);			
			ProcessOpenPose(data_dir);
~#			
		};
	}

	# DeepLabv3
	function : ProcessDeepLab(root_dir : String) ~ Nil {
		"### DeepLab ###"->PrintLine();

		image_dir := root_dir + "/images/";
		image_dir := image_dir->ReplaceAll('\\', '/');

		model_path := root_dir + "/deeplabv3.onnx";
		model_path := model_path->ReplaceAll('\\', '/');

		label_path := root_dir + "/deeplab_labels.txt";
		label_path := label_path->ReplaceAll('\\', '/');

		"model_path={$model_path}"->PrintLine();
		"label_path={$label_path}"->PrintLine();
		image_dir += "sheep_person.jpg";
				
		image_bytes := FileReader->ReadBinaryFile(image_dir);
		image_size := image_bytes->Size();

		"image_dir={$image_dir}"->PrintLine();
		"image_size={$image_size}\n---"->PrintLine();

		image_labels := LoadLabels(label_path);
		label_names := image_labels->ToArray()->As(String[]);

		session := API.Onnx.DeepLabSession->New(model_path, Nil);
		result := session->Inference(image_bytes, label_names);
		if(result <> Nil) {
			result->ToJson()->ToString()->PrintLine();
			"==="->PrintLine();

			#~
			each(classification in classifications) {
				classification->GetPolygons()->Size()->PrintLine();
				classification->ToString()->PrintLine();
			};
			
			overlay_image := result->GetMaskedImage();
			overlay_image->Show("DeepLab", 0.75);
			~#
		}
	}

	# Yolo-v12
	function : ProcessYolo(root_dir : String) ~ Nil {
		"### Yolo ###"->PrintLine();

		image_dir := root_dir + "/images/";
		image_dir := image_dir->ReplaceAll('\\', '/');

		model_path := root_dir + "/yolov11s-seg.onnx";
		model_path := model_path->ReplaceAll('\\', '/');

		label_path := root_dir + "/yolo_labels.txt";
		label_path := label_path->ReplaceAll('\\', '/');

		"model_path={$model_path}"->PrintLine();
		"label_path={$label_path}"->PrintLine();

		image_labels := LoadLabels(label_path);
		image_label_size := image_labels->Size();
		"image_label_size={$image_label_size}"->PrintLine();

		# set image
		image_dir += "sheep_person.jpg";

		image_bytes := FileReader->ReadBinaryFile(image_dir);
		image_size := image_bytes->Size();

		"image_dir={$image_dir}"->PrintLine();
		"image_size={$image_size}\n---"->PrintLine();

		image := Image->Load(image_bytes);
		if(image = Nil) {
			"--- Error: Unable to load image ---"->ErrorLine();
			return;
		};

		label_names := image_labels->ToArray()->As(String[]);

		session := API.Onnx.YoloSession->New(model_path, Nil);
		result := session->Inference(image_bytes, 640, 640, 0.65, label_names);
		if(result = Nil) {
			"--- Error: No results ---"->ErrorLine();
			return;
		};

		result->ToJson()->ToString()->PrintLine();
		"==="->PrintLine();
#~		
		result->ToString()->PrintLine();

		classifications := result->GetClassifications();
		each(classification in classifications) {
			label_str := classification->GetName();
			class_str := classification->ToString();
			"name='{$label_str}', class={$class_str}"->PrintLine();

			bounds := classification->GetBounds();
			left := bounds->GetX();
			top := bounds->GetY();

			image := image->DrawRectangle(Rect->New(
				left, top, bounds->GetWidth(), bounds->GetHeight()), 
				Scalar->New(0, 255, 0), 2);

			image := image->DrawText(
				label_str,
				Point->New(left, top), 
				Font->FONT_HERSHEY_SIMPLEX,
				0.75,
				Scalar->New(255, 0, 0));
		};
		"---"->PrintLine();

		image->Show("Yolo", 0.75);
~#
	}

	# OpenPose
	function : ProcessOpenPose(root_dir : String) ~ Nil {
		"### OpenPose ###"->PrintLine();

		image_dir := root_dir + "/images/";
		image_dir := image_dir->ReplaceAll('\\', '/');

		model_path := root_dir + "/human-pose.onnx";
		model_path := model_path->ReplaceAll('\\', '/');

		label_path := root_dir + "/openpose_labels.txt";
		label_path := label_path->ReplaceAll('\\', '/');

		"image_dir={$image_dir}"->PrintLine();
		"model_path={$model_path}"->PrintLine();

		image_labels := LoadLabels(label_path);
		image_label_size := image_labels->Size();
		"image_label_size={$image_label_size}"->PrintLine();

		image_dir += "sheep_person.jpg";
				
		image_bytes := FileReader->ReadBinaryFile(image_dir);
		image_size := image_bytes->Size();

		"image_dir={$image_dir}"->PrintLine();
		"image_size={$image_size}\n---"->PrintLine();

		label_names := image_labels->ToArray()->As(String[]);
		session := API.Onnx.OpenPoseSession->New(model_path, Nil);
		result := session->Inference(image_bytes, label_names);
		if(result <> Nil) {
			result->ToJson()->ToString()->PrintLine();
			"==="->PrintLine();

#~
			classifications := result->GetClassifications();
			each(classification in classifications) {
				classification->ToString()->PrintLine();
			};

			overlay_image := result->GetMaskedImage();
			overlay_image->Show("OpenPose", 0.75);
~#			
		};

		session->Close();
	}

	# ResNet-50
	function : ProcessResNet(root_dir : String) ~ Nil {
		"### ResNet ###"->PrintLine();

		image_dir := root_dir + "/images/";
		image_dir := image_dir->ReplaceAll('\\', '/');

		model_path := root_dir + "/resnet34-v2-7.onnx";
		model_path := model_path->ReplaceAll('\\', '/');

		label_path := root_dir + "/resnet_labels.txt";
		label_path := label_path->ReplaceAll('\\', '/');

		"model_path={$model_path}"->PrintLine();
		"label_path={$label_path}"->PrintLine();

		image_labels := LoadLabels(label_path);
		image_label_size := image_labels->Size();
		"image_label_size={$image_label_size}"->PrintLine();

		image_dir += "sheep_person.jpg";
				
		image_bytes := FileReader->ReadBinaryFile(image_dir);
		image_size := image_bytes->Size();

		"image_dir={$image_dir}"->PrintLine();
		"image_size={$image_size}\n---"->PrintLine();

		label_names := image_labels->ToArray()->As(String[]);
		session := API.Onnx.ResNetSession->New(model_path, Nil);
		result := session->Inference(image_bytes, 224, 224, label_names);
		if(result <> Nil) {
			result->ToJson()->ToString()->PrintLine();
			"==="->PrintLine();
#~			
			result->GetId()->PrintLine();
			result->GetName()->PrintLine();
			result->GetConfidence()->PrintLine();
~#			
		}
		else {
			"--- Error: No results returned ---"->ErrorLine();
		};
	}

	function : LoadLabels(label_path : String) ~ Vector<String> {
		label_names := Vector->New()<String>;

		file_in := FileReader->New(label_path);
		while(<>file_in->IsEoF()) {
			data_label := file_in->ReadLine();
			label_names->AddBack(data_label);
		};
		file_in->Close();

		return label_names;
	}
}
