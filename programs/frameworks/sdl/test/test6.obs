use Game.SDL2;
use Game.Framework;

class Test {
	@framework : GameFramework;
	@color_white, @color_black, @color_blue, @color_green, @color_red : Color;
	@mountain : Collection.Vector<Rocks>;
	@mouse_x : IntRef;
	@mouse_y : IntRef;

	function : Main(args : String[]) ~ Nil {
		Test->New()->Run();
	}
	
	New() {
		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "War!");

		@mouse_x := IntRef->New();
		@mouse_y := IntRef->New();
		
		@color_black := Color->New(0, 0, 0);
		@framework->SetClearColor(@color_black);

		@color_white := Color->New(255,255,242);
		@color_blue := Color->New(14, 248, 248);
		@color_red := Color->New(191,0,0);
		@color_green := Color->New(63,90,54);

		half_hor_max := 20;

		@mountain := Collection.Vector->New()<Rocks>;
		hor := 0.0;
		each(i : half_hor_max) {
			hor += 0.75;
			vert_len := Int->Random(hor + 1, hor + 4);
			vert_boxes := Rectangle->New[vert_len];

			each(j : vert_len) {
				block_rect := @framework->AddRectangle(20, 20);
				block_rect->SetColor(@color_blue);
				block_rect->SetPostion(Position->New(j * 20, i * 20, 20, 20));
				vert_boxes[j] := block_rect;
			};

			@mountain->AddBack(Rocks->New(vert_boxes));
		};
	}
	
	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
			
			frame_count := 0;
			quit := false;

			while(<>quit) {
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# mouse
					else if(e->GetMButton() <> Nil & e->GetMButton()->GetButton() = MouseButtonValue->SDL_BUTTON_LEFT) {
						Cursor->GetMouseState(@mouse_x, @mouse_y);

						each(i : @mountain) {
							level := @mountain->Get(i);
							rocks := level->GetRocks();
							each(j : rocks) {
								rock := rocks[j];
								if(rock->GetPosition()->IntersectsPoint(@mouse_x->Get(), @mouse_y->Get())) {
									rock->SetFill(true);
									rock->SetColor(@color_green);
"rock: {$i},{$j}"->PrintLine();									
								};
							};
						};
					};  	
				};

				@framework->FrameStart();
				Render(frame_count);
				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		left_shapes := @framework->GetShapes();
		each(shape in left_shapes) {
			block := shape->As(Rectangle);
			block->Render();
		};

		each(level in @mountain) {
			rocks := level->GetRocks();
			each(rock in rocks) {
				rock->Render();
			};
		};
						
		@framework->Show();
	}
}

class Rock {
	@rect : Rectangle;

	New(rect : Rectangle) {
		@rect := rect;
	}

	method : public : GetRectangle() ~ Rectangle {
		return @rect;
	}
}

class Rocks {
	@rects : Rectangle[];

	New(rects : Rectangle[]) {
		@rects := rects;
	}

	method : public : GetRocks() ~ Rectangle[] {
		return @rects;
	}
}

consts GameConsts {
	SCREEN_WIDTH := 1000,
	SCREEN_HEIGHT := 400
}