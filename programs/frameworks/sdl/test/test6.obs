use Game.SDL2;
use Game.Framework;

class War {
	@framework : GameFramework;
	@color_white, @color_black, @color_blue, @color_green, @color_red : Color;
	@mountain : Collection.Vector<Rocks>;
	@mouse_x : IntRef;
	@mouse_y : IntRef;

	function : Main(args : String[]) ~ Nil {
		War->New()->Run();
	}
	
	New() {
		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "War!");

		@mouse_x := IntRef->New();
		@mouse_y := IntRef->New();
		
		@color_black := Color->New(0, 0, 0);
		@framework->SetClearColor(@color_black);

		@color_white := Color->New(255,255,242);
		@color_blue := Color->New(14, 248, 248);
		@color_red := Color->New(191,0,0);
		@color_green := Color->New(63,90,54);

		half_hor_max := 20;

		@mountain := Collection.Vector->New()<Rocks>;
		hort_rock_pos := 0.0;
		each(i : half_hor_max) {
			hort_rock_pos += 0.75;
			hort_rock_len := Int->Random(hort_rock_pos + 1, hort_rock_pos + 4);
			rocks := Rock->New[hort_rock_len];

			each(j : hort_rock_len) {
				rock_sprite := @framework->AddRectangle(20, 20);
				rock_sprite->SetColor(@color_blue);
				rock_sprite->SetPostion(Position->New(j * 20, i * 20, 20, 20));
				rocks[j] := Rock->New(rock_sprite);
			};

			@mountain->AddBack(Rocks->New(rocks));
		};
	}
	
	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
			
			frame_count := 0;
			quit := false;

			while(<>quit) {
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# mouse
					else if(e->GetMButton() <> Nil & e->GetMButton()->GetButton() = MouseButtonValue->SDL_BUTTON_LEFT) {
#						Cursor->GetMouseState(@mouse_x, @mouse_y);

						point := Point->New();
						Cursor->GetMouseState(point);

						mouse_x := point->GetX();
						mouse_y := point->GetY();
"mouse_pos: {$mouse_x}, {$mouse_y}"->PrintLine();


						each(i : @mountain) {
							rocks := @mountain->Get(i)->GetRocks();
							each(j : rocks) {
								rock_sprite := rocks[j]->GetSprite();
								
								if(rock_sprite->GetPosition()->IntersectsPoint(mouse_x, mouse_y)) {
									rock_sprite->SetFill(true);
									rock_sprite->SetColor(@color_green);

									soundings :=GetSoundings(i, j);
									each(k : soundings) {
										select(k) {
											label 0 {
												"Up"->Print();
											}

											label 1 {
												"Down"->Print();
											}

											label 2 {
												"Left"->Print();
											}

											label 3 {
												"Right"->Print();
											}

											label 4 {
												"Right/Down"->Print();
											}

											label 5 {
												"Right/Up"->Print();
											}

											label 6 {
												"Left/Down"->Print();
											}

											label 7 {
												"Left/Up"->Print();
											}
										};

										if(soundings[k]) {
											" [X], "->Print()
										}
										else {
											" [], "->Print();
										};
									};

									""->PrintLine();
								};
							};
						};
					};  	
				};

				@framework->FrameStart();
				Render(frame_count);
				@framework->FrameEnd();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : GetSoundings(x : Int, y : Int) ~ Bool[] {
		soundings : Bool[];

		if(x < @mountain->Size()) {
			rocks := @mountain->Get(x)->GetRocks();
			if(y < rocks->Size()) {
				soundings := Bool->New[8];

"#: rock: {$x},{$y}"->PrintLine();

				# up
				if(x - 1 > -1) {
					alt_x := x - 1;
					alt_rocks := @mountain->Get(alt_x)->GetRocks();
					soundings[0] := y < alt_rocks->Size();
				};

				# down
				if(x + 1 < @mountain->Size()) {
					alt_x := x + 1;
					alt_rocks := @mountain->Get(alt_x)->GetRocks();
					soundings[1] := y < alt_rocks->Size();
				};

				# left
				if(y - 1 > -1) {
					soundings[2] := y - 1 > -1;
				};

				# right 
				if(y - 1 > -1) {
					alt_rocks := @mountain->Get(x)->GetRocks();
					soundings[3] := y + 1 < alt_rocks->Size();
				};

				# down/right
				
				# down/left
				if(x + 1 < @mountain->Size() & y - 1 > -1) {
					
					alt_x := x + 1;
					alt_rocks := @mountain->Get(alt_x)->GetRocks();
					soundings[6] := y < alt_rocks->Size() & y - 1 > -1;
				};

				# up/right

				# up/left
			};
		};

		return soundings;
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		left_shapes := @framework->GetShapes();
		each(shape in left_shapes) {
			block := shape->As(Rectangle);
			block->Render();
		};

		each(level in @mountain) {
			rocks := level->GetRocks();
			each(rock in rocks) {
				rock->GetSprite()->Render();
			};
		};
						
		@framework->Show();
	}
}

class Rock {
	@sprite : Rectangle;

	New(sprite : Rectangle) {
		@sprite := sprite;
	}

	method : public : GetSprite() ~ Rectangle {
		return @sprite;
	}
}

class Rocks {
	@rects : Rock[];

	New(rects : Rock[]) {
		@rects := rects;
	}

	method : public : GetRocks() ~ Rock[] {
		return @rects;
	}
}

consts GameConsts {
	SCREEN_WIDTH := 1000,
	SCREEN_HEIGHT := 400
}