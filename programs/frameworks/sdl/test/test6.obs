use Game.SDL2;
use Game.Framework;

class War {
	@framework : GameFramework;
	@color_black, @color_gray : Color;
	@mountain : Collection.Vector<Rocks>;
	@is_debug : Bool;

	@bomb : Rectangle;
	@down : Bool;
	@down_timer : Int;

	function : Main(args : String[]) ~ Nil {
		War->New()->Run();
	}
	
	New() {
		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "War!");
		@is_debug := true;

		@color_black := Color->New(0, 0, 0);
		@color_gray := Color->New(113, 121, 126);

		@framework->SetClearColor(@color_black);

		@color_blue := Color->New(14, 248, 248);

		id := 0;
		half_hor_max := 20;
		hort_rock_pos := 0.0;
		@mountain := Collection.Vector->New()<Rocks>;
		each(i : half_hor_max) {
			hort_rock_pos += 0.75;
			hort_rock_len := Int->Random(hort_rock_pos + 1, hort_rock_pos + 4);
			rocks := Rock->New[hort_rock_len];

			each(j : hort_rock_len) {
				rock_sprite := @framework->AddRectangle(20, 20);
				rock_sprite->SetColor(@color_blue);
				rock_sprite->SetPostion(Position->New(j * 20, i * 20, 20, 20));
				rocks[j] := Rock->New(id++, rock_sprite);
			};

			@mountain->AddBack(Rocks->New(rocks));
		};

		@bomb := @framework->AddRectangle(7, 7)
		@bomb->SetPostion(Position->New(GameConsts->SCREEN_WIDTH * 0.75, GameConsts->SCREEN_HEIGHT - 7, 7, 7));
		@bomb->SetColor(@color_gray);
		@bomb->SetFill(true);
	}
	
	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
			
			frame_count := 0;
			quit := false;

			while(<>quit) {
				# process input
				while(e->Poll() <> 0) {
					# quit event
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# left mouse button event
					else if(e->GetMButton() <> Nil & e->GetMButton()->GetButton() = MouseButtonValue->SDL_BUTTON_LEFT) {
						point := Point->New();
						Cursor->GetMouseState(point);

						mouse_x := point->GetX();
						mouse_y := point->GetY();

						each(i : @mountain) {
							rocks := @mountain->Get(i)->GetRocks();
							each(j : rocks) {
								rock := rocks[j];
								
								if(<>rock->IsDestroyed() & rock->GetSprite()->GetPosition()->IntersectsPoint(mouse_x, mouse_y)) {
									rock->ReduceStrength(Rock->Strength->MAX);
									soundings := GetSoundings(i , j);
									each(k : soundings) {
										sounding := soundings[k];

										if(sounding <> Nil) {
											sounding->ReduceStrength(Int->Random(Rock->Strength->MAX * 0.25, Rock->Strength->MAX));
										};
									};
								};
							};
						};  	
					};
				};

				# render
				@framework->FrameStart();
				Render(frame_count);
				@framework->FrameEnd();

				# update frame count
				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					frame_count := 0;
				};
			};		
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : GetSoundings(x : Int, y : Int) ~ Rock[] {
		soundings := Rock->New[8];

		# up
		soundings[0] := GetRock(x - 1, y);

		# up/right
		soundings[5] := GetRock(x + 1, y - 1);

		# right
		soundings[2] := GetRock(x, y + 1);

		# down/right
		soundings[3] := GetRock(x + 1, y + 1);

		# down
		soundings[4] := GetRock(x + 1, y);

		# down/left
		soundings[1] := GetRock(x - 1, y + 1);

		# left
		soundings[6] := GetRock(x, y - 1);

		# up/left
		soundings[7] := GetRock(x - 1, y - 1);

		return soundings;
	}

	method : GetRock(x : Int, y : Int) ~ Rock {
		if(x > -1 & x < @mountain->Size()) {
			rocks := @mountain->Get(x)->GetRocks();
			if(y > -1 & y < rocks->Size()) {
				return rocks[y];
			};
		};

		return Nil;
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		each(level in @mountain) {
			rocks := level->GetRocks();
			each(rock in rocks) {
				if(<>rock->IsDestroyed()) {
					rock->Render(frame_count);
				};
			};
		};
		
		if(frame_count % 7 = 0) {
			if(<>@down & @bomb->GetCenterY() < 100) {
				@down := true;
				@down_timer := 7;
			};

			if(@down_timer <> 0) {
				@down_timer -= 1;
			}
			else if(@down) {
				if(@bomb->GetCenterY() < 100) {
					@bomb->AddY(1);
				}
				else if(@bomb->GetCenterY() < 300) {
					@bomb->AddY(2);
				}
				else {
					@bomb->AddY(5);
				};
			}
			else {
				if(@bomb->GetCenterY() > 100) {
					@bomb->AddY(-5);
				}
				if(@bomb->GetCenterY() > 300) {
					@bomb->AddY(-2);
				}
				else {
					@bomb->AddY(-1);
				};
			};

			@bomb->AddX(-4);		
			@bomb->Render();
		};
						
		@framework->Show();
	}
}

class Rock {
	@id : Int;
	@strength : Int;
	@sprite : Rectangle;

	consts Strength {
		MAX := 15
	}

	New(id : Int, sprite : Rectangle) {
		@id := id;
		@strength := Rock->Strength->MAX;
		@sprite := sprite;
	}

	method : public : GetSprite() ~ Rectangle {
		return @sprite;
	}

	method : public : GetId() ~ Int {
		return @id;
	}

	method : public : IsDestroyed() ~ Bool {
		return @strength <= 0;
	}

	method : public : ReduceStrength(change : Int) ~ Nil {
		if(@strength > 0) {
			@strength -= change;
		};
	}

	method : public : Render(frame_count : Int) ~ Nil {
		if(@strength < Rock->Strength->MAX / 2) {
			@sprite->SetColor(Color->New(166, 44, 43));
		};

		@sprite->Render();
	}

	method : public : ToString() ~ String {
		return "Rock: id={$@id}";
	}
}

class Rocks {
	@rocks : Rock[];

	New(rocks : Rock[]) {
		@rocks := rocks;
	}

	method : public : GetRocks() ~ Rock[] {
		return @rocks;
	}

	method : public : ToString() ~ String {
		buffer := "[Rocks: ";

		each(rock in @rocks) {
			buffer += rock->ToString();
			buffer += '\n';
		};
		buffer += ']';

		return buffer;
	}
}

consts GameConsts {
	SCREEN_WIDTH := 1000,
	SCREEN_HEIGHT := 400
}