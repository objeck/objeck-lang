use Game.SDL2;
use Game.Framework;

class War {
	@framework : GameFramework;
	@color_white, @color_black, @color_blue, @color_green, @color_red : Color;
	@mountain : Collection.Vector<Rocks>;
	@mouse_x : IntRef;
	@mouse_y : IntRef;
	@debug : Bool;

	function : Main(args : String[]) ~ Nil {
		War->New()->Run();
	}
	
	New() {
		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "War!");
		@debug := true;

		@mouse_x := IntRef->New();
		@mouse_y := IntRef->New();
		
		@color_black := Color->New(0, 0, 0);
		@framework->SetClearColor(@color_black);

		@color_white := Color->New(255,255,242);
		@color_blue := Color->New(14, 248, 248);
		@color_red := Color->New(191,0,0);
		@color_green := Color->New(63,90,54);

		id := 0;
		half_hor_max := 20;
		hort_rock_pos := 0.0;
		@mountain := Collection.Vector->New()<Rocks>;
		each(i : half_hor_max) {
			hort_rock_pos += 0.75;
			hort_rock_len := Int->Random(hort_rock_pos + 1, hort_rock_pos + 4);
			rocks := Rock->New[hort_rock_len];

			each(j : hort_rock_len) {
				rock_sprite := @framework->AddRectangle(20, 20);
				rock_sprite->SetColor(@color_blue);
				rock_sprite->SetPostion(Position->New(j * 20, i * 20, 20, 20));
				rocks[j] := Rock->New(id++, rock_sprite);
			};

			@mountain->AddBack(Rocks->New(rocks));
		};
	}
	
	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
			
			frame_count := 0;
			quit := false;

			while(<>quit) {
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# mouse
					else if(e->GetMButton() <> Nil & e->GetMButton()->GetButton() = MouseButtonValue->SDL_BUTTON_LEFT) {
						point := Point->New();
						Cursor->GetMouseState(point);

						mouse_x := point->GetX();
						mouse_y := point->GetY();

						each(i : @mountain) {
							rocks := @mountain->Get(i)->GetRocks();
							each(j : rocks) {
								rock_sprite := rocks[j]->GetSprite();
								
								if(rock_sprite->GetPosition()->IntersectsPoint(mouse_x, mouse_y)) {
									rock_sprite->SetFill(true);
									rock_sprite->SetColor(@color_green);

									GetRock(i, j)->ToString()->PrintLine();


									soundings := GetSoundings(i , j);
									if(@debug) {
										buffer := "\t";
										each(k : soundings) {
											sounding := soundings[k];

											select(k) {
												label 0 {
													buffer += "Up["
												}

												label 1 {
													buffer += "Up/Right["
												}

												label 2 {
													buffer += "Right["
												}

												label 3 {
													buffer += "Down/Right["
												}

												# down/left
												label 4 {
													buffer += "Down["
												}

												# down/right
												label 5 {
													buffer += "Down/Left["
												}

												# up/left
												label 6 {
													buffer += "Left["
												}
												
												# up/right
												label 7 {
													buffer += "Up/Left["
												}
											};

											if(sounding <> Nil) {
												buffer += sounding->GetId();
											};

											buffer += "], ";
										};

										buffer->PrintLine();
									};
								};
							};
						};  	
					};

					@framework->FrameStart();
					Render(frame_count);
					@framework->FrameEnd();

					frame_count += 1;
					if(frame_count >= @framework->GetFps()) {
						frame_count := 0;
					};
				};
			};		
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : GetSoundings(x : Int, y : Int) ~ Rock[] {
		soundings := Rock->New[8];

		# up
		soundings[0] := GetRock(x - 1, y);

		# up/right
		soundings[5] := GetRock(x + 1, y - 1);

		# right
		soundings[2] := GetRock(x, y + 1);

		# down/right
		soundings[3] := GetRock(x + 1, y + 1);

		# down
		soundings[4] := GetRock(x + 1, y);

		# down/left
		soundings[1] := GetRock(x - 1, y + 1);

		# left
		soundings[6] := GetRock(x, y - 1);

		# up/left
		soundings[7] := GetRock(x - 1, y - 1);

		return soundings;
	}

	method : GetRock(x : Int, y : Int) ~ Rock {
		if(x > -1 & x < @mountain->Size()) {
			rocks := @mountain->Get(x)->GetRocks();
			if(y > -1 & y < rocks->Size()) {
				return rocks[y];
			};
		};

		return Nil;
	}

	method : Render(frame_count : Int) ~ Nil {
		@framework->Clear();

		left_shapes := @framework->GetShapes();
		each(shape in left_shapes) {
			block := shape->As(Rectangle);
			block->Render();
		};

		each(level in @mountain) {
			rocks := level->GetRocks();
			each(rock in rocks) {
				rock->GetSprite()->Render();
			};
		};
						
		@framework->Show();
	}
}

class Rock {
	@id : Int;
	@sprite : Rectangle;

	New(id : Int, sprite : Rectangle) {
		@id := id;
		@sprite := sprite;
	}

	method : public : GetSprite() ~ Rectangle {
		return @sprite;
	}

	method : public : GetId() ~ Int {
		return @id;
	}

	method : public : ToString() ~ String {
		return "Rock: id={$@id}";
	}
}

class Rocks {
	@rocks : Rock[];

	New(rocks : Rock[]) {
		@rocks := rocks;
	}

	method : public : GetRocks() ~ Rock[] {
		return @rocks;
	}

	method : public : ToString() ~ String {
		buffer := "[Rocks: ";

		each(rock in @rocks) {
			buffer += rock->ToString();
			buffer += '\n';
		};
		buffer += ']';

		return buffer;
	}
}

consts GameConsts {
	SCREEN_WIDTH := 1000,
	SCREEN_HEIGHT := 400
}