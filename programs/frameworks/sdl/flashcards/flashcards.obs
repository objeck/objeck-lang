use Game.SDL2;
use Game.Framework;

class Flashcards {
	@framework : GameFramework;
	@card_color : Color;
	
	@top_sprite : TextSprite;
	@top_string : String;
	@top_number : Int;
	
	@bottom_sprite : TextSprite;
	@bottom_string : String;
	@bottom_number : Int;
	
	@answer_sprite : TextSprite;
	@answer_string : String;

	@score_sprite : TextSprite;
	
	@card_rect : Rect;
	@line_rect : Rect;

	@score_rects : Rect[];
	@score_values : Int[];
	@point_index : Int;

	@max_points : Int;

	@thumbs_up_img : ImageSprite;
	@thumbs_down_img : ImageSprite;
	@star_img : ImageSprite;

	@cheer_chunk : MixChunk;
	@aww_chunk : MixChunk;

	@timer : Int;
	@timer_text : TextSprite;

	@is_sound : Bool;

	function : Main(args : String[]) ~ Nil {
		flash_cards : Flashcards;
		if(args->Size() = 1) {
			flash_cards := Flashcards->New(true);
		}
		else {
			flash_cards := Flashcards->New(false);
		};
		flash_cards->Run();
	}

	New(is_sound : Bool) {
		@is_sound := is_sound;

		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "Flashcards");		
		@framework->SetClearColor(Color->New(0, 0, 0));

		card_font := LoadMedia();

		CreateRects();

		# create top text
		@top_sprite := @framework->AddTextSprite();
		@top_sprite->SetFont(card_font);
		@top_string := "";

		# create bottom text
		@bottom_sprite := @framework->AddTextSprite();
		@bottom_sprite->SetFont(card_font);
		@bottom_string := "";

		# create answer text
		@answer_sprite := @framework->AddTextSprite();
		@answer_sprite->SetFont(card_font);
		@answer_string := "";

		# score text
		score_font := LoadScoreFont();
		@score_sprite := @framework->AddTextSprite();
		@score_sprite->SetFont(score_font);

		@timer := GameConsts->PLAY_TIME;
		@timer_text := @framework->AddTextSprite();
		@timer_text->SetFont(score_font);
		@timer_text->RenderedText("Time: {$@timer}");
	}

	method : CreateRects() ~ Nil {
		@max_points := 30;

		offset := 24;
		@score_rects := Rect->New[@max_points];
		each(i : @score_rects) {
			@score_rects[i] := Rect->New(offset + i * 16 + i * 4, 32, 16, 16);
		};
		@score_values := Int->New[@max_points];
		@point_index := 0;

		x := GameConsts->SCREEN_WIDTH * 0.25;
		y := GameConsts->SCREEN_HEIGHT * 0.15;
		w := GameConsts->SCREEN_WIDTH * 0.75 - x;
		h := GameConsts->SCREEN_HEIGHT * 0.95 - y;
		@card_color := Color->New(213, 196, 161);
		@card_rect := Rect->New(x, y, w, h);

		@line_rect := Rect->New(x + 60, y + 250, 210, 3);
	}

	method : LoadMedia() ~ Font {
		font_path :=  "./media/lazy.ttf";
		font := Font->New(font_path, 128);
		if(font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			Runtime->Exit(1);
		};

		# thumbs up png
		thumbs_up_path := "./media/thumbs-up.png";
		@thumbs_up_img := @framework->AddImageSprite(thumbs_up_path);
		@thumbs_up_img->SetCenterX(GameConsts->SCREEN_WIDTH / 2);
		@thumbs_up_img->SetCenterY(180);

		# thumbs down png
		thumbs_down_path := "./media/thumbs-down.png";
		@thumbs_down_img := @framework->AddImageSprite(thumbs_down_path);
		@thumbs_down_img->SetCenterX(GameConsts->SCREEN_WIDTH / 2);
		@thumbs_down_img->SetCenterY(180);

		# star png
		star_path := "./media/star.png";
		@star_img := @framework->AddImageSprite(star_path);
		@star_img->SetCenterX(GameConsts->SCREEN_WIDTH / 2);
		@star_img->SetCenterY(180);

		@cheer_chunk := MixChunk->New("./media/cheer.wav");
		if(@cheer_chunk->IsNull()) {
			"--- Cannot load sound! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		@aww_chunk := MixChunk->New("./media/aww.wav");
		if(@aww_chunk->IsNull()) {
			"--- Cannot load sound! ---"->ErrorLine();
			Runtime->Exit(1);
		};
		
		return font;
	}

	method : LoadScoreFont() ~ Font {
		font_path :=  "./media/hella.ttf";
		font := Font->New(font_path, 18);
		if(font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			Runtime->Exit(1);
		};

		return font;
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();

			GetProblem();
			
			quit := false;
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        GetInput(e);
				    };
				};

				Render();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					@timer -= 1;
					if(@timer < 0) {
						@point_index := @max_points;
					}
					else {
						@timer_text->RenderedText("Time: {$@timer}", Color->New(255, 255, 0));
					};

					frame_count := 0;
				};

				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@cheer_chunk->Free();
			@aww_chunk->Free();
			@framework->Quit();
		};
	}

	method : GetInput(e : Event) ~ Nil {
		if(@point_index < @max_points) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_DELETE:
	        	label Scancode->SDL_SCANCODE_BACKSPACE: {
	            	@answer_string := "";
	            }

	            label Scancode->SDL_SCANCODE_RETURN:
	            label Scancode->SDL_SCANCODE_KP_ENTER: {
	            	CheckProblem();
	            	GetProblem();
	            }

	        	label Scancode->SDL_SCANCODE_0:
	        	label Scancode->SDL_SCANCODE_KP_0: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('0');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_1:
	            label Scancode->SDL_SCANCODE_KP_1: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('1');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_2:
	            label Scancode->SDL_SCANCODE_KP_2: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('2');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_3:
	            label Scancode->SDL_SCANCODE_KP_3: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('3');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_4:
	            label Scancode->SDL_SCANCODE_KP_4: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('4');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_5:
	            label Scancode->SDL_SCANCODE_KP_5: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('5');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_6:
	            label Scancode->SDL_SCANCODE_KP_6: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('6');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_7:
	            label Scancode->SDL_SCANCODE_KP_7: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('7');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_8:
	            label Scancode->SDL_SCANCODE_KP_8: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('8');
	            	};
	            }

	            label Scancode->SDL_SCANCODE_9:
	            label Scancode->SDL_SCANCODE_KP_9: {
	            	if(@answer_string->Size() < 2) {
	            		@answer_string->Append('9');
	            	};
	            }
	        };
	    }
	    else if(e->GetKey()->GetKeysym()->GetScancode() = Scancode->SDL_SCANCODE_RETURN |
	            e->GetKey()->GetKeysym()->GetScancode() = Scancode->SDL_SCANCODE_KP_ENTER) {
	    	@point_index := 0;
	   	
	    	@timer := GameConsts->PLAY_TIME;
	    	@timer_text->RenderedText("Time: {$@timer}");
	   	
	    	each(i : @score_values) {
	    		@score_values[i] := 0;
	    	};
	    	GetProblem();
	    };
	}

	method : CheckProblem() ~ Nil {
		answer := @answer_string->ToInt();

		# correct
		if(answer = @top_number - @bottom_number) {
			@score_values[@point_index] := 1;
			if(@is_sound) {
				@cheer_chunk->PlayChannel(-1, 0);
			};
		}
		# wrong
		else {
			@score_values[@point_index] := 2;
			if(@is_sound) {
				@aww_chunk->PlayChannel(-1, 0);
			};
		};
		@point_index += 1;
	}

	method : GetProblem() ~ Nil {
		number_one := Int->Random(0, 9);
		number_two := Int->Random(0, number_one + 10);

		if(number_one < number_two) {
			@bottom_number := number_one;
			@top_number := number_two;
		}
		else {
			@bottom_number := number_two;
			@top_number := number_one;
		};
		

		@top_string := @top_number->ToString();
		
		@bottom_string := "-\t";
		@bottom_string += @bottom_number->ToString();
		@answer_string := "";
	}

	method : Render() ~ Nil {
		@framework->Clear();

		renderer := @framework->GetRenderer();
		if(@point_index < @max_points) {
			RenderCard(renderer);
		}
		else {
			RenderScore(renderer);
		};

		@framework->Show();
	}

	method : RenderScore(renderer : Renderer) ~ Nil {
		correct := 0;
		each(i : @score_values) {
			if(@score_values[i] = 1) {
				correct += 1;
			};
		};
		correct_precent := ((correct->As(Float) / @max_points->As(Float)) * 100.0)->As(Int);
		
		if(correct_precent >= 90) {			
			@star_img->Render();
		}
		else if(correct_precent < 90 & correct_precent >= 70) {			
			@thumbs_up_img->Render();
		}
		else {			
			@thumbs_down_img->Render();
		};

		@score_sprite->RenderedText("{$correct}/{$@max_points} = {$correct_precent}%", Color->New(255, 255, 255, 0));
		@score_sprite->Render(275, 240);
	}
	
	method : RenderCard(renderer : Renderer) ~ Nil {
		@timer_text->Render(10, 10);

		# draw card		
		renderer->SetDrawColor(@card_color->GetR(), @card_color->GetG(), @card_color->GetB(), 0);		
		renderer->FillRect(@card_rect);

		# draw problem text
		y := @card_rect->GetY();
		
		DrawText(@top_string, y + 20, @top_sprite);
		DrawText(@bottom_string, y + 120, @bottom_sprite);

		# draw line
		renderer->SetDrawColor(0, 0, 0, 0);
		renderer->FillRect(@line_rect);

		# draw answer
		if(@answer_string->Size() > 0) {
			DrawText(@answer_string, y + 260, @answer_sprite);
		};

		# draw score		
		each(i : @score_rects) {
			if(@score_values[i] = 0) {
				renderer->SetDrawColor(255, 255, 255, 0);
			}
			else if(@score_values[i] = 1) {
				renderer->SetDrawColor(0, 255, 0, 0);
			}
			else if(@score_values[i] = 2) {
				renderer->SetDrawColor(255, 0, 0, 0);
			};

			renderer->FillRect(@score_rects[i]);
		};
	}

	method : DrawText(msg : String, y : Int, text : TextSprite) ~ Nil {
		text->RenderedText(msg);
		x := @card_rect->GetX();

		if(msg->Size() = 1) {
			text->Render(x + 175, y);
		}
		else if(msg->Size() = 2) {
			text->Render(x + 105, y);
		}
		else {
			text->Render(x + 40, y);
		};
	}
}

consts GameConsts {
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480,
	PLAY_TIME := 300
}