use API.OpenAI.Responses, Data.JSON.Scheme, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() <> 1) {
			">>> Missing OpenAI license file. <<<"->ErrorLine();
			return;
		};

		query := Collection.Pair->New("user", "What is the longest street in Colorado?")<String, String>;
		
		model := "gpt-4o-mini";
		token := GetApiKey(args[0]);

		# TODO: 
		scheme_params := Set->New()<ParameterType>;
		scheme_params->Insert(ParameterType->New("name", ParameterType->Type->STRING, "name of the street"));
		scheme_params->Insert(ParameterType->New("length", ParameterType->Type->STRING, "length of the street"));
		scheme_params->Insert(ParameterType->New("state", ParameterType->Type->STRING, "state the street is located"));
		scheme_params->Insert(ParameterType->New("city", ParameterType->Type->STRING, "city located"));

		required := ["name", "length", "state", "city"];
		scheme := ParameterType->New("longest-co-street", scheme_params, required, "longest street");
		scheme->SetAdditionalProps(true);

		response := Response->Respond(model, query, scheme, token);
		if(response = Nil) {
			Response->GetLastError()->ErrorLine();
			return;
		};
		response->ToString()->PrintLine();
	}

	function : GetApiKey(filename : String) ~ String {
		token := System.IO.Filesystem.FileReader->ReadFile(filename);
		if(token <> Nil) {
			token := token->Trim();
			if(<>token->StartsWith("sk-") & <>token->StartsWith("pplx-")) {
				">>> Unable to read token from file: '{$filename}' <<"->PrintLine();
				Runtime->Exit(1);
			};

			return token;
		};

		return Nil;
	}
}