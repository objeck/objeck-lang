use Collection, Data.JSON, Web.HTTP, Web.HTTP.Server;

class TestMcp {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			WebServer->Serve(RequestHandler->New()->GetClass(), args[0]->ToInt(), true);
		}
		else {
			">>> Usage <<<"->PrintLine();
		};
	}
}

class RequestHandler from HttpRequestHandler {
	@is_debug : Bool;

	New() {
		Parent();

		@is_debug := true;
	}

	method : ProcessGet(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		if(@is_debug) {
			"\n### GET ####"->PrintLine();
		};
		
		response->SetCodeTypeContent(200, "text/event-stream", ": keepalive\n\n");
		return false;
	}

	method : ProcessPost(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		if(@is_debug) {
			"\n### POST ###"->PrintLine();
		};

		if(request->HasContent()) {
			content := request->GetContent();

			if(@is_debug) {
				ShowPayload(content);
			};

			parser :=JsonParser->New(content);
			if(parser->Parse()) {
				root_json := parser->GetRoot();

				method_json := root_json->Get("method");
				if(method_json <> Nil) {
					method_name := method_json->GetValue();

					# process method
					if(method_name <> Nil) {
						if(@is_debug) {
							"[Post: method_name='{$method_name}']"->PrintLine();
						};
	
						# execute method
						select(method_name) {
							# initialize
							label "ping": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\":
									\"2.0\",
									\"id\": {$id},
									\"result\": {}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}

							# initialize
							label "initialize": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",
									\"id\": {$id},
									\"result\": {
										\"protocolVersion\": \"2025-06-18\",
										\"capabilities\": {
											\"tools\": { \"listChanged\": true },
											\"resources\": { \"listChanged\": true },
											\"prompts\": { \"listChanged\": true },
											\"logging\": {}
										},
										\"serverInfo\": {
											\"name\": \"MyMcpServer\",
											\"version\": \"0.1.0\"
										},
										\"instructions\": \"Welcome! This server is ready to accept MCP requests.\"
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}
							
							# notifications/initialized
							label "notifications/initialized": {
								if(@is_debug) {
									"### notifications/initialized ###"->PrintLine();
								};

								response->SetCode(202);
								return false;
							}
							
							# logging/setLevel
							label "logging/setLevel": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",
									\"id\": {$id},
									\"result\": {}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}
							
							# resources/list
							label "resources/list": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",
									\"id\": {$id},
									\"result\": {
										\"resources\": [ {
												\"uri\": \"file:///readme.txt\",
												\"name\": \"README\",
												\"description\": \"Project readme\",
												\"mimeType\": \"text/plain\"
											}
										]
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}
							
							# resources/read
							label "resources/read": {
								id := root_json->Get("id")->GetValue()->ToInt();

								call_params_json := root_json->Get("params");								
								if(call_params_json <> Nil) {
									uri := call_params_json->Get("uri")->GetValue();
										
									payload := "{
										\"jsonrpc\": \"2.0\",
										\"id\": {$id},
										\"result\": {
											\"contents\": [ {
													\"uri\": \"{$uri}\",
													\"mimeType\": \"text/plain\",
													\"text\": \"Hello from resources/read, check URI\\n\"
												}
											]
										}
									}";

									#~
									"mimeType": "image/png",
			        				"blob": "iVBORw0KGgoAAAANSUhEUgAA..."  // base64
									~#

									if(@is_debug) {
										ShowPayload(payload);
									};

									response->SetCodeTypeContent(200, "application/json", payload);
									return false;
								};
							}
							
							# tools/list
							label "tools/list": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",
									\"id\": {$id},
									\"result\": {
										\"tools\": [      
											{        
												\"name\": \"echo\",
												\"description\":
												\"Echo a string\",
												\"inputSchema\": {
													\"type\": \"object\",
													\"properties\": { \"text\": { \"type\": \"string\" } },
													\"required\": [\"text\"]
												}
											}
										]
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}

							# prompts/list
							label "prompts/list": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",  
									\"id\": {$id},  \"result\": {    
										\"prompts\": [ 
											{        
												\"name\": \"greet\",
												\"title\": \"Greet a User\",
												\"description\": \"Compose a friendly greeting.\",
												\"arguments\": [ { 
													\"name\": \"name\", \"description\": \"User's name\", \"required\": true }
												]
											},
											{
												\"name\": \"explain_topic\",
												\"title\": \"Explain a Topic\",
												\"description\": \"Short explanation suitable for a beginner.\",
												\"arguments\": [ {
													\"name\": \"topic\", \"description\": \"Subject to explain\", \"required\": true }
												]
											}
										]
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}

							# prompts/get
							label "prompts/get": {
								call_name : String; 
								
								call_params_json := root_json->Get("params");								
								if(call_params_json <> Nil) {
									name_json := call_params_json->Get("name");
									if(name_json <> Nil) {
										call_name := name_json->GetValue();
									};

									call_params_json := call_params_json->Get("arguments");
									if(call_params_json <> Nil & call_name <> Nil) {
										id := root_json->Get("id")->GetValue()->ToInt();

										# greet prompt
										if(call_name->Equals("greet")) {
											name := call_params_json->Get("name")->GetValue();

											payload := "{
												\"jsonrpc\": 
												\"2.0\",  
												\"id\": {$id},  
												\"result\": {  
													\"description\": \"Greeting prompt\",  
													\"messages\": [
														{
															\"role\": \"user\",
															\"content\": { 
																\"type\": \"text\", 
																\"text\": \"{$name}\" 
															}
														}
													]    
												}
											}";

											if(@is_debug) {
												ShowPayload(payload);
											};

											response->SetCodeTypeContent(200, "application/json", payload);
											return false;
										}
										# greet prompt
										else if(call_name->Equals("explain_topic")) {
											explain_topic := call_params_json->Get("topic")->GetValue();
											
											payload := "{
												\"jsonrpc\": 
												\"2.0\",  
												\"id\": {$id},  
												\"result\": {  
													\"description\": \"Explain prompt\",  
													\"messages\": [
														{
															\"role\": \"user\",
															\"content\": { 
																\"type\": \"text\", 
																\"text\": \"{$explain_topic}\" 
															}
														}
													]    
												}
											}";

											if(@is_debug) {
												ShowPayload(payload);
											};

											response->SetCodeTypeContent(200, "application/json", payload);
											return false;
										}
									};
								};
							}

							# tools/call
							label "tools/call": {
								call_name : String; text : String;

								call_params_json := root_json->Get("params");								
								if(call_params_json <> Nil) {
									name_json := call_params_json->Get("name");
									if(name_json <> Nil) {
										call_name := name_json->GetValue();
									};

									call_params_json := call_params_json->Get("arguments");
									if(call_params_json <> Nil & call_name <> Nil) {
										id := root_json->Get("id")->GetValue()->ToInt();
										
										# echo call
										if(call_name->Equals("echo")) {
											text := call_params_json->Get("text")->GetValue();									
											
											payload := "{
												\"jsonrpc\": 
												\"2.0\",  
												\"id\": {$id},  
												\"result\": {    
													\"content\": [
														{ 
															\"type\": \"text\", 
															\"text\": \"{$text}\" 
														}    
													],    
													\"isError\": false  
												}
											}";

											if(@is_debug) {
												ShowPayload(payload);
											};

											response->SetCodeTypeContent(200, "application/json", payload);
											return false;
										}
									};
								};
							}

							# resources/templates/list
							label "resources/templates/list": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",
									\"id\": {$id},
									\"result\": {
										\"resourceTemplates\": [
											{
												\"uriTemplate\": \"file:///{path}\",
												\"name\": \"Project Files\",
												\"title\": \"Project Files\",
												\"description\": \"Access files in the project directory\",        
												\"mimeType\": \"application/octet-stream\"
											}
										]
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}
						};
					};
				};
			};
		};

		response->SetCode(204);
		if(@is_debug) {
			">>>  Unknown Message <<<"->ErrorLine();
		};
		return false;
	}

	function : ShowPayload(payload : String) ~ Nil {
		payload->ReplaceAll("\t", "  ")->PrintLine();
	}
} 