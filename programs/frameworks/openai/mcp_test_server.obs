use Collection, Data.JSON, Web.HTTP, Web.HTTP.Server;

class TestMcp {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			WebServer->Serve(RequestHandler->New()->GetClass(), args[0]->ToInt(), true);
		}
		else {
			">>> Usage <<<"->PrintLine();
		};
	}
}

class RequestHandler from HttpRequestHandler {
	@is_debug : Bool;

	New() {
		Parent();

		@is_debug := true;
	}

	method : ProcessGet(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		if(@is_debug) {
			"\n### Called: GET ####"->PrintLine();
		};
	
		if(request->HasContent()) {
			if(@is_debug) {
				request->GetContent()->PrintLine();
			};
		}
		else {
			">>> WTF <<<"->PrintLine();
		};

		response->SetCodeTypeContent(200, "text/event-stream", ": keepalive\n\n");
		return false;
	}

	method : ProcessPost(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		if(@is_debug) {
			"\n### Called: POST ###"->PrintLine();
		};

		if(request->HasContent()) {
			content := request->GetContent();

			if(@is_debug) {
				ShowPayload(content);
			};

			parser :=JsonParser->New(content);
			if(parser->Parse()) {
				root_json := parser->GetRoot();

				method_json := root_json->Get("method");
				if(method_json <> Nil) {
					method_name := method_json->GetValue();

					if(@is_debug) {
						"[Post: method_name='{$method_name}']"->PrintLine();
					};


					#
					# initialize
					# 
					if(method_name <> Nil & method_name->Equals("ping")) {
						id := root_json->Get("id")->GetValue()->ToInt();
						payload := "{
							\"jsonrpc\":
							\"2.0\",
							\"id\": {$id},
							\"result\": {}
						}";

						if(@is_debug) {
							ShowPayload(payload);
						};

						response->SetCodeTypeContent(200, "application/json", payload);
						return false;
					}
					#
					# initialize
					# 
					else if(method_name <> Nil & method_name->Equals("initialize")) {
						id := root_json->Get("id")->GetValue()->ToInt();
						payload := "{
							\"jsonrpc\": \"2.0\",
							\"id\": {$id},
							\"result\": {
								\"protocolVersion\": \"2025-06-18\",
								\"capabilities\": {
									\"tools\": { \"listChanged\": true },
									\"resources\": { \"listChanged\": true },
									\"prompts\": { \"listChanged\": true },
									\"logging\": {}
								},
								\"serverInfo\": {
									\"name\": \"MyMcpServer\",
									\"version\": \"0.1.0\"
								},
								\"instructions\": \"Welcome! This server is ready to accept MCP requests.\"
							}
						}";

						if(@is_debug) {
							ShowPayload(payload);
						};

						response->SetCodeTypeContent(200, "application/json", payload);
						return false;
					}
					#
					# notifications/initialized
					# 
					else if(method_name <> Nil & method_name->Equals("notifications/initialized")) {
						if(@is_debug) {
							"### notifications/initialized ###"->PrintLine();
						};

						response->SetCode(202);
						return false;
					}
					#
					# logging/setLevel
					# 
					else if(method_name <> Nil & method_name->Equals("logging/setLevel")) {
						id := root_json->Get("id")->GetValue()->ToInt();
						payload := "{
							\"jsonrpc\": \"2.0\",
							\"id\": {$id},
							\"result\": {}
						}";

						if(@is_debug) {
							ShowPayload(payload);
						};

						response->SetCodeTypeContent(200, "application/json", payload);
						return false;
					}
					#
					# resources/list
					# 
					else if(method_name <> Nil & method_name->Equals("resources/list")) {
						id := root_json->Get("id")->GetValue()->ToInt();
						payload := "{
							\"jsonrpc\": \"2.0\",
							\"id\": {$id},
							\"result\": {
								\"resources\": [ {
										\"uri\": \"file:///readme.txt\",
										\"name\": \"README\",
										\"description\": \"Project readme\",
										\"mimeType\": \"text/plain\"
									}
								]
							}
						}";

						if(@is_debug) {
							ShowPayload(payload);
						};

						response->SetCodeTypeContent(200, "application/json", payload);
						return false;
					}
					#
					# resources/read
					# 
					else if(method_name <> Nil & method_name->Equals("resources/read")) {
						id := root_json->Get("id")->GetValue()->ToInt();
						payload := "{
							\"jsonrpc\": \"2.0\",
							\"id\": {$id},
							\"result\": {
								\"contents\": [ {
										\"uri\": \"file:///readme.txt\",
										\"mimeType\": \"text/plain\",
										\"text\": \"Hello from resources/read\\n\"
									}
								]
							}
						}";

						#~
						"mimeType": "image/png",
        				"blob": "iVBORw0KGgoAAAANSUhEUgAA..."  // base64
						~#

						if(@is_debug) {
							ShowPayload(payload);
						};

						response->SetCodeTypeContent(200, "application/json", payload);
						return false;
					}
					#
					# tools/list
					# 
					else if(method_name <> Nil & method_name->Equals("tools/list")) {
						id := root_json->Get("id")->GetValue()->ToInt();
						payload := "{
							\"jsonrpc\": \"2.0\",
							\"id\": {$id},
							\"result\": {
								\"tools\": [      
									{        
										\"name\": \"echo\",
										\"description\":
										\"Echo a string\",
										\"inputSchema\": {
											\"type\": \"object\",
											\"properties\": { \"text\": { \"type\": \"string\" } },
											\"required\": [\"text\"]
										}
									}
								]
							}
						}";

						if(@is_debug) {
							ShowPayload(payload);
						};

						response->SetCodeTypeContent(200, "application/json", payload);
						return false;
					}
					#
					# tools/call
					# 
					else if(method_name <> Nil & method_name->Equals("tools/call")) {
						call_name : String;
						text_param : String;
						
						params_json := root_json->Get("params");
						if(params_json <> Nil) {
							params_name_json := params_json->Get("name");
							params_args_json := params_json->Get("arguments");
							if(params_name_json <> Nil & params_args_json <> Nil) {
								call_name := params_name_json->GetValue();
								text_param := params_args_json->Get("text")->GetValue();
							};
						};

						if(text_param <> Nil & call_name <> Nil & call_name->Equals("echo")) {
							id := root_json->Get("id")->GetValue()->ToInt();
							payload := "{
								\"jsonrpc\": 
								\"2.0\",  
								\"id\": {$id},  
								\"result\": {    
									\"content\": [
										{ \"type\": \"text\", \"text\": \"{$text_param}\" }    
									],    
									\"isError\": false  
								}
							}";

							if(@is_debug) {
								ShowPayload(payload);
							};

							response->SetCodeTypeContent(200, "application/json", payload);
							return false;
						}
					};
				};
			};
		};

		response->SetCode(204);
		if(@is_debug) {
			">>>  Unknown Message <<<"->ErrorLine();
		};
		return false;
	}

	function : ShowPayload(payload : String) ~ Nil {
		payload->ReplaceAll("\t", "  ")->PrintLine();
	}
} 