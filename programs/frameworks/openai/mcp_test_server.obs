use Collection, Data.JSON, Web.HTTP.Server;

class TestMcp {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			RequestHandler->Initialize(
				"MCP Example", 
				"0.0.1" "
				Welcome! This server is ready to accept MCP requests.");
			WebServer->Serve(RequestHandler->New()->GetClass(), args[0]->ToInt(), true);
		}
		else {
			">>> Usage <<<"->PrintLine();
		};
	}
}

class RequestHandler from HttpRequestHandler {
	@is_debug : Bool;

	@name : static : String;
	@version : static : String;
	@instructions : static : String;

	@session_cache_timer : static : CacheTimer;
	@session_cache_mutex : static : System.Concurrency.ThreadMutex;
	@session_cache : static : Hash<String, Hash<String, String>>;

	New() {
		Parent();

		@instructions := "Welcome! This server is ready to accept MCP requests.";
		@is_debug := true;
	}

	function : CheckCache() ~ Nil {
		critical(@session_cache_mutex) {
			# get key/values
			session_key_values := @session_cache->GetKeyValues()<Pair<String, Hash<String, String>>>;
			each(session_key_value in session_key_values) {
				session_key_value->GetFirst()->PrintLine();

				foo := session_key_value->GetSecond();
				foo->Find("_timestamp_")->PrintLine();
				
				"---"->PrintLine();
			};
		}
	}

	function : Initialize(name : String, version : String, instructions : String) ~ Nil {
		@name := name;
		@version := version;
		@instructions := instructions;

 		@session_cache_mutex := System.Concurrency.ThreadMutex->New("cache_mutex");
 		@session_cache := Hash->New()<String, Hash<String, String>>;
		@session_cache_timer := CacheTimer->New(15000); # 15 seconds
 		@session_cache_timer->Start(Nil);
	}

	method : ProcessGet(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		session : Hash<String, String>;
		session_id := request->GetHeader("mcp-session-id");
		if(session_id <> Nil) {
			critical(@session_cache_mutex) {
				session := @session_cache->Find(session_id);
			};
		};

		if(@is_debug) {
			if(session_id = Nil) {
				session_id := "<nil>";
			};

			has_session := session <> Nil;

			"\n### GET: session_id='{$session_id}', has_session={$has_session} ####"->PrintLine();
		};
		
		response->SetCodeTypeContent(200, "text/event-stream", ": keepalive\n\n");
		return false;
	}

	method : ProcessPost(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		session : Hash<String, String>;
		session_id := request->GetHeader("mcp-session-id");
		if(session_id <> Nil) {
			critical(@session_cache_mutex) {
				session := @session_cache->Find(session_id);
			};
		};

		session_id := request->GetHeader("mcp-session-id");
		if(@is_debug) {
			if(session_id = Nil) {
				session_id := "<nil>";
			};

			has_session := session <> Nil;

			"\n### POST: session_id='{$session_id}', has_session={$has_session} ####"->PrintLine();
		};

		if(request->HasContent()) {
			content := request->GetContent();

			if(@is_debug) {
				ShowPayload(content);
			};

			parser := JsonParser->New(content);
			if(parser->Parse()) {
				root_json := parser->GetRoot();

				method_json := root_json->Get("method");
				if(method_json <> Nil) {
					method_name := method_json->GetValue();

					# process method
					if(method_name <> Nil) {
						if(@is_debug) {
							"[Post: method_name='{$method_name}']"->PrintLine();
						};

						# execute method

						select(method_name) {
							# ping
							label "ping": {
								id := root_json->Get("id")->GetValue()->ToInt();
								WriteResponse(Nil, id, response, 200);
								return false;
							}

							# initialize
							label "initialize": {
								id := root_json->Get("id")->GetValue()->ToInt();

								result := JsonElement->New(JsonElement->JsonType->OBJECT);
								result->Insert("protocolVersion", "2025-06-18");
								result->Insert("instructions", @instructions);

								# add capabilities
								capabilities_json := JsonElement->New(JsonElement->JsonType->OBJECT);

								tools_json :=  JsonElement->New(JsonElement->JsonType->OBJECT);
								tools_json->Insert("listChanged", true);
								capabilities_json->Insert("tools", tools_json);
								
								resources_json :=  JsonElement->New(JsonElement->JsonType->OBJECT);
								resources_json->Insert("listChanged", true);
								capabilities_json->Insert("resources", resources_json);

								prompts_json :=  JsonElement->New(JsonElement->JsonType->OBJECT);
								prompts_json->Insert("listChanged", true);
								capabilities_json->Insert("resources", prompts_json);

								result->Insert("capabilities", capabilities_json);

								# server information
								server_json :=  JsonElement->New(JsonElement->JsonType->OBJECT);
								server_json->Insert("name", @name);
								server_json->Insert("version", @version);

								result->Insert("serverInfo", server_json);

								session_id := Runtime->GetUuid();
								
								session := Hash->New()<String, String>;
								session->Insert("_timestamp_", System.Time.Date->New()->GetUnixTime()->ToString())
								# TODO: insert time

								critical(@session_cache_mutex) {
									@session_cache->Insert(session_id, session);
								};

								response->SetHeader("mcp-session-id", session_id);
								WriteResponse(result, id, response, 200);

								return false;
							}
							
							# notifications/initialized
							label "notifications/initialized": {
								if(@is_debug) {
									"### notifications/initialized ###"->PrintLine();
								};

								response->SetCode(202);
								return false;
							}
							
							# logging/setLevel
							label "logging/setLevel": {
								id := root_json->Get("id")->GetValue()->ToInt();
								WriteResponse(Nil, id, response, 200);
								return false;
							}

							# resources/templates/list
							label "resources/templates/list": {
								id := root_json->Get("id")->GetValue()->ToInt();

								templates_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);

								# TODO: method callback 
								template_json := JsonElement->New(JsonElement->JsonType->OBJECT);
								template_json->Insert("uriTemplate", "https:///{path}");
								template_json->Insert("name", "Project Files");
								template_json->Insert("title", "Project Files");
								template_json->Insert("description", "Access files on the project site");
								template_json->Insert("mimeType", "application/octet-stream");

								templates_array_json->Add(template_json);

								result := JsonElement->New(JsonElement->JsonType->OBJECT);
								result->Insert("resourceTemplates", templates_array_json);
								
								WriteResponse(result, id, response, 200);
								return false;
							}
							
							# resources/list
							label "resources/list": {
								id := root_json->Get("id")->GetValue()->ToInt();

								resources_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);

								# TODO: method callback 
								resource_json := JsonElement->New(JsonElement->JsonType->OBJECT);
								resource_json->Insert("uri", "file:///{_meta}");
								resource_json->Insert("name", "Project Files");
								resource_json->Insert("description", "Access files on the project site");
								resource_json->Insert("mimeType", "application/octet-stream");

								resources_array_json->Add(resource_json);

								result := JsonElement->New(JsonElement->JsonType->OBJECT);
								result->Insert("resources", resources_array_json);
								
								WriteResponse(result, id, response, 200);
								return false;
							}
							
							# resources/read
							label "resources/read": {
								id := root_json->Get("id")->GetValue()->ToInt();

								call_params_json := root_json->Get("params");								
								if(call_params_json <> Nil) {
									uri := call_params_json->Get("uri")->GetValue();
										
									payload := "{
										\"jsonrpc\": \"2.0\",
										\"id\": {$id},
										\"result\": {
											\"contents\": [ {
													\"uri\": \"{$uri}\",
													\"mimeType\": \"text/plain\",
													\"text\": \"Hello from resources/read, check URI\\n\"
												}
											]
										}
									}";

									#~
									"mimeType": "image/png",
			        				"blob": "iVBORw0KGgoAAAANSUhEUgAA..."  // base64
									~#

									if(@is_debug) {
										ShowPayload(payload);
									};

									response->SetCodeTypeContent(200, "application/json", payload);
									return false;
								};
							}
							
							# tools/list
							label "tools/list": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",
									\"id\": {$id},
									\"result\": {
										\"tools\": [      
											{        
												\"name\": \"echo\",
												\"description\":
												\"Echo a string\",
												\"inputSchema\": {
													\"type\": \"object\",
													\"properties\": { \"text\": { \"type\": \"string\" } },
													\"required\": [\"text\"]
												}
											}
										]
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}

							# prompts/list
							label "prompts/list": {
								id := root_json->Get("id")->GetValue()->ToInt();
								payload := "{
									\"jsonrpc\": \"2.0\",  
									\"id\": {$id},  \"result\": {    
										\"prompts\": [ 
											{        
												\"name\": \"greet\",
												\"title\": \"Greet a User\",
												\"description\": \"Compose a friendly greeting.\",
												\"arguments\": [ { 
													\"name\": \"name\", \"description\": \"User's name\", \"required\": true }
												]
											},
											{
												\"name\": \"explain_topic\",
												\"title\": \"Explain a Topic\",
												\"description\": \"Short explanation suitable for a beginner.\",
												\"arguments\": [ {
													\"name\": \"topic\", \"description\": \"Subject to explain\", \"required\": true }
												]
											}
										]
									}
								}";

								if(@is_debug) {
									ShowPayload(payload);
								};

								response->SetCodeTypeContent(200, "application/json", payload);
								return false;
							}

							# prompts/get
							label "prompts/get": {
								call_name : String; 
								
								call_params_json := root_json->Get("params");								
								if(call_params_json <> Nil) {
									name_json := call_params_json->Get("name");
									if(name_json <> Nil) {
										call_name := name_json->GetValue();
									};

									call_params_json := call_params_json->Get("arguments");
									if(call_params_json <> Nil & call_name <> Nil) {
										id := root_json->Get("id")->GetValue()->ToInt();

										# greet prompt
										if(call_name->Equals("greet")) {
											name := call_params_json->Get("name")->GetValue();

											payload := "{
												\"jsonrpc\": 
												\"2.0\",  
												\"id\": {$id},  
												\"result\": {  
													\"description\": \"Greeting prompt\",  
													\"messages\": [
														{
															\"role\": \"user\",
															\"content\": { 
																\"type\": \"text\", 
																\"text\": \"{$name}\" 
															}
														}
													]    
												}
											}";

											if(@is_debug) {
												ShowPayload(payload);
											};

											response->SetCodeTypeContent(200, "application/json", payload);
											return false;
										}
										# greet prompt
										else if(call_name->Equals("explain_topic")) {
											explain_topic := call_params_json->Get("topic")->GetValue();
											
											payload := "{
												\"jsonrpc\": 
												\"2.0\",  
												\"id\": {$id},  
												\"result\": {  
													\"description\": \"Explain prompt\",  
													\"messages\": [
														{
															\"role\": \"user\",
															\"content\": { 
																\"type\": \"text\", 
																\"text\": \"{$explain_topic}\" 
															}
														}
													]    
												}
											}";

											if(@is_debug) {
												ShowPayload(payload);
											};

											response->SetCodeTypeContent(200, "application/json", payload);
											return false;
										}
									};
								};
							}

							# tools/call
							label "tools/call": {
								call_name : String; text : String;

								call_params_json := root_json->Get("params");								
								if(call_params_json <> Nil) {
									name_json := call_params_json->Get("name");
									if(name_json <> Nil) {
										call_name := name_json->GetValue();
									};

									call_params_json := call_params_json->Get("arguments");
									if(call_params_json <> Nil & call_name <> Nil) {
										id := root_json->Get("id")->GetValue()->ToInt();
										
										# echo call
										if(call_name->Equals("echo")) {
											text := call_params_json->Get("text")->GetValue();									
											
											payload := "{
												\"jsonrpc\": 
												\"2.0\",  
												\"id\": {$id},  
												\"result\": {    
													\"content\": [
														{ 
															\"type\": \"text\", 
															\"text\": \"{$text}\" 
														}    
													],    
													\"isError\": false  
												}
											}";

											if(@is_debug) {
												ShowPayload(payload);
											};

											response->SetCodeTypeContent(200, "application/json", payload);
											return false;
										}
									};
								};
							}
						};
					};
				};
			};
		};

		response->SetCode(204);
		if(@is_debug) {
			">>>  Unknown Message <<<"->ErrorLine();
		};
		return false;
	}

	method : WriteResponse(message : JsonElement, id : Int, response : Web.HTTP.Server.Response, code : Int) ~ Nil {
		packet := JsonElement->New(JsonElement->JsonType->OBJECT);
		packet->Insert("jsonrpc", "2.0");
		packet->Insert("id", id);

		if(message <> Nil) {
			packet->Insert("result", message);
		}
		else {
			packet->Insert("result", JsonElement->New(JsonElement->JsonType->OBJECT));
		};

		if(@is_debug) {
			packet->ToFormattedString()->PrintLine();
		};

		response->SetCodeTypeContent(code, "application/json", packet->ToString());
	}

	function : ShowPayload(payload : String) ~ Nil {
		payload->ReplaceAll("\t", "  ")->PrintLine();
	}
} 

class CacheTimer from System.Time.Alarm {
	New(time : Int) {
		Parent(time, true);
	}

	method : public : Ring(param:System.Base) ~ Nil {
		RequestHandler->CheckCache();
	}
}