use Collection, Data.JSON, Web.HTTP, Web.HTTP.Server.MCP, Data.JSON.Scheme;

# run mcp inspector: npx @modelcontextprotocol/inspector
class TestMcp {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			config_builder := JsonBuilder->New();
			
			elem_json := config_builder->PushObject();
			elem_json->Insert("name", "MCP server");
			elem_json->Insert("instructions", "You are at test Objeck MCP server");
			elem_json->Insert("version", "0.0.1");
			elem_json->Insert("http_port", args[0]->ToInt());
			elem_json->Insert("http_session_timeout", 15);
			elem_json->Insert("debug", true);
			config_json := config_builder->Pop();

			config_json->ToString()->PrintLine();
			McpServer->Serve(config_json, TestHandler->New());
		}
		else {
			">>> Usage: JSON configuration file <<<"->PrintLine();
		};
	}
}

class TestHandler from McpRequestHandler {
	New() {
		Parent();
	}

	method : GetResourceDetails(uri : Url) ~ Vector<ResourceDetails> {
		resource_details := Vector->New()<ResourceDetails>;

		resource_details->AddBack(Web.HTTP.Server.MCP.ResourceDetails->New(
			Web.HTTP.Url->New("file:///c:/temp/file.txt"), 
			"application/octet-stream",
			"Hello from resources/read, check URI\\n\\tHello!"));

		return resource_details;
	}

	method : GetResourceItems() ~ Vector<ResourceItem> {
		resources := Vector->New()<ResourceItem>;

		resources->AddBack(Web.HTTP.Server.MCP.ResourceItem->New(
			Web.HTTP.Url->New("file:///c:/temp/file.txt"), 
			"project-files", 
			"Access files on the project site", 
			"application/octet-stream"));

		return resources;
	}

	method : GetTemplates() ~ Vector<ResourceTemplate> {
		resource_templates := Vector->New()<ResourceTemplate>;

		resource_templates->AddBack(Web.HTTP.Server.MCP.ResourceTemplate->New(
			Url->New("file:///c:/temp/file.txt"), 
			"project-files", 
			"Project Files", 
			"Access files on the project site", 
			"application/octet-stream"));

		return resource_templates;
	}

	method : GetTools() ~ Vector<Tool> {
		tools := Vector->New()<Tool>;

		func_params := Map->New()<String, ParameterType>;
		func_params->Insert("text", ParameterType->New(ParameterType->Type->STRING, false));
		func_params->Insert("number", ParameterType->New(ParameterType->Type->NUMBER, false));
		func := FunctionType->New("get_text_time", func_params, ["text"], "gets_text_time");

		tools->AddBack(Web.HTTP.Server.MCP.Tool->New(
			"echo", "echo-string", "Echo a string", func, Nil));

		return tools;
	}
}
