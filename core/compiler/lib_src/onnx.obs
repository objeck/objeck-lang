#~~
# TODO
# Copyright (c) 2025 Randy Hollines
# ONNX and OpenCV wrappers
~~#	

use System.API;

#~
Open Computer Vision (OpenCV) support for image rendering and compilation. (-lib onnx)
~#
bundle API.OpenCV {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_onnx");
			};

			return @lib_proxy;
		}
	}

	#~
	Image manipulation routines
	~#
	class Image {
		#~
		Image type
		~#
		enum Format := 64 {
			JPEG,
			PNG,
			WEBP,
			GIF
		}

		#~
		Image format conversion
		@param input_image image bytes
		@param output_format image output format
		@return bytes for converted image
		~#
		function : Convert(input_image : Byte[], output_format : Image->Format) ~ Byte[] {
			array_args := Base->New[3];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := ByteArrayRef->New(input_image);
			array_args[2] := IntRef->New(output_format->As(Int));

			Proxy->GetDllProxy()->CallFunction("opencv_convert_image", array_args);
			
			holder := array_args[0]->As(ByteArrayRef);
			return holder->Get();
		}
	}
}

#~
Open Neural Network Exchange support (ONNX) for generative AI and large language models (-lib onnx)
~#
bundle API.Onnx {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_onnx");
			};

			return @lib_proxy;
		}
	}

	#~
	ONNX cross-platform inference engine  
	~#
	class Runtime {
		#~
		Image preprocessing algorithms
		~#
		enum ImagePreprocessor := 128 {
			RESNET,
			YOLO,
			OTHER
		}

		#~
		Run model on an image
		@param image image bytes
		@param height image height
		@param width image width
		@param model inference model
		@param preprocessor image preprocessor
		@return inference, vector array and shape array 
		~#
		function : ImageInference(image : Byte[], height : Int, width : Int, model : String, preprocessor : API.Onnx.Runtime->ImagePreprocessor) ~ API.Onnx.ImageResult {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := ByteArrayRef->New(image);
			array_args[2] := IntRef->New(height);
			array_args[3] := IntRef->New(width);
			array_args[4] := model;
			array_args[5] := IntRef->New(preprocessor->As(Int));

			Proxy->GetDllProxy()->CallFunction("onnx_process_image", array_args);
			
			return array_args[0]->As(API.Onnx.ImageResult);
		}

		#~
		Gets a list of providers
		@return list of providers
		~#
		function : GetProviders() ~ String[] {
			array_args := Base->New[1];
			array_args[0] := StringArrayRef->New();
			
			Proxy->GetDllProxy()->CallFunction("onnx_get_provider_names", array_args);
			
			holder := array_args[0]->As(StringArrayRef);
			return holder->Get();
		}
	}

	#~
	Inference results, consisting of vector float array and an integer shape array  
	~#
	class ImageResult {
		@output : Float[];
		@shape : Int[];
		@dims : Int[];

		New : private () {}

		#~
		Gets the output results
		@return output results
		~#
		method : public : GetOutput() ~ Float[] {
			return @output;
		}

		#~
		Gets the output shape
		@return output shape
		~#
		method : public : GetShape() ~ Int[] {
			return @shape;
		}

		#~
		Gets the image dimensions
		@return image dimensions
		~#
		method : public : GetDimensions() ~ Int[] {
			return @dims;
		}

		#~
		Gets the output shape
		@return output shape
		~#
		method : public : ToString() ~ String {
			buffer := "output-size=";

			if(@output = Nil) {
				buffer += "0, shape-size=";
			}
			else {
				output_size := @output->Size();
				buffer += "{$output_size}, shape-size=";
			};

			if(@shape = Nil) {
				buffer += "0, image-dims=";
			}
			else {
				shape_size := @shape->Size();
				buffer += "{$shape_size}, image-dims=";
			};

			if(@dims = Nil) {
				buffer += "0x0";
			}
			else {
				width := @dims[0];
				height := @dims[1];
				buffer += "{$width}x{$height}";
			};

			return buffer;
		}
	}
}