use Collection;
use System.API;

#~
Support for basic code diagnostics (-lib diags)
~#
bundle System.Diagnostics {
	class : private: Proxy {
		@lib_proxy : static : DllProxy;

		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_diags");
			};

			return @lib_proxy;
		}
	}

	#~
	Parsers source for analysis
	~#
	class Analyzer {
		#~
		Parsers source file for analysis
		@param src_file file to parse
		@return object instance used for analysis
		~#
		function : ParseFile(src_file : String) ~ Analysis {
			array_args := Base->New[5];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New();
			array_args[2] := src_file;
			array_args[3] := IntRef->New();
			array_args[4] := IntRef->New();
			Proxy->GetDllProxy()->CallFunction("diag_parse_file", array_args);
			
			program_handle := array_args[0]->As(IntRef);
			table_handle := array_args[3]->As(IntRef);
			is_parsed := array_args[1]->As(IntRef);
			has_uses := array_args[4]->As(IntRef);

			return Analysis->New(program_handle->Get(), table_handle->Get(), is_parsed->Get() = 1 ? true : false, has_uses->Get() = 1 ? true : false);
		}

		#~
		Parsers text for analysis
		@param src_strs named text to parse, name/content
		@return object instance used for analysis
		~#
		function : ParseText(src_strs : String[,]) ~ Analysis {
			dims := src_strs->Size();
			size := dims[0];

			names := String->New[size]; 
			texts := String->New[size];

			for(i := 0; i < size; i += 1;) {				
				name := src_strs[i,0];
				text := src_strs[i,1];
				if(name = Nil | text = Nil) {
					return Nil;
				};
				
				names[i] := name;
				text += "\r\n";
				texts[i] := text;
			};

			array_args := Base->New[6];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New();
			array_args[2] := StringArrayRef->New(names);
			array_args[3] := StringArrayRef->New(texts);
			array_args[4] := IntRef->New();
			array_args[5] := IntRef->New();
			Proxy->GetDllProxy()->CallFunction("diag_parse_text", array_args);
			
			program_handle := array_args[0]->As(IntRef);
			table_handle := array_args[4]->As(IntRef);
			is_parsed := array_args[1]->As(IntRef);
			has_uses := array_args[5]->As(IntRef);

			return Analysis->New(program_handle->Get(), table_handle->Get(), is_parsed->Get() = 1 ? true : false, has_uses->Get() = 1 ? true : false);
		}
	}

	#~
	Analysis results
	~#
	class Analysis {
		@progam_handle : Int;
		@is_parsed : Bool;
		@symbols_result : Result;
		@diagnostics_results : Result[];
		@references_results : Result[];
		@rename_results : Result[];
		@table_handle : Int;
		@has_uses : Bool;

		New(progam_handle : Int, table_handle : Int, is_parsed : Bool, has_uses : Bool) {
			Parent();
			@progam_handle := progam_handle;
			@table_handle := table_handle;
			@is_parsed := is_parsed;
			@has_uses := has_uses;
		}

		#~
		Check to see if source was parsed
		@return true if parsed, false otherwise
		~#
		method : public : IsParsed() ~ Bool {
			return @is_parsed;
		}

		#~
		Check to see if user 'use' statement are present
		@return true if user 'use' statement are present, false otherwise
		~#
		method : public : HasUses() ~ Bool {
			return @has_uses;
		}

		#~
		Get source code analysis symbols
		@param uri file uri
		@param sys_path system library path
		@return analysis symbols
		~#
		method : public : GetSymbols(uri : String, sys_path : String) ~ Result {
			if(@symbols_result = Nil) {
				array_args := Base->New[3];
				array_args[0] := @self;
				array_args[1] := uri;
				array_args[2] := sys_path;
				Proxy->GetDllProxy()->CallFunction("diag_get_symbols", array_args);
			};
			
			return @symbols_result;
		}

		#~
		Get parse and analysis errors
		@param was_analyzed set true if code was successfully analyzed, false otherwise
		@param uri file uri
		@param sys_path system library path
		@return analysis errors, Nil of no errors
		~#
		method : public : GetDiagnostics(was_analyzed : BoolRef, uri : String, sys_path : String) ~ Result[] {
			if(@diagnostics_results = Nil) {
				array_args := Base->New[4];
				array_args[0] := @self;
				array_args[1] := uri;
				array_args[2] := sys_path;
				array_args[3] := was_analyzed;
				Proxy->GetDllProxy()->CallFunction("diag_get_diagnosis", array_args);
			};

			return @diagnostics_results;
		}
		
		#~
		Get references specified symbol
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param sys_path system library path
		@return symbol references, Nil of none found
		~#
		method : public : FindReferences(uri : String, line : Int, pos : Int, sys_path : String) ~ Result[] {
			array_args := Base->New[5];
			array_args[0] := @self;
			array_args[1] := uri;
			array_args[2] := IntRef->New(line);
			array_args[3] := IntRef->New(pos);
			array_args[4] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_find_references", array_args);
			
			return @references_results;
		}

		#~
		Renames a variable or method/function
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param sys_path system library path
		@return symbol references, Nil of none found
		~#
		method : public : CodeRename(uri : String, line : Int, pos : Int, sys_path : String) ~ Result[] {
			array_args := Base->New[5];
			array_args[0] := @self;
			array_args[1] := uri;
			array_args[2] := IntRef->New(line);
			array_args[3] := IntRef->New(pos);
			array_args[4] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_code_rename", array_args);
			
			return @rename_results;
		}

		#~
		Get signature definitions
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param var_str variable string name
		@param mthd_str method string name
		@param sys_path system library path
		@return symbol references, Nil of none found
		~#
		method : public : SignatureHelp(uri : String, line : Int, pos : Int, var_str : String, mthd_str : String, sys_path : String) ~ Result {
			array_args := Base->New[8];
			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := uri;
			array_args[3] := IntRef->New(line);
			array_args[4] := IntRef->New(pos);
			array_args[5] := var_str;
			array_args[6] := mthd_str;
			array_args[7] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_signature_help", array_args);
			
			return array_args[0]->As(Result);
		}

		#~
		Get signature definitions
		@param uri file uri
		@param start_range_line line of symbol
		@param start_range_char character position of symbol
		@param var_name variable string name
		@return symbol references, Nil of none found
		~#
		method : public : CodeAction(uri : String, start_range_line : Int, start_range_char : Int, var_name : String)  ~ Result {
			array_args := Base->New[6];
			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := uri;
			array_args[3] := IntRef->New(start_range_line);
			array_args[4] := IntRef->New(start_range_char);
			array_args[5] := var_name;
			Proxy->GetDllProxy()->CallFunction("diag_code_action", array_args);
			
			return array_args[0]->As(Result);
		}

		#~
		Gets hover signatures
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param var_str variable string name
		@param mthd_str method string name
		@param sys_path system library path
		@return hover references, Nil of none found
		~#
		method : public : Hover(uri : String, line : Int, pos : Int, var_str : String, mthd_str : String, sys_path : String) ~ Result {
			array_args := Base->New[8];
			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := uri;
			array_args[3] := IntRef->New(line);
			array_args[4] := IntRef->New(pos);
			array_args[5] := var_str;
			array_args[6] := mthd_str;
			array_args[7] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_hover", array_args);
			
			return array_args[0]->As(Result);
		}
		
		#~	
		Get completion options
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param var_str variable string name
		@param mthd_str method string name
		@param sys_path system library path
		@return symbol references, Nil of none found
		~#
		method : public : Completion(uri : String, line : Int, pos : Int, var_str : String, mthd_str : String, sys_path : String) ~ Result {
			array_args := Base->New[8];
			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := uri;
			array_args[3] := IntRef->New(line);
			array_args[4] := IntRef->New(pos);
			array_args[5] := var_str;
			array_args[6] := mthd_str;
			array_args[7] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_completion_help", array_args);
			
			return array_args[0]->As(Result);
		}

		#~
		Finds symbol deceleration
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param sys_path system library path
		@return symbol deceleration, Nil of none found
		~#
		method : public : FindDeclaration(uri : String, line : Int, pos : Int, sys_path : String) ~ Result {
			array_args := Base->New[6];
			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := uri;
			array_args[3] := IntRef->New(line);
			array_args[4] := IntRef->New(pos);
			array_args[5] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_find_declaration", array_args);
			
			return array_args[0]->As(Result);
		}

		#~
		Finds symbol definition
		@param uri file uri
		@param line line of symbol
		@param pos character position of symbol
		@param sys_path system library path
		@return symbol deceleration, Nil of none found
		~#
		method : public : FindDefinition(uri : String, line : Int, pos : Int, sys_path : String) ~ Result {
			array_args := Base->New[6];
			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := uri;
			array_args[3] := IntRef->New(line);
			array_args[4] := IntRef->New(pos);
			array_args[5] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_find_definition", array_args);
			
			return array_args[0]->As(Result);
		}
		
		#~
		Release native resources, required for clean up.
		~#
		method : public : Release() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntRef->New(@progam_handle);
			Proxy->GetDllProxy()->CallFunction("diag_tree_release", array_args);
		}
	}

	#~
	Collection analysis result
	~#
	class Result {
		#~
		Analysis type
		@class Result
		~#
		consts Kind {
			ERROR := 101,
			WARN := 102,
			INFO := 103,

			NAMESPACE := 203,
			CLASS := 205,
			ENUM := 210,
			METHOD := 206,
			VARIABLE  := 213,
			
			UNKN := 0
		}

		@name : String;
		@code : Int;
		@kind : Result->Kind;
		@results : Result[];
		@desc : String;
		@start_line : Int;
		@start_pos : Int;
		@end_line : Int;
		@end_pos : Int;

		New(handle : Int) {
		}

		#~
		Get start line
		@return start line
		~#
		method : public : GetStartLine() ~ Int {
			return @start_line;
		}

		#~
		Get start position
		@return start position
		~#
		method : public : GetStartPosition() ~ Int {
			return @start_pos;
		}

		#~
		Get end line
		@return end line
		~#
		method : public : GetEndLine() ~ Int {
			return @end_line;
		}

		#~
		Get end position
		@return end position
		~#
		method : public : GetEndPosition() ~ Int {
			return @end_pos;
		}

		#~
		Get result kind
		@return result kind
		~#
		method : public : GetKind() ~ Result->Kind {
			return @kind;
		}

		#~
		Get result name
		@return result name
		~#
		method : public : GetName() ~ String {
			return @name;
		}

		#~
		Get result description
		@return result description
		~#
		method : public : GetDescription() ~ String {
			return @desc;
		}

		#~
		Gets the code
		@return code
		~#
		method : public : GetCode() ~ Int {
			return @code;
		}

		#~
		Get child results
		@return child results
		~#
		method : public : GetResults() ~ Result[] {
			return @results;
		}

		#~
		Result to string
		@return string representation
		~#
		method : public : ToString() ~ String {
			kind := @kind->As(Int);
			return "name='{$@name}', desc='{$@desc}', kind={$kind}, start_line={$@start_line}, start_pos={$@start_pos}, end_line={$@end_line}, end_pos={$@end_pos}";
		}
	}
}