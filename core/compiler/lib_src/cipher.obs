#~~
# Objeck encryption routines 
# Copyright (c) 2023 Randy Hollines
~~#	

use System.API;

#~
Provides encryption and encoding functionality (-lib cipher)
~#
bundle Cipher {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_openssl");
			};

			return @lib_proxy;
		}
	}
	
	#~
	Support for one-way hashes
	~#
	class Hash {
		#~
		Hash input using SHA-256
		@param stream_in bytes to hashed
		@return hashed bytes
		~#
		function : SHA256(stream_in : Byte[]) ~ Byte[] {
			if(stream_in <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayRef->New(stream_in);				
				Proxy->GetDllProxy()->CallFunction("openssl_hash_sha256", array_args);
				
				holder := array_args[0]->As(ByteArrayRef);
				return holder->Get();
			};
			
			return Nil;
		}

		#~
		Hash input using SHA-512
		@param stream_in bytes to hashed
		@return hashed bytes
		~#
		function : SHA512(stream_in : Byte[]) ~ Byte[] {
			if(stream_in <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayRef->New(stream_in);				
				Proxy->GetDllProxy()->CallFunction("openssl_hash_sha512", array_args);
				
				holder := array_args[0]->As(ByteArrayRef);
				return holder->Get();
			};
			
			return Nil;
		}
		
		#~
		Hash input using MD5
		@param stream_in bytes to hashed
		@return hashed bytes
		~#
		function : MD5(stream_in : Byte[]) ~ Byte[] {
			if(stream_in <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayRef->New(stream_in);				
				Proxy->GetDllProxy()->CallFunction("openssl_hash_md5", array_args);
				
				holder := array_args[0]->As(ByteArrayRef);
				return holder->Get();
			};
			
			return Nil;
		}
		
		#~
		Hash input using RIPEMD digest
		@param stream_in bytes to hashed
		@return hashed bytes
		~#
		function : RIPEMD160(stream_in : Byte[]) ~ Byte[] {
			if(stream_in <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayRef->New(stream_in);

				Proxy->GetDllProxy()->CallFunction("openssl_hash_ripemd160", array_args);
				
				holder := array_args[0]->As(ByteArrayRef);
				return holder->Get();
			};
			
			return Nil;
		}
	}
	
	#~
	Encrypts data
	~#
	class Encrypt {
		#~
		Encrypt input using AES-256
		@param key encryption key
		@param stream_in bytes to encrypted
		@return encrypted bytes
		~#
		function : AES256(key : Byte[], stream_in : Byte[]) ~ Byte[] {
			if(key <> Nil & stream_in <> Nil) {
				array_args := Base->New[3];
				array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayRef->New(key);
				array_args[2] := ByteArrayRef->New(stream_in);

				Proxy->GetDllProxy()->CallFunction("openssl_encrypt_aes256", array_args);
				
				holder := array_args[0]->As(ByteArrayRef);
				return holder->Get();
			};
			
			return Nil;
		}

		#~
		Encode input using Base64
		@param input bytes to encode
		@return encoded bytes
		~#
		function : native : Base64(input : Byte[]) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := ByteArrayRef->New(input);

			Proxy->GetDllProxy()->CallFunction("openssl_encrypt_base64", array_args);

			return array_args[0]->As(String);
		}
	}
	
	#~
	Decrypts data
	~#
	class Decrypt {
		#~
		Decrypts input using AES-256
		@param key encryption key
		@param stream_in bytes to decrypted
		@return decrypted bytes
		~#
		function : AES256(key : Byte[], stream_in : Byte[]) ~ Byte[] {
			if(key <> Nil & stream_in <> Nil) {
				array_args := Base->New[3];
				array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayRef->New(key);
				array_args[2] := ByteArrayRef->New(stream_in);	

				Proxy->GetDllProxy()->CallFunction("openssl_decrypt_aes256", array_args);
				
				holder := array_args[0]->As(ByteArrayRef);
				return holder->Get();
			};
			
			return Nil;
		}

		#~
		Decrypts input using Base64
		@param input input bytes to decrypted
		@return decrypted bytes
		~#
		function : native : Base64(input : String) ~ Byte[] {
			array_args := Base->New[2];
			array_args[0] := ByteArrayRef->New(Nil->As(Byte[]));
			array_args[1] := input;

			Proxy->GetDllProxy()->CallFunction("openssl_decrypt_base64", array_args);

			holder := array_args[0]->As(ByteArrayRef);
			return holder->Get();
		}
	}
}

