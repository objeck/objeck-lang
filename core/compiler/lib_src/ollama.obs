#~~
Copyright (c) 2024 Randy Hollines
~~#	

use Web.HTTP, Collection, Data.JSON, Data.JSON.Scheme, System.IO.Filesystem;

#~
Ollama client APIs (-lib ollama)
~#
bundle API.Ollama {
	#~
	Ollama enabled endpoint class
	~#
	class EndPoint {
		@last_error : static : String;

		function : SetLastError(last_error : String) ~ Nil {
			@last_error := last_error;
		}

		#~
		Get the last error
		@return last error
		~#
		function : GetLastError() ~ String {
			return @last_error;
		}
	}

	#~
	Ollama model interactions
	
```
prompt := "What number is this?";
file := System.IO.Filesystem.File->New("../gemini/thirteen.png");
Completion->Generate("llava", prompt, file)->PrintLine();
```
	~#
	class Completion from EndPoint {
		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@return query response
		~#
		function : Generate(model : String, prompt : String) ~ String {
			return JsonElement->Decode(Generate(model, prompt, Nil));
		}

		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@param format output format
		@return query response
		~#
		function : Generate(model : String, prompt : String, format : String) ~ String {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("prompt", JsonElement->Encode(prompt));
			if(format <> Nil) {
				query_json->Insert("format", format);
			};
			query_json->Insert("stream", false);

			url := Url->New("http://localhost:11434/api/generate");
			post_request := query_json->ToString();
			
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# post_response_str->PrintLine();
				# "---"->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
						response_json := post_response_json->Get("response")
						if(response_json <> Nil) {
							return JsonElement->Decode(response_json->GetString());
						};
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};

				return Nil;
		}

		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@param image image file
		@return query response
		~#
		function : Generate(model : String, prompt : String, image : File) ~ String {
			images := File->New[1];
			images[0] := image;

			return Generate(model, prompt, images);
		}

		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@param images image images
		@return query response
		~#
		function : Generate(model : String, prompt : String, images : File[]) ~ String {
			images_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			
			each(file in images) {
				if(<>file->Exists()) {
					return Nil;
				};

				# file->GetFullName()->PrintLine();

				file_data := System.IO.Filesystem.FileReader->ReadBinaryFile(file->GetFullName());
				if(file_data = Nil) {
					return Nil;
				};

				images_json->Add(Cipher.Encrypt->Base64(file_data));
			};

			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("prompt", JsonElement->Encode(prompt));
			query_json->Insert("images", images_json);
			query_json->Insert("stream", false);

			url := Url->New("http://localhost:11434/api/generate");
			post_request := query_json->ToString();
			
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# post_response_str->PrintLine();
				# "---"->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					response_json := post_response_json->Get("response")
					if(response_json <> Nil) {
						return JsonElement->Decode(response_json->GetString());
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				}
			};

			return Nil;
		}
	}

	#~
	Ollama chat client
	
```
chat := Chat->New("llama3");
chat->Send("How many people like in San Pablo, CA?")->PrintLine();
chat->Send("How of the population identify as Latino??")->PrintLine();
chat->Send("Thanks, what are the major landmarks?")->PrintLine();
chat->Send("Goodbye?")->PrintLine();
```
	~#
	class Chat from EndPoint {
		@model : String;
		@messages_json : JsonElement;
		@url : Url;

		#~
		Constructor
		@param model model name (i.e. llama3, llava)
		~#
		New(model : String) {
			Parent();

			@messages_json := JsonElement->New(JsonElement->JsonType->ARRAY);

			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("stream", false);

			@url := Url->New("http://localhost:11434/api/chat");
			# @url->ToString()->PrintLine();
			
			post_request := query_json->ToString();
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(@url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
				# "---"->PrintLine();
				# post_response_str->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					@model := post_response_json->Get("model")->GetString();
				};
			};
		}

		#~
		Chat response from the model given an input
		@param message chat message
		@return chat response
		~#
		method : public : Send(message : String) ~ String {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);

			message_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			message_json->Insert("role", "user");
			message_json->Insert("content", JsonElement->Encode(message));
			@messages_json->Add(message_json);

			query_json->Insert("model", @model);
			query_json->Insert("messages", @messages_json);
			query_json->Insert("stream", false);

			post_request := query_json->ToString();

			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(@url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# "---"->PrintLine();
				# post_response_str->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					message_json := post_response_json->Get("message");
					if(message_json <> Nil) {
						@messages_json->Add(message_json);
						return JsonElement->Decode(JsonElement->Decode(message_json->Get("content")->GetString()));
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};
			};

			return Nil;
		}

		#~
		Chat response from the model given an input
		@param message chat message
		@param image image file
		@return chat response
		~#
		method : public : Send(message : String, image : File) ~ String {
			images := File->New[1];
			images[0] := image;

			return Send(message, images);
		}

		#~
		Chat response from the model given an input
		@param message chat query
		@param images image files
		@return chat response
		~#
		method : public : Send(message : String, images : File[]) ~ String {
			images_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			
			each(file in images) {
				if(<>file->Exists()) {
					return Nil;
				};

				# file->GetFullName()->PrintLine();

				file_data := System.IO.Filesystem.FileReader->ReadBinaryFile(file->GetFullName());
				if(file_data = Nil) {
					return Nil;
				};

				images_json->Add(Cipher.Encrypt->Base64(file_data));
			};

			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);

			message_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			message_json->Insert("role", "user");
			message_json->Insert("content", message);
			@messages_json->Add(message_json);

			query_json->Insert("model", @model);
			query_json->Insert("messages", @messages_json);
			query_json->Insert("images", images_json);
			query_json->Insert("stream", false);

			post_request := query_json->ToString();
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(@url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# "---"->PrintLine();
				# post_response_str->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					message_json := post_response_json->Get("message")
					if(message_json <> Nil) {
						@messages_json->Add(message_json);
						return JsonElement->Decode(message_json->Get("content")->GetString());
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};
			};

			return Nil;
		}
	}

	#~
	Ollama detailed model data
	~#
	class ModelDetails {
		@parent_model : String;
		@format : String;
		@family : String;
		@parameter_size : String;
		@quantization_level : String;

		New(details_json : JsonElement) {
			@parent_model := details_json->Get("parent_model")->GetString();
			@format := details_json->Get("format")->GetString();
			@family := details_json->Get("family")->GetString();
			@parameter_size := details_json->Get("parameter_size")->GetString();
			@quantization_level := details_json->Get("quantization_level")->GetString();
		}

		#~
		String representation of the instance
		@return string representation of the instance
		~#
		method : public : ToString() ~ String {
			buffer := "parent_model='";
			buffer->Append(@parent_model);

			buffer->Append("', format='");
			buffer->Append(@format);

			buffer->Append("', family='");
			buffer->Append(@family);

			buffer->Append("', parameter_size='");
			buffer->Append(@parameter_size);

			buffer->Append("', quantization_level='");
			buffer->Append(@quantization_level);

			buffer->Append('\'');
			return buffer;
		}

		# TOO: getters
	}

	#~
	Ollama model information
	~#
	class ModelInfo {
		@modelfile : String;
		@parameters : String;
		@system : String;
		@template : String;
		@license : String;

		New(model_json : JsonElement) {
			@modelfile := model_json->Get("modelfile")->GetString();
			@parameters := model_json->Get("parameters")->GetString();
			@template := model_json->Get("template")->GetString();
			@license := model_json->Get("license")->GetString();

			system_json := model_json->Get("system");
			if(system_json <> Nil) {
				@system := system_json->GetString();
			};
		}

		#~
		String representation of the instance
		@return string representation of the instance
		~#
		method : public : ToString() ~ String {
			buffer := "=> modelfile='";
			buffer->Append(@modelfile->Size());

			buffer->Append("'\n\t=> parameters='");
			buffer->Append(@parameters);

			buffer->Append("'\n\t=> template='");
			buffer->Append(@template);

			buffer->Append("'\n\t=> license='");
			buffer->Append(@license->Size());

			if(@system <> Nil) {
				buffer->Append("'\n\t=> system='");
				buffer->Append(@system);
			};

			buffer->Append('\'');
			return buffer;
		}

		#~
		Get the model file
		@return model file
		~#
		method : public : GetModelFile() ~ String {
			return @modelfile;
		}

		#~
		Get the parameters
		@return parameters
		~#
		method : public : GetParameters() ~ String {
			return @parameters;
		}
		
		#~
		Get the template
		@return template
		~#
		method : public : GetTemplate() ~ String {
			return @template;
		}

		#~
		Get the license
		@return license
		~#
		method : public : GetLicense() ~ String {
			return @license;
		}

		#~
		Get the system
		@return system
		~#
		method : public : GetSystem() ~ String {
			return @system;
		}
	}

	#~
	Ollama pulled model data
	~#
	class ModelPulled {
		@name : String;
		@model : String;
		@modified_at_str : String;
		@size : Int;
		@digest : String;

		New(model_json : JsonElement) {
			@name := model_json->Get("name")->GetString();
			@model := model_json->Get("model")->GetString();
			@modified_at_str := model_json->Get("modified_at")->GetString();
			@size := model_json->Get("size")->GetInt();
			@digest := model_json->Get("digest")->GetString();
		}

		#~
		String representation of the instance
		@return string representation of the instance
		~#
		method : public : ToString() ~ String {
			buffer := "name='";
			buffer->Append(@name);

			buffer->Append("', model='");
			buffer->Append(@model);

			buffer->Append("', modified_at_str='");
			buffer->Append(@modified_at_str);

			buffer->Append("', size='");
			buffer->Append(@size);

			buffer->Append("', digest='");
			buffer->Append(@digest);

			buffer->Append('\'');
			return buffer;
		}

		#~
		Get the name
		@return name
		~#
		method : public : GetName() ~ String {
			return @name;
		}

		#~
		Get the model
		@return model
		~#
		method : public : GetModel() ~ String {
			return @model;
		}

		#~
		Get modified time
		@return modified time
		~#
		method : public : GetModifiedTime() ~ System.Time.Date {
			return System.Time.DateUtility->Parse(@modified_at_str, "yyyy-MM-ddThh:mm:ss", false);
		}

		#~
		Get the model size
		@return model size
		~#
		method : public : GetSize() ~ Int {
			return @size;
		}

		#~
		Get the model digest
		@return model digest
		~#
		method : public : GetDigest() ~ String {
			return @digest;
		}
	} 

	#~
	Ollama model operation
	
```
chat := Chat->New("llama3");
chat->Send("How many people like in San Pablo, CA?")->PrintLine();
chat->Send("How of the population identify as Latino??")->PrintLine();
chat->Send("Thanks, what are the major landmarks?")->PrintLine();
chat->Send("Goodbye?")->PrintLine();
```
	~#
	class Model from EndPoint {
		@model_info : ModelInfo;
		@model_pulled : ModelPulled;
		@model_details : ModelDetails;

		New(model_json : JsonElement) {
			Parent();

			if(model_json->Has("modelfile")) {
				@model_info := ModelInfo->New(model_json);
			}
			else {
				@model_pulled := ModelPulled->New(model_json);
			};

			details_json := model_json->Get("details");
			if(details_json <> Nil) {
				@model_details := ModelDetails->New(details_json);
			};
		}

		#~
		Get the model details
		@return model details
		~#
		method : public : GetDetails() ~ ModelDetails {
			return @model_details;
		}

		#~
		Get the model pulled
		@return model pulled
		~#
		method : public : GetPulled() ~ ModelPulled {
			return @model_pulled;
		}

		#~
		String representation of the instance
		@return string representation of the instance
		~#
		method : public : ToString() ~ String {
			buffer := "";

			if(@model_info <> Nil ) {
				buffer->Append("info: [\n\t");
				buffer->Append(@model_info->ToString());
				buffer->Append("]");
			};

			if(@model_pulled <> Nil ) {
				buffer->Append("created: [\n\t");
				buffer->Append(@model_pulled->ToString());
				buffer->Append("]");
			};

			if(@model_details <> Nil) {
				buffer->Append("\ndetails: [\n\t");
				buffer->Append(@model_details->ToString());
				buffer->Append("]");
			};

			return buffer;
		}

		#~
		List the models available 
		@return list of models available
		~#
		function : List() ~ Vector<Model> {
			url := Url->New("http://localhost:11434/api/tags");

			get_response := Web.HTTP.HttpClient->QuickGet(url, "application/json");
			if(get_response <> Nil) {
				get_response_str := get_response->GetContent()->ToString();
				# "---"->PrintLine();
				# get_response_str->PrintLine();
	
				get_response_json := JsonParser->TextToElement(get_response_str);
				if(get_response_json <> Nil) {
					response_json := get_response_json->Get("models")
					if(response_json <> Nil) {
						models := Vector->New()<Model>;

						each(model_json in response_json) {
							# "==="->PrintLine();
							# model_json->ToString()->PrintLine();						
							# "==="->PrintLine();
							models->AddBack(Model->New(model_json));
						};

						return models;
					}
					else if(get_response_json->Has("error")) {
						SetLastError(get_response_json->Get("error")->ToString());
					};
				};

			};

			return Nil;
		}

		#~
		Download a model from the ollama library
		@param name name of the model to pull
		@return true if successful, false otherwise
		~#
		function : Pull(name : String) ~ Bool {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("name", name);
			query_json->Insert("stream", false);

			url := Url->New("http://localhost:11434/api/pull");
			post_request := query_json->ToString();
	
			# post_request->PrintLine();
	
			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
				# "---"->PrintLine();
				# post_response_str->PrintLine();
	
				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					status_json := post_response_json->Get("status")
					if(status_json <> Nil) {
						return status_json->GetString()->Equals("success");
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};

			};

			return false;
		}

		#~
		Show information about a model
		@param name name of the model to show
		@return model
		~#
		function : Show(name : String) ~ Model {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("name", name);
			query_json->Insert("stream", false);

			url := Url->New("http://localhost:11434/api/show");
			post_request := query_json->ToString();
	
			# post_request->PrintLine();
	
			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
				# "---"->PrintLine();
				# post_response_str->Size()->PrintLine();
	
				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					}
					else {
						# "==="->PrintLine();
						# post_response_json->ToString()->PrintLine();						
						# "==="->PrintLine();

						return Model->New(post_response_json);
					};
				};

			};

			return Nil;
		}

		#~
		Delete a model and its data.
		@param name name of the model to delete
		@return true if successful, false otherwise
		~#
		function : Delete(name : String) ~ Bool {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("name", name);

			url := Url->New("http://localhost:11434/api/delete");
			post_request := query_json->ToString();
			# post_request->PrintLine();
				
			delete_response := Web.HTTP.HttpClient->QuickDelete(url, post_request->ToByteArray(), "application/json");
			if(delete_response <> Nil) {
				return delete_response->GetCode() = 200;
			};

			return false;
		}

		#~
		Copy a model
		@param src source name of the model to copy
		@param dest destination name of the model to copy
		@return true if successful, false otherwise 
		~#
		function : Copy(src : String, dest : String) ~ Bool {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("source", src);
			query_json->Insert("destination", dest);

			url := Url->New("http://localhost:11434/api/copy");
			post_request := query_json->ToString();
			# post_request->PrintLine();
				
			delete_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(delete_response <> Nil) {
				# delete_response->GetCode()->PrintLine();				
				return delete_response->GetCode() = 200;
			};

			return false;
		}

		#~
		Generate embeddings from a model
		@param model name of model to generate embeddings from
		@param prompt text to generate embeddings for
		@return true if successful, false otherwise
		~#
		function : Embeddings(model : String, prompt  : String) ~ Float[] {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("prompt", JsonElement->Encode(prompt));

			url := Url->New("http://localhost:11434/api/embeddings");
			post_request := query_json->ToString();
	
			# post_request->Size()->PrintLine();
	
			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
				# "---"->PrintLine();
				# post_response_str->Size()->PrintLine();
	
				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					embeddings_json := post_response_json->Get("embedding")
					if(embeddings_json <> Nil) {
						embeddings := Float->New[embeddings_json->Size()];

						each(i : embeddings_json) {
							embedding_json := embeddings_json->Get(i);
							embeddings[i] := embedding_json->GetFloat();
						};

						return embeddings;
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};

			};

			return Nil;
		}

		#~
		Create a model from a Modelfile description
		@param name name of the model to create
		@param modelfile contents of the Modelfile
		@return true if successful, false otherwise
		~#
		function : Create(name : String, modelfile  : String) ~ Bool {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("name", name);
			query_json->Insert("modelfile", JsonElement->Encode(modelfile));
			query_json->Insert("stream", false);

			url := Url->New("http://localhost:11434/api/create");
			post_request := query_json->ToString();
	
			# post_request->PrintLine();
	
			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
				# "---"->PrintLine();
				# post_response_str->PrintLine();
	
				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					status_json := post_response_json->Get("status")
					if(status_json <> Nil) {
						return status_json->GetString()->Equals("success");
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};

			};

			return false;
		}
	}
}
