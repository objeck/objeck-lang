#~~
Copyright (c) 2024 Randy Hollines
~~#

use System.IO.Net, Collection;

#~
Web client support (-lib net)
~#
bundle Web.HTTP {
	#~
	URL parser, encoder and decoder
	~#
	class Url implements Compare {
		@parsed : Bool;
		@url : String;
		@scheme : String;
		@host : String;
		@port : Int;
		@frag : String;
		@query : String;
		@query_params : Map<String, String>;
		@path : String;

		#~
		Parsed URL into components
		@param url raw URL
		~#
		New(url : String) {
			@url := url;
			@port := -1;
			@parsed := ParseUrl(url);
		}

		#~
		Compares two objects
		@param rhs compare object
		@return 0 if equal, -1 if right-hand side i greater, 1 if left-hand side is greater
		~#
		method : public : Compare(rhs : System.Compare) ~ Int {
			return @url->Compare(rhs);
		}

		#~
		Returns a hash ID for the given class
		@return hash ID
		~#
		method : public : HashID() ~ Int {
			return @url->HashID();
		}

		#~
		Gets the name/value query parameters
		@return query parameters, Nil if URL cannot be parsed
		~#
		method : public : GetQueryParameters() ~ Map<String, String> {
			if(@parsed & @query_params = Nil) {
				@query_params := Map->New()<String, String>;
				
				query_keys_values := @query->Split('&');
				if(query_keys_values->Size() > 0) {
					each(query_key_value in query_keys_values) {
						key_value := query_key_value->Split('=');
						if(key_value->Size() = 2) {
							@query_params->Insert(key_value[0], key_value[1])
						};
					};
				}
				else {
					key_value := @query->Split('=');
					if(key_value->Size() = 2) {
						@query_params->Insert(key_value[0], key_value[1])
					};
				};
			};
			
			return @query_params;
		}

		#~
		Determines if given URL has been parsed correctly
		@return true if parsed, false otherwise
		~#
		method : public : Parsed() ~ Bool {
			return @parsed;
		}

		#~
		Gets original URL
		@return original URL
		~#
		method : public : GetUrl() ~ String {
			return @url;
		}

		#~
		Gets scheme
		@return scheme, Nil if not present
		~#
		method : public : GetScheme() ~ String {
			if(@parsed & @scheme <> Nil) {
				return @scheme->Clone();
			};

			return Nil;
		}

		#~
		Gets host
		@return host, Nil if not present
		~#
		method : public : GetHost() ~ String {
			if(@parsed & @host <> Nil) {
				return @host->Clone();
			};

			return Nil;
		}

		#~
		Gets scheme
		@return scheme, Nil if not present
		~#
		method : public : GetQuery() ~ String {
			if(@parsed & @query <> Nil) {
				return @query->Clone();
			};

			return Nil;
		}
		
		#~
		Gets port
		@return port, -1 if not present
		~#
		method : public : GetPort() ~ Int {
			if(@parsed) {
				return @port;
			};

			return -1;
		}

		#~
		Gets fragment
		@return fragment, Nil if not present
		~#
		method : public : GetFragment() ~ String {
			if(@parsed & @frag <> Nil) {
				return @frag->Clone();
			};

			return Nil;
		}

		#~
		Gets path
		@return path, Nil if not present
		~#
		method : public : GetPath() ~ String {
			if(@parsed & @path <> Nil) {
				return @path->Clone();
			};

			return Nil;
		}

		method : ParseUrl(url : String) ~ Bool {
			# "-- url='{$url}' --"->PrintLine();
			scheme_index := url->Find(':');
			if(scheme_index < 0) {
				# "--- No URL scheme ---"->ErrorLine();
				return false;
			};
			@scheme := url->SubString(0, scheme_index);
			# "\t-- scheme='{$@scheme}' --"->PrintLine();

			scheme_index += 1;
			rest := url->SubString(scheme_index, url->Size() - scheme_index);
			# "\t-- rest='{$rest}' --"->PrintLine();

			if(rest->StartsWith("//")) {
				parts := rest->SubString(2, rest->Size() - 2)->Split("/");
				if(parts->Size() = 0) {
					ParsePart(rest->SubString(2, rest->Size() - 2), 0, false);
				}
				else {
					each(i : parts) {
						ParsePart(parts[i], i, i = parts->Size() - 1);
					};
				};
			}
			else {
				@path := rest;
			};

			return true;
		}

		method : ParsePart(part : String, index : Int, last : Bool) ~ Nil {
			# "\t-- part='{$part}' --"->PrintLine();

			# host and port
			if(index = 0) {
				if(part->StartsWith('[') | part->StartsWith('(')) {
					@host := part;
				}
				else {
					port_index := part->Find(':');
					if(port_index > -1) {
						@host := part->SubString(port_index);
						port_index += 1;
						port_str := part->SubString(port_index, part->Size() - port_index);
						@port := port_str->ToInt();
					}
					else {
						@host := part;
					};

					if(@host->EndsWith('/')) {
						@path := "/";
					};
				};
			}
			# path, query and fragment
			else {
				if(@path = Nil) {
					@path := "";
				};
				@path += '/';

				# query and fragment
				if(last) {
					sub_part : String;
					frag_index := part->Find('#');
					if(frag_index > -1) {
						sub_part := part->SubString(frag_index);
						# "\t-- sub_part='{$sub_part}' --"->PrintLine();							

						frag_index += 1;
						@frag := part->SubString(frag_index, part->Size() - frag_index);
					}
					else {
						sub_part := part;
					};

					query_index := sub_part->Find('?');
					if(query_index > -1) {
						# add to path
						if(query_index > 0)	{
							@path += sub_part->SubString(query_index);
						};
						query_index += 1;

						@query := sub_part->SubString(query_index, sub_part->Size() - query_index);
					}
					else {
						@path += sub_part;
					};
				}
				# path
				else {
					@path += part;
				};
			};
		}

		#~
		General encoding for HTML or XML strings
		@param str string to encode 
		@return encoded string 
		~#
		function : native : Encode(str : String) ~ String {
			buffer := String->New();
			each(i : str) {
				c := str->Get(i);
				select(c) {
					label ' ': {
						buffer->Append("%20");
					}

					label ';': {
						buffer->Append("%3B");
					}

					label '=': {
						buffer->Append("%3D");
					}

					label '$': {
						buffer->Append("%26");
					}

					label ',': {
						buffer->Append("%2C");
					}

					label '<': {
						buffer->Append("%3C");
					}

					label '>': {
						buffer->Append("%3E");
					}

					label '^': {
						buffer->Append("%5E");
					}

					label '`': {
						buffer->Append("%60");
					}

					label '\\': {
						buffer->Append("%5C");
					}

					label '[': {
						buffer->Append("%5B");
					}

					label ']': {
						buffer->Append("%5D");
					}

					label '{': {
						buffer->Append("%7B");
					}

					label '}': {
						buffer->Append("%7D");
					}

					label '|': {
						buffer->Append("%7C");
					}

					label '"': {
						buffer->Append("%22");
					}

					label ':': {
						buffer->Append("%3A");
					}

					label '/': {
						buffer->Append("%2F");
					}

					label '#': {
						buffer->Append("%23");
					}

					label '?': {
						buffer->Append("%3F");
					}

					label '&': {
						buffer->Append("%24");
					}

					label '@': {
						buffer->Append("%40");
					}

					label '%': {
						buffer->Append("%25");
					}

					label '+': {
						buffer->Append("%2B");
					}

					label '~': {
						buffer->Append("%7E");
					}

					other: {
						buffer->Append(c);
					}
				};
			};
			
			return buffer;
		}

		#~
		General decoding for HTML or XML strings		
		@param str encoded string
		@return decoded string
		~#
		function : native : Decode(str : String) ~ String {
			buffer := String->New();
			each(i : str) {
				c := str->Get(i);
				if(c = '%' & i + 2 < str->Size()) {
					value := "0x";
					value->Append(str->Get(i + 1));
					value->Append(str->Get(i + 2));
					buffer->Append(value->ToInt()->As(Char));
					i += 2;
				}
				else if(c = '+') {
					buffer->Append(' ');
				}
				else {
					buffer->Append(c);
				};
			};

			return buffer;
		}

		#~
		String representation of URL
		@return string representation of URL
		~#
		method : public : ToString() ~ String {
			buffer := "'{$@url}\n";

			if(@scheme <> Nil) {
				buffer += "\tscheme='{$@scheme}'\n";
			};

			if(@host <> Nil) {
				buffer += "\thost='{$@host}'\n";
			};

			if(@path <> Nil) {
				buffer += "\tpath='{$@path}'\n";
			};
			
			if(@port > -1) {
				buffer += "\tport='{$@port}'\n";
			};

			if(@query <> Nil) {
				buffer += "\tquery='{$@query}'\n";
			};
			
			if(@frag <> Nil) {
				buffer += "\tfragment='{$@frag}'\n";
			};
					
			return buffer;			
		}
	}

	class WebCommon {
		function : ParseAttribs(attrib_str : String) ~ Map<String, String> {
			attribs := Map->New()<String, String>;

			names_values := attrib_str->Split("; ");
			if(names_values->Size() > 0) {
				each(i : names_values) {
					names_value := names_values[i];					
					name_value_index := names_value->Find('=');
					if(name_value_index > 0) {						
						name := names_value->SubString(0, name_value_index);
						name_value_index += 1;
						value := names_value->SubString(name_value_index, names_value->Size() - name_value_index);
						attribs->Insert(name, value);
					}
					else {
						attribs->Insert(names_value, Nil);
					};
				};
			}
			else {
				name_value_index := attrib_str->Find('=');
				if(name_value_index > 0) {						
					name := attrib_str->SubString(0, name_value_index);
					name_value_index += 1;
					value := attrib_str->SubString(name_value_index, attrib_str->Size() - name_value_index);
					attribs->Insert(name, value);
				};
			};

			return attribs;
		}

		function : ReadChunked(socket : System.IO.InputStream) ~ ByteBuffer {
			buf_max := 256*1024;

			output := ByteBuffer->New();
			buffer := Byte->New[buf_max]; # 64k buffer
			
			done := false;
			do {
				size_line := "0x";

				size_line->Append(socket->ReadLine());
				chunk_size := size_line->ToInt();
				if(chunk_size > buf_max) {
					return Nil;
				};
				
				if(chunk_size > 0) {
					socket->ReadBuffer(0, chunk_size, buffer);
					output->Append(chunk_size, buffer);
					buffer->Clear();

					# read CR/LF
					socket->ReadByte();
					socket->ReadByte();
				}
				else {
					done := true;
				};
			}
			while(<>done);
			
			return output;
		}

		function : ReadLength(length : Int, socket : System.IO.InputStream) ~ ByteBuffer {			
			if(length > 256*1048576) { # 256M buffer max
				return Nil;
			};

			buffer := Byte->New[length];
			socket->ReadBuffer(0, length, buffer);

			return ByteBuffer->New(buffer);		
		}

		function : ReadPost(content_length : Int, socket : System.IO.InputStream) ~ Byte[] {
			buffer := Byte->New[content_length];

			total_read := 0;
			temp := Byte->New[256*1024];
			do {
				read := socket->ReadBuffer(0, temp->Size(), temp);
				# "Post: content_length='{$content_length}, read='{$read}, total_read='{$total_read}"->PrintLine();
				Runtime->Copy(buffer, total_read, temp, 0, read);
				total_read += read;
			}
			while(total_read < content_length);

			return buffer;
		}
	}
	
	#~
	Downloads web content
	~#
	class WebDownloader {
		#~
		Downloads content for the given URLs
		@param urls list of URLs to download content from
		@param headers key/value headers
		@return map of URLs and content
		~#
		function : Download(urls : Vector<Url>, headers : Map<String, String>) ~ Vector<Pair<Url, ByteArrayRef>> {
			group_size := 3;

			downloaders := Downloader->New[urls->Size()];
			each(i : urls) {
				downloaders[i] := Downloader->New(urls->Get(i), headers);
			};

			download_count := 0;
			while(download_count < urls->Size()) {
				group_ending := download_count + group_size;
				if(group_ending >= urls->Size()) {
					group_ending := urls->Size();
				};

				for(i := download_count; i < group_ending; i += 1;) {
					downloader := downloaders[i];
					downloader->Execute(Nil);
				};

				for(i := download_count; i < group_ending; i += 1;) {
					downloader := downloaders[i];
					downloader->Join();
				};

				download_count += group_ending;
			};

			results := Map->New()<Url, ByteArrayRef>;
			each(i : urls) {
				downloader := downloaders[i];
				results->Insert(downloader->GetUrl(), ByteArrayRef->New(downloader->GetContent()));
			};

			return results->GetKeyValues()<Pair<Url, ByteArrayRef>>;
		}
	}

	class Downloader from System.Concurrency.Thread {
		@url : Url;
		@content : Byte[];
		@headers : Map<String, String>;

		New(url : Url, headers : Map<String, String>) {
			Parent();
			@url := url;
			@headers := headers;
		}

		method : public : GetUrl() ~ Url {
			return @url;
		}

		method : public : GetContent() ~ Byte[] {
			return @content;
		}

		method : public : Run(param : Base) ~ Nil {
			if(@url->GetScheme()->Equals("https")) {
				@content := HttpsClient->QuickGet(@url, @headers)->GetContent();
			}
			else if(@url->GetScheme()->Equals("http")) {
				@content := HttpClient->QuickGet(@url, @headers)->GetContent();
			};
		}
	}

	#~
	HTTP cookie
	~#
	class Cookie {
		@name : String;
		@value : String;
		@attribs : Map<String, String>;
		@expires : System.Time.Date;
		@is_debug : Bool;

		#~
		Constructor
		@param name cookie name
		@param value cookie value
		@param is_debug true to display debug information
		~#
		New(name : String, value : String, is_debug : Bool) {
			@name := name;
			@value := value;
			@is_debug := is_debug;
		}

		#~
		Constructor
		@param name cookie name
		@param value cookie value
		~#
		New(name : String, value : String) {
			@name := name;
			@value := value;
		}

		#~
		Constructor
		@param cookie_str cookie string
		~#
		New(cookie_str : String) {
			Parse(cookie_str);
		}

		#~
		Constructor
		@param cookie_str cookie string
		@param is_debug true to display debug information
		~#
		New(cookie_str : String, is_debug : Bool) {
			@is_debug := is_debug;
			Parse(cookie_str);
		}

		#~
		Get cookie name
		@return cookie name
		~#
		method : public : GetName() ~ String {
			return @name;
		}

		#~
		Set cookie name
		@param name cookie name
		~#
		method : public : SetName(name : String) ~ Nil {
			@name := name;
		}

		#~
		Get cookie value
		@return cookie value
		~#
		method : public : GetValue() ~ String {
			return @value->RemoveAll('"');
		}

		#~
		Set cookie value
		@param value cookie value
		~#
		method : public : SetValue(value : String) ~ Nil {
			@value := value;
		}

		#~
		Get cookie attribute
		@param name attribute name
		@return cookie attribute value
		~#
		method : public : GetAttrib(name : String) ~ String {
			if(@attribs <> Nil) {
				return @attribs->Find(name);
			};

			return Nil;
		}

		#~
		Adds a cookie attribute
		@param name attribute name
		@return true if added, false otherwise
		~#
		method : public : AddAttrib(name : String) ~ Bool {
			return AddAttrib(name, Nil);
		}

		#~
		Adds a cookie attribute
		@param name attribute name
		@param value attribute value
		@return true if added, false otherwise
		~#
		method : public : AddAttrib(name : String, value : String) ~ Bool {
			if(@attribs = Nil) {
				@attribs := Map->New()<String, String>;
			};

			if(@attribs->Has(name)) {
				return false;
			};

			@attribs->Insert(name, value);
			return true;
		}

		#~
		Removes an attribute
		@param name attribute name
		@return true if added, false otherwise
		~#
		method : public : RemoveAttrib(name : String) ~ Bool {
			if(@attribs <> Nil) {
				return @attribs->Remove(name);
			};

			return false;
		}

		#~
		Sets the cookie to expire
		~#
		method : public : Expire() ~ Nil {
			@value := "";

			if(@attribs <> Nil & @attribs->Has("Expires")) {
				@attribs->Remove("Expires");
			};
			@expires := System.Time.Date->New(true);
			
		}

		#~
		Sets the cookie to expiration date
		@param expires expiration date
		~#
		method : public : SetExpiration(expires : System.Time.Date) ~ Bool {
			if(@attribs <> Nil & @attribs->Has("Expires")) {
				@attribs->Remove("Expires");
			};
			@expires := expires;
			
			return true;
		}

		#~
		Formats a cookie into a string
		@return string formatted cookie
		~#
		method : public : ToString() ~ String {
			buffer := "";

			buffer += @name;
			buffer += '=';
			buffer += @value;

			if(@attribs <> Nil) {
				buffer += "; ";

				attrib_pairs := @attribs->GetKeyValues()<Pair<String, String>>;
				each(i : attrib_pairs) {
					attrib_pair := attrib_pairs->Get(i);

					name := attrib_pair->GetFirst();
					value := attrib_pair->GetSecond();

					if(value = Nil) {
						buffer += name;
					}
					else {
						buffer += name;
						buffer += '=';
						buffer += value;
					};

					if(i + 1 < attrib_pairs->Size()) {
						buffer += "; ";
					};
				};
			};

			if(@expires <> Nil) {
				buffer += "; ";
				buffer += FormatGmtTime(@expires);
			};

			return buffer;
		}

		#~
		Formats a cookie name and value
		@return string formatted cookie name and value
		~#
		method : public : ToShortString() ~ String {
			buffer := "";
			
			buffer += @name;
			buffer += '=';
			buffer += @value;

			return buffer;
		}
		
		method : Parse(cookie_str : String) ~ Nil {
			if(cookie_str <> Nil) {
				names_values := cookie_str->Split("; ");
				if(names_values->Size() > 0) {
					each(i : names_values) {
						names_value := names_values[i];					
						name_value_index := names_value->Find('=');
						if(name_value_index > 0) {						
							name := names_value->SubString(0, name_value_index);
							name_value_index += 1;
							value := names_value->SubString(name_value_index, names_value->Size() - name_value_index);
							Add(name, value, i);
						}
						else {
							Add(names_value, Nil, i);
						};
					};
				}
				else {
					name_value_index := cookie_str->Find('=');
					if(name_value_index > 0) {						
						name := cookie_str->SubString(0, name_value_index);
						name_value_index += 1;
						value := cookie_str->SubString(name_value_index, cookie_str->Size() - name_value_index);
						Add(name, value, 0);
					};
				};
			};

			if(@is_debug) {
				"---"->PrintLine();
			};
		}

		method : Add(name : String, value : String, index : Int) ~ Nil {
			if(index = 0) {
				@name := name;
				@value := value;
			}
			else {
				if(@attribs = Nil) {
					@attribs := Map->New()<String, String>;
				};
				@attribs->Insert(name, value);
			};

			if(@is_debug) {
				if(value = Nil) {
					"name='{$name}'"->PrintLine();
				}
				else {
					"name='{$name}', value='{$value}'"->PrintLine();
				};
			};
		}
		
		method : native : FormatGmtTime(date : System.Time.Date) ~ String {
			buffer := "";

			days_of_week := ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
			buffer += days_of_week[date->GetWeekDay()];
			buffer += ", ";

			day := date->GetDay();
			if(day < 10) {
				buffer += '0';			
			};
			buffer += day;
			buffer += " ";

			months := ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
			buffer += months[date->GetMonth() - 1];
			buffer += " ";

			buffer += date->GetYear();
			buffer += " ";

			hour := date->GetHours();
			if(hour < 10) {
				buffer += '0';			
			};
			buffer += hour;
			buffer += ":";

			min := date->GetMinutes();
			if(min < 10) {
				buffer += '0';			
			};
			buffer += min;
			buffer += ":";

			sec := date->GetSeconds();
			if(sec < 10) {
				buffer += '0';			
			};
			buffer += sec;
			buffer += " GMT";

			return buffer;
		}
	}

	#~
	HTTP response for methods such as GET, POST and PUT
	~#
	class Response {
		@content : Byte[];
		@code : Int;
		@type : String;

		New(code : Int) {
			@content := Nil;
			@code := code;
			@type := Nil;
		}

		New(content : Byte[], code : Int, type : String) {
			@content := content;
			@code := code;
			@type := type;
		}

		#~
		Gets content type
		@return content type
		~#
		method : public : GetType() ~ String {
			return @type;
		}

		#~
		Gets response content
		@return response content
		~#
		method : public : GetContent() ~ Byte[] {
			return @content;
		}

		#~
		Gets the response code
		@return response code
		~#
		method : public : GetCode() ~ Int {
			return @code;
		}

		#~
		Get the string representation
		@return string representation
		~#
		method : public : ToString() ~ String {
			content_length := 0;
			if(@content <> Nil) {
				content_length := @content->Size();
			};

			type := "<Nil>";
			if(@type = Nil) {
				type := @type;
			};

			return "code={$@code}, type={$type}, content_length={$content_length}";
		}
	}
}

