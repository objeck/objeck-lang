#~~
Copyright (c) 2024 Randy Hollines
~~#

use System.IO.Net; 
use Collection;

#~
Web client support (-lib net)
~#
bundle Web.HTTP {
	#~
	HTTPS client

	```
html := HttpsClient->QuickGet(Web.HTTP.Url->New("https://www.nasa.gov")->ToString();
if(html <> Nil) {
   html->PrintLine();
};
	```
	~#
	class HttpsClient {
		enum Task {
			GET,
			DELETE,
			POST,
			PUT
		}

		# https client support
		@request_headers : Hash<String, String>;
		@response_headers : Hash<String, String>;
		@cookies_enabled : Bool;
		@cookies : Vector<Cookie>;
		@cert_issuer : String;
		@cert_subject : String;
		
		#~
		Default constructor
		@param cookies_enabled true if cookies are enabled, false otherwise		
		~#
		New(cookies_enabled : Bool := false) {
			@request_headers := Hash->New()<String, String>;
			@request_headers->Insert("Cache-Control"->ToLower(), "max-age=0");
			@request_headers->Insert("User-Agent"->ToLower(), "Objeck/1.0");
			
			@response_headers := Hash->New()<String, String>;

			@cookies_enabled := cookies_enabled;
			@cookies := Vector->New()<Cookie>;
		}
		
		#~
		Gets the HTTPS request headers
		@return HTTPS request headers
		~#
		method : public : GetRequestHeaders() ~ Hash<String, String> {
			return @request_headers;
		}

		#~
		Gets the HTTPS response headers
		@return HTTPS response headers
		~#
		method : public : GetResponseHeaders() ~ Hash<String, String> {
			return @response_headers;
		}

		#~
		Adds a HTTPS request header
		@param name header name
		@param value header value
		~#
		method : public : AddHeader(name : String, value : String) ~  Nil {
			@request_headers->Insert(name->ToLower(), value);
		}

		#~
		Removes a HTTPS request header
		@param name header name
		~#
		method : public : RemoveHeader(name : String) ~  Nil {
			@request_headers->Remove(name->ToLower());
		}
		
		#~
		Sets cookie support
		@param cookies_enabled true if cookies are enabled, false otherwise
		~#
		method : public : EnableCookies(cookies_enabled : Bool) ~ Nil {
			@cookies_enabled := cookies_enabled;
		}	
		
		#~
		Gets the cookies
		@return vector of cookies
		~#
		method : public : GetCookies() ~ Vector<Cookie> {
			return @cookies;
		}

		#~
		Get a cookie
		@param name cookie name
		@return found cookie, Nil otherwise
		~#
		method : public : GetCookie(name : String) ~ Cookie {
			each(cookie in @cookies) {
				if(cookie->GetName()->EqualsIgnoreCase(name)) {
					return cookie;
				};
			};

			return Nil;
		}

		#~
		Checks for a cookie
		@param name cookie name
		@return true if found cookie, false otherwise
		~#
		method : public : HasCookie(name : String) ~ Bool {
			return GetCookie(name) <> Nil;
		}
		
		#~
		Sets a cookie
		@param cookie cookie
		~#
		method : public : SetCookie(cookie : Cookie) ~ Nil {
			@cookies->AddBack(cookie);
		}

		#~
		Gets the socket's X.509 certificate issuer name
		@return certificate issuer name
		~#
		method : public : GetIssuer() ~ String {
			return @cert_issuer;
		}

		#~
		Gets the socket's X.509 certificate subject name
		@return certificate subject name
		~#
		method : public : GetSubject() ~ String {
			return @cert_subject;
		}

		method : GetContentType() ~ String {
			value := @response_headers->Find("content-type");
			if(value <> Nil) {
				return value;
			};

			return "text/plain";
		}

		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to oper
		@return read strings
		~#
		function : QuickPost(url : Web.HTTP.Url, data : Byte[]) ~ Web.HTTP.Response {
			return HttpsClient->New()->Post(url, data);
		}

		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to oper
		@param content_type content type
		@return read strings
		~#
		function : QuickPost(url : Web.HTTP.Url, data : Byte[], content_type : String) ~ Web.HTTP.Response {
			return QuickPost(url, data, content_type, Nil);
		}
		
		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to oper
		@param content_type content type
		@param headers key/value headers
		@return read strings
		~#
		function : QuickPost(url : Web.HTTP.Url, data : Byte[], content_type : String, headers : Map<String, String>) ~ Web.HTTP.Response {			
			client := HttpsClient->New();
			if(headers <> Nil) {
				header_key_values := headers->GetKeyValues()<Pair<String, String>>;
				each(i : header_key_values) {
					key_value := header_key_values->Get(i);
					key := key_value->GetFirst();
					value := key_value->GetSecond();
					client->AddHeader(key, value);
				};
			};

			return client->Post(url, data, content_type);
		}		

		#~
		Performs a HTTP POST
		@param url URL
		@param data data to oper
		@return read strings
		~#
		function : QuickPut(url : Web.HTTP.Url, data : Byte[]) ~ Web.HTTP.Response {
			return HttpsClient->New()->Put(url, data);
		}
		
		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to oper
		@param content_type content type
		@return read strings
		~#
		function : QuickPut(url : Web.HTTP.Url, data : Byte[], content_type : String) ~ Web.HTTP.Response {
			return QuickPut(url, data, content_type, Nil);
		}

		#~
		Performs a HTTP POST
		@param url URL
		@param data data to oper
		@param content_type content type
		@param headers key/value headers
		@return read strings
		~#
		function : QuickPut(url : Web.HTTP.Url, data : Byte[], content_type : String, headers : Map<String, String>) ~ Web.HTTP.Response {			
			client := HttpsClient->New();

			if(headers <> Nil) {
				header_key_values := headers->GetKeyValues()<Pair<String, String>>;
				each(i : header_key_values) {
					key_value := header_key_values->Get(i);
					key := key_value->GetFirst();
					value := key_value->GetSecond();
					client->AddHeader(key, value);
				};
			};

			return client->Put(url, data, content_type);
		}

		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to oper
		@param content_type content type
		@return string read
		~#
		method : public : Post(url : Web.HTTP.Url, data : Byte[], content_type : String) ~ Web.HTTP.Response {
			return PushPullOperation(url, data, content_type, HttpsClient->Task->POST);
		}

		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to oper
		@return string read
		~#
		method : public : Post(url : Web.HTTP.Url, data : Byte[]) ~ Web.HTTP.Response {
			return PushPullOperation(url, data, "text/plain", HttpsClient->Task->POST);
		}

		#~
		Performs a HTTPS PUT
		@param url URL
		@param data data to oper
		@param content_type content type
		@return string read
		~#
		method : public : Put(url : Web.HTTP.Url, data : Byte[], content_type : String) ~ Web.HTTP.Response {
			return PushPullOperation(url, data, content_type, HttpsClient->Task->PUT);
		}

		#~
		Performs a HTTPS PUT
		@param url URL
		@param data data to oper
		@return string read
		~#
		method : public : Put(url : Web.HTTP.Url, data : Byte[]) ~ Web.HTTP.Response {
			return PushPullOperation(url, data, "text/plain", HttpsClient->Task->PUT);
		}

		method : PushPullOperation(url : Web.HTTP.Url, data : Byte[], content_type : String, task : HttpsClient->Task) ~ Web.HTTP.Response {
			content : ByteBuffer;
			status_code := 500;

			if(url->GetScheme()->Equals("https")) {
				address := url->GetHost();
				
				location := url->GetPath();
				if(location = Nil) {
					location := "/";
				};

				query := url->GetQuery();
				if(query <> Nil) {
					location += '?';
					location += query;
				};

				frag := url->GetFragment();
				if(frag <> Nil) {
					location += '#';
					location += frag;
				};

				port := url->GetPort();
				if(port < 0) {
					port := 443;
				};
				# "### address='{$address}', port={$port}, location='{$location}'"->PrintLine();

				socket := TCPSecureSocket->New(address, port);
				if(socket->IsOpen()) {
					@response_headers->Empty();

					oper : String;
					
					if(task = HttpsClient->Task->POST) {
						oper := "POST ";
					}
					else {
						oper := "PUT ";
					};

					oper->Append(location);
					oper->Append(" HTTP/1.1\r\nHost: ");
					oper->Append(address);
					oper->Append(':');
					oper->Append(port);
					oper->Append("\r\nContent-Type: ");
					oper->Append(content_type);
					oper->Append("\r\nContent-Length: ");
					oper->Append(data->Size()->ToString());
					oper->Append("\r\n");

					request_keys := @request_headers->GetKeys()<String>;
					each(i : request_keys) {		
						request_key := request_keys->Get(i);
						request_value := @request_headers->Find(request_key);					
						oper->Append(request_key);
						oper->Append(": ");
						oper->Append(request_value);
						oper->Append("\r\n");
					};

					if(@cookies_enabled & @cookies->Size() > 0) {
						oper->Append("Cookie: ");
						each(i : @cookies) {
							oper->Append(@cookies->Get(i)->ToShortString());
							if(i + 1 < @cookies->Size()) {
								oper->Append("; ");
							};
						};
						oper->Append("\r\n");
					};
					oper->Append("\r\n");					
					socket->WriteString(oper);
					socket->WriteBuffer(data);
					
					# IO.Console->Print("Post: |")->Print(oper)->PrintLine("|");

					status_line := socket->ReadLine();
					if(status_line->StartsWith("HTTP/1.")) {
						status_line := status_line->SubString("HTTP/1."->Size() + 2, 
							status_line->Size() - "HTTP/1."->Size() - 2);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					
					# status_line->PrintLine();
					
					if(status_code <> 500) {
						# get request headers
						do {
							line := socket->ReadLine();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
								
								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									@cookies->AddBack(Cookie->New(value));
									# IO.Console->Print("cookie=")->PrintLine(value);
								}
								else {
									@response_headers->Insert(name->ToLower(), value);
								};
							};
						}
						while(line->Size() > 0);
						
						# IO.Console->Print("cookies: size=")->PrintLine(@cookies->Size());
						
						# permanently moved
						if(status_code = 301 | status_code = 302) {
							moved_location := @response_headers->Find("location");
							if(moved_location <> Nil) {
								moved_url_str : String;
								if(moved_location->StartsWith("https://")) {
									moved_url_str := moved_location;
									if(moved_url_str->EndsWith('/')) {
										moved_url_str->Pop();
										moved_url_str += ':';
										moved_url_str += port;
										moved_url_str += '/';
									}
									else {
										moved_url_str += ':';
										moved_url_str += port;
									};
								}
								else {
									moved_url_str := "https://";
									moved_url_str += address;
									if(moved_url_str->EndsWith('/')) {
										moved_url_str->Pop();
										moved_url_str += ':';
										moved_url_str += port;
										moved_url_str += '/';
									}
									else {
										moved_url_str += ':';
										moved_url_str += port;
									};
									moved_url_str += moved_location;
								};

								# IO.Console->Print("permanently moved: ")->PrintLine(moved_url_str);
								return Post(Url->New(moved_url_str), data, content_type);
							};
						};

						# look for chunked blocks
						encoding : String := @response_headers->Find("transfer-encoding");
						if(encoding <> Nil & encoding->Equals("chunked")) {
							# "chunked"->PrintLine();							
							content := WebCommon->ReadChunked(socket);
						}
						else {
							# "Content-Length"->PrintLine();							
							length_header : String := @response_headers->Find("content-length");
							if(length_header <> Nil) {
								content := WebCommon->ReadLength(length_header->ToInt(), socket);
							};
						};
					};
					socket->Close();
				};
			};
			
			if(content = Nil) {
				return Web.HTTP.Response->New(status_code);
			};

			content_type := GetContentType();
			return Web.HTTP.Response->New(content->ToByteArray(), status_code, content_type);
		}
		
		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@return output buffer
		~#
		function : QuickGet(url : Web.HTTP.Url) ~ Web.HTTP.Response {
			return QuickGet(url, "text/plain", Nil);
		}

		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@param headers key/value headers
		@return output buffer
		~#
		function : QuickGet(url : Web.HTTP.Url, headers : Map<String, String>) ~ Web.HTTP.Response {
			return QuickGet(url, "text/plain", headers);
		}

		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@param content_type content type
		@return output buffer
		~#
		function : QuickGet(url : Web.HTTP.Url, content_type : String) ~ Web.HTTP.Response {
			return QuickGet(url, content_type, Nil);
		}
		
		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@param content_type content type
		@param headers key/value headers
		@return output buffer
		~#
		function : QuickGet(url : Web.HTTP.Url, content_type : String, headers : Map<String, String>) ~ Web.HTTP.Response {			
			client := HttpsClient->New();
			if(headers <> Nil) {
				header_key_values := headers->GetKeyValues()<Pair<String, String>>;
				each(i : header_key_values) {
					key_value := header_key_values->Get(i);
					key := key_value->GetFirst();
					value := key_value->GetSecond();
					
					if(value->IsEmpty()) {
						client->RemoveHeader(key);
					}
					else {
						client->AddHeader(key, value);
					};
				};
			};

			return client->Get(url, content_type);
		}

		#~
		Performs a HTTPS GET
		@param url URL
		@return string read
		~#
		method : public : Get(url : Web.HTTP.Url) ~ Web.HTTP.Response {
			return Get(url, "text/plain");
		}

		#~
		Performs a HTTPS GET
		@param url URL
		@param content_type content type
		@return string read
		~#
		method : public : Get(url : Web.HTTP.Url, content_type : String) ~ Web.HTTP.Response {
			return PullOperation(url, content_type, HttpsClient->Task->GET);
		}

		#~
		Performs a HTTPS DELETE and returns results as a String
		@param url URL
		@return output buffer
		~#
		function : QuickDelete(url : Web.HTTP.Url) ~ Web.HTTP.Response {
			return QuickDelete(url, "text/plain", Nil);
		}

		#~
		Performs a HTTPS DELETE and returns results as a String
		@param url URL
		@param headers key/value headers
		@return output buffer
		~#
		function : QuickDelete(url : Web.HTTP.Url, headers : Map<String, String>) ~ Web.HTTP.Response {
			return QuickDelete(url, "text/plain", headers);
		}

		#~
		Performs a HTTPS DELETE and returns results as a String
		@param url URL
		@param content_type content type
		@return output buffer
		~#
		function : QuickDelete(url : Web.HTTP.Url, content_type : String) ~ Web.HTTP.Response {
			return QuickDelete(url, content_type, Nil);
		}
		
		#~
		Performs a HTTPS DELETE and returns results as a String
		@param url URL
		@param content_type content type
		@param headers key/value headers
		@return output buffer
		~#
		function : QuickDelete(url : Web.HTTP.Url, content_type : String, headers : Map<String, String>) ~ Web.HTTP.Response {			
			client := HttpsClient->New();
			if(headers <> Nil) {
				header_key_values := headers->GetKeyValues()<Pair<String, String>>;
				each(i : header_key_values) {
					key_value := header_key_values->Get(i);
					key := key_value->GetFirst();
					value := key_value->GetSecond();
					
					if(value->IsEmpty()) {
						client->RemoveHeader(key);
					}
					else {
						client->AddHeader(key, value);
					};
				};
			};

			return client->Delete(url, content_type);
		}

		#~
		Performs a HTTPS DELETE
		@param url URL
		@param content_type content type
		@return string read
		~#
		method : public : Delete(url : Web.HTTP.Url, content_type : String) ~ Web.HTTP.Response {
			return PullOperation(url, content_type, HttpsClient->Task->DELETE);
		}

		method : PullOperation(url : Web.HTTP.Url, content_type : String, task : HttpsClient->Task) ~ Web.HTTP.Response {
			content : ByteBuffer;
			status_code := 500;

			if(url->GetScheme()->Equals("https")) {
				address := url->GetHost();
				
				location := url->GetPath();
				if(location = Nil) {
					location := "/";
				};

				query := url->GetQuery();
				if(query <> Nil) {
					location += '?';
					location += query;
				};

				frag := url->GetFragment();
				if(frag <> Nil) {
					location += '#';
					location += frag;
				};

				port := url->GetPort();
				if(port < 0) {
					port := 443;
				};
				# "### address='{$address}', port={$port}, location='{$location}'"->PrintLine();

				socket := TCPSecureSocket->New(address, port);
				if(socket->IsOpen()) {
					@response_headers->Empty();

					oper : String;

					if(task = HttpsClient->Task->GET) {
						oper := "GET ";
					}
					else {
						oper := "DELETE ";
					};
					
					oper->Append(location);
					oper->Append(" HTTP/1.1\r\nHost: ");
					oper->Append(address);
					oper->Append(':');
					oper->Append(port);
					oper->Append("\r\n");

					request_keys := @request_headers->GetKeys()<String>;
					each(i : request_keys) {		
						request_key := request_keys->Get(i);
						request_value := @request_headers->Find(request_key);					
						oper->Append(request_key);
						oper->Append(": ");
						oper->Append(request_value);
						oper->Append("\r\n");
					};
					
					if(@cookies_enabled & @cookies->Size() > 0) {
						oper->Append("Cookie: ");
						each(i : @cookies) {
							oper->Append(@cookies->Get(i)->ToShortString());
							if(i + 1 < @cookies->Size()) {
								oper->Append("; ");
							};
						};
						oper->Append("\r\n");
					};					
					oper->Append("\r\n");		
					
					# IO.Console->Print("Get: |")->Print(oper)->PrintLine("|");
					
					socket->WriteString(oper);
					
					status_line := socket->ReadLine();
					# status_line->PrintLine();

					if(status_line->StartsWith("HTTP/1.")) {
						status_line := status_line->SubString("HTTP/1."->Size() + 2, 
							status_line->Size() - "HTTP/1."->Size() - 2);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					# status_code->PrintLine();					

					if(status_code <> 500) {
						# get request headers
						do {
							line := socket->ReadLine();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								
								# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									@cookies->AddBack(Cookie->New(value));
									# IO.Console->Print("cookie=")->PrintLine(value);
								}
								else {
									@response_headers->Insert(name->ToLower(), value);
								};
							};
						}
						while(line->Size() > 0);						
						# IO.Console->Print("cookies: size=")->PrintLine(@cookies->Size());
						
						# permanently moved
						if(status_code = 301 | status_code = 302) {
							moved_location := @response_headers->Find("location");
							if(moved_location <> Nil) {
								moved_url_str : String;
								if(moved_location->StartsWith("https://")) {
									moved_url_str := moved_location;
									if(moved_url_str->EndsWith('/')) {
										moved_url_str->Pop();
										moved_url_str += ':';
										moved_url_str += port;
										moved_url_str += '/';
									}
									else {
										moved_url_str += ':';
										moved_url_str += port;
									};
								}
								else {
									moved_url_str := "https://";
									moved_url_str += address;
									if(moved_url_str->EndsWith('/')) {
										moved_url_str->Pop();
										moved_url_str += ':';
										moved_url_str += port;
										moved_url_str += '/';
									}
									else {
										moved_url_str += ':';
										moved_url_str += port;
									};
									moved_url_str += moved_location;
								};
								@response_headers->Empty();

								# IO.Console->Print("permanently moved: ")->PrintLine(moved_url_str);
								return Get(Url->New(moved_url_str), content_type);
							};
						};

						# look for chunked blocks
						encoding : String := @response_headers->Find("transfer-encoding");
						if(encoding <> Nil & encoding->Equals("chunked")) {
							# "chunked"->PrintLine();							
							content := WebCommon->ReadChunked(socket);
						}
						else {
							# "Content-Length"->PrintLine();							
							length_header : String := @response_headers->Find("content-length");
							if(length_header <> Nil) {
								content := WebCommon->ReadLength(length_header->ToInt(), socket);
							};
						};
						@cert_issuer := socket->GetIssuer();
						@cert_subject := socket->GetSubject();
					};
					socket->Close();
				}
				else {
					return Nil;
				};
			}
			
			if(content = Nil) {
				return Web.HTTP.Response->New(status_code);
			};

			content_type := GetContentType();
			return Web.HTTP.Response->New(content->ToByteArray(), status_code, content_type);
		}
	}

	#~
	Secure web socket client

	```
client := SecureWebSocket->New(Url->New("wss://echo.websocket.org"));
if(client->Connect()) {
  client->ReadTextSocket()->PrintLine();
  
  client->WriteTextSocket("Hello World!");
  client->ReadTextSocket()->PrintLine();
  
  client->CloseSocket();
};
	```
	~#
	class SecureWebSocket {
		#~
		Socket mode, either text or binary
		~#
		enum Mode {
			BINARY,
			TEXT
		}
		
		# web socket support
		@socket : TCPSecureSocket;
		@header : Byte[];
		@url : Web.HTTP.Url;

		# https client support
		@request_headers : Hash<String, String>;
		@response_headers : Hash<String, String>;
		@cookies_enabled : Bool;
		@cookies : Vector<Cookie>;
		@cert_issuer : String;
		@cert_subject : String;

		#~
		Constructor
		@param url URL
		@param cookies_enabled true if cookies are enabled, false otherwise		
		~#
		New(url : Web.HTTP.Url, cookies_enabled : Bool) {
			@url := url;

			@request_headers := Hash->New()<String, String>;
			@request_headers->Insert("Cache-Control"->ToLower(), "max-age=0");
			@request_headers->Insert("User-Agent"->ToLower(), "Objeck/1.0");
			
			@response_headers := Hash->New()<String, String>;

			@cookies_enabled := cookies_enabled;
			@cookies := Vector->New()<Cookie>;
		}

		#~
		Constructor
		@param url URL
		~#
		New(url : Web.HTTP.Url) {
			@url := url;

			@request_headers := Hash->New()<String, String>;
			@request_headers->Insert("Cache-Control"->ToLower(), "max-age=0");
			@request_headers->Insert("User-Agent"->ToLower(), "Objeck/1.0");
			
			@response_headers := Hash->New()<String, String>;
		}

		#~
		Opens a connection to a web socket
		@return true if connected, false otherwise
		~#
		method : public : Connect() ~ Bool {
			if(@url->GetScheme()->Equals("wss")) {
				address := @url->GetHost();
				
				location := @url->GetPath();
				if(location = Nil) {
					location := "/";
				};

				query := @url->GetQuery();
				if(query <> Nil) {
					location += '?';
					location += query;
				};

				frag := @url->GetFragment();
				if(frag <> Nil) {
					location += '#';
					location += frag;
				};

				port := @url->GetPort();
				if(port < 0) {
					port := 443;
				};
				# "### address='{$address}', port={$port}, location='{$location}'"->PrintLine();

				socket := TCPSecureSocket->New(address, port);
				if(socket->IsOpen()) {
					@response_headers->Empty();

					oper := "GET ";
					
					oper->Append(location);
					oper->Append(" HTTP/1.1\r\nHost: ");
					oper->Append(address);
					oper->Append(':');
					oper->Append(port);
					oper->Append("\r\n");

					oper->Append("Connection: Upgrade\r\nUpgrade: websocket\r\nSec-WebSocket-Version: 13\r\nSec-WebSocket-Key: ");

					nonce := Byte->New[16];
					each(i : nonce) {
						nonce[i] := Int->Random(255);
					};
					key := Cipher.Encrypt->Base64(nonce);

					oper->Append(key);
					oper->Append("\r\n\r\n");		
					
					# IO.Console->Print("Get: |")->Print(oper)->PrintLine("|");
					
					socket->WriteString(oper);
					
					status_line := socket->ReadLine();
					if(status_line->StartsWith("HTTP/1.")) {
						status_line := status_line->SubString("HTTP/1."->Size() + 2, status_line->Size() - "HTTP/1."->Size() - 2);
					};

					if(status_line->StartsWith("101 Switching")) {
						# get request headers
						do {
							line := socket->ReadLine();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								
								# IO.Console->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									@cookies->AddBack(Cookie->New(value));
									# IO.Console->Print("cookie=")->PrintLine(value);
								}
								else {
									@response_headers->Insert(name->ToLower(), value);
								};
							};
						}
						while(line->Size() > 0);
						
						nonce_hash := @response_headers->Find("sec-websocket-accept");
						# TODO: validate hash response '258EAFA5-E914-47DA-95CA-C5AB0DC85B11' base64 encoded
						if(nonce_hash <> Nil) {
							@socket := socket;
							@header := Byte->New[2];
							return true;
						}
					};
				}
			};	

			return false;
		}

		#~
		Writes text to the web socket
		@param message message
		@return true if successful, false otherwise
		~#
		method : public : WriteTextSocket(message : String) ~ Bool {
			if(@socket <> Nil & message->Size() < 65536) {
				payload := message->ToByteArray();
				payload_size := message->Size();

				frame_offset : Int;
				
				# create frame
				frame : Byte[];

				if(payload_size < 126) {
					frame_offset := 6;
					frame := Byte->New[frame_offset + payload_size];
				}
				else {
					frame_offset := 8;
					frame := Byte->New[frame_offset + payload_size + 2];
				};
				
				# set utf-8 opcode
				frame[0] :=  0x81;

				# set payload length and bit mask
				mask_payload_length := 0x80; # set mask bit
				if(payload_size < 126) {
					mask_payload_length += payload_size; # payload size
					frame[1] := mask_payload_length;

					#~
					opcodes := Byte->New[2];
					opcodes[0] := frame[0];
					opcodes[1] := frame[1];
					System.IO.Console->Print("opcode+length: ")->PrintLine(opcodes->ToHexString());
					~#

					# key mask
					frame[2] := Int->Random(255);
					frame[3] := Int->Random(255);
					frame[4] := Int->Random(255);
					frame[5] := Int->Random(255);

					#~
					mask := Byte->New[4];
					mask[0] := frame[2];
					mask[1] := frame[3];
					mask[2] := frame[4];
					mask[3] := frame[5];
					System.IO.Console->Print("mask: ")->PrintLine(mask->ToHexString());
					~#
				}
				else {
					mask_payload_length += 126; # payload size
					frame[1] := mask_payload_length;

					frame[2] := (payload_size >> 8) and 0xff;
					frame[3] := payload_size and 0xff;

					#~
					opcodes := Byte->New[4];
					opcodes[0] := frame[0];
					opcodes[1] := frame[1];
					opcodes[2] := frame[2];
					opcodes[3] := frame[3];
					System.IO.Console->Print("write - opcode+length-ext: ")->PrintLine(opcodes->ToHexString());
					~#

					# key mask
					frame[4] := Int->Random(255);
					frame[5] := Int->Random(255);
					frame[6] := Int->Random(255);
					frame[7] := Int->Random(255);

					#~
					mask := Byte->New[4];
					mask[0] := frame[4];
					mask[1] := frame[5];
					mask[2] := frame[6];
					mask[3] := frame[7];
					System.IO.Console->Print("mask: ")->PrintLine(mask->ToHexString());
					~#
				};

				# encode payload
				j := 0;
				each(i : payload) {
					frame[frame_offset + i] := payload[i] xor frame[j % 4 + frame_offset - 4];
					j += 1;
				};

				return @socket->WriteBuffer(frame) > 0;
			};

			return false;
		}

		#~
		Reads text from the web socket
		@return text read, Nil otherwise
		~#
		method : public : ReadTextSocket() ~ String {
			if(@socket <> Nil) {
				# read header
				each(i : 2) {
					@header[i] := @socket->ReadByte();
				};
				opcode := (@header[0] and 0xff)->As(Byte);
				# System.IO.Console->Print("read - opt+len: ")->PrintLine(@header->ToHexString());

				if(opcode = 0x80 | opcode = 0x81 | opcode = 0x88) {
					payload_length : Int := @header[1];
					if(payload_length = 126) {
						each(i : 2) {
							@header[i] := @socket->ReadByte();
						};
						# System.IO.Console->Print("read - length-ext: ")->PrintLine(@header->ToHexString());

						payload_length := (@header[0] and 0xff) << 8 + @header[1] and 0xff;
					};
					# System.IO.Console->Print("read - length: ")->PrintLine(payload_length);

					# read payload
					if(payload_length < 65536) {
						buffer := Byte->New[payload_length];
						each(i : payload_length) {
							buffer[i] := @socket->ReadByte();
						};

						if(opcode = 0x88) {
							@socket->Close();
						};
						# System.IO.Console->Print("read - buffer: ")->PrintLine(String->New(buffer));

						return String->New(buffer);
					};
				};
			};

			return Nil;
		}

		#~
		Pings the websocket server
		@return true if pinged, false otherwise
		~#
		method : public : PingSocket() ~ Bool {
			if(@socket <> Nil) {
				# ping opcode
				@socket->WriteByte(0x89);
				@socket->WriteByte(0x80);

				# payload size
				@socket->WriteByte(0x0);
				@socket->WriteByte(0x0);

				# masking bytes
				@socket->WriteByte(0x0);
				@socket->WriteByte(0x0);
				@socket->WriteByte(0x0);

				# read header
				each(i : 2) {
					@header[i] := @socket->ReadByte();
				};
				opcode := (@header[0] and 0xff)->As(Byte);
				# System.IO.Console->Print("read - opt+len: ")->PrintLine(@header->ToHexString());

				if(opcode = 0x8a) {
					return true;
				};
			};

			return false;
		}

		#~
		Closes the web socket connection
		~#
		method : public : CloseSocket() ~ Nil {
			CloseSocket(1000);
		}

		#~
		Closes the web socket connection
		@param reason reason to close socket
		~#
		method : public : CloseSocket(reason : Int) ~ Nil {
			if(@socket <> Nil) {
				@socket->WriteByte(0x88);

				hi_byte := (reason >> 8) and 0xff;
				@socket->WriteByte(hi_byte);

				low_byte := reason and 0xff;
				@socket->WriteByte(low_byte);
				
				@socket->Close();
			};
		}

		#~
		Gets the socket's X.509 certificate issuer name
		@return certificate issuer name
		~#
		method : public : GetIssuer() ~ String {
			return @cert_issuer;
		}

		#~
		Gets the socket's X.509 certificate subject name
		@return certificate subject name
		~#
		method : public : GetSubject() ~ String {
			return @cert_subject;
		}

		#~
		Sets cookie support
		@param cookies_enabled true if cookies are enabled, false otherwise
		~#
		method : public : EnableCookies(cookies_enabled : Bool) ~ Nil {
			@cookies_enabled := cookies_enabled;
		}	
		
		#~
		Gets the cookies
		@return vector of cookies
		~#
		method : public : GetCookies() ~ Vector<Cookie> {
			return @cookies;
		}
	}
}

#~
Web server support (-lib net)
~#
bundle Web.HTTP.Server {
	#~
	Request handler for HTTPS GET and POST requests. <p>Sample <a href="https://github.com/objeck/objeck-web-server/blob/master/config/simple_config.json" target="_blank">configuration</a> file<./p>

	```
use Web.HTTP.Server;

class Test {
   function : Main(args : String[]) ~ Nil {
      WebServer->ServeSecure("config/simple_config.json");
   }
}

class RequestHandler from HttpsRequestHandler {
   New() {
      Parent();
   }
   
   method : ProcessGet(request : Request, response : Response) ~ Bool {
      return response->HasStaticHandler();
   }

   method : ProcessPost(request : Request, response : Response) ~ Bool {
      return false;
   }
}      
	```
	~#
	class HttpsRequestHandler from System.Concurrency.Thread {
		@client : TCPSecureSocket;
		@server_config : WebServerConfig;
		@is_debug : Bool;

		New() {
			Parent();
		}

		method : public : SetConfig(server_config : WebServerConfig, is_debug : Bool) ~ Nil {
			@server_config := server_config;
			@is_debug := is_debug;
		}
        
		method : public : Run(param : Base) ~ Nil {
			@client := param->As(TCPSecureSocket);

			if(@client <> Nil & @client->IsOpen()) {
				# get request
				request := @client->ReadLine();
				if(@is_debug) {
					request_address := @client->GetAddress();
					"===\nRequest: '{$request}' from '{$request_address}'\n==="->PrintLine();
				};

				# parse request
				request_verb : String; request_path : String;
				if(request->Size() > 0) {
					request_parts := request->Split(" ");
					if(request_parts->Size() = 3) {
						request_verb := request_parts[0];
						request_path := request_parts[1];
					};
				};

				# verify request
				if(request_verb <> Nil & request_path <> Nil & <>request_path->IsEmpty()) {
					# get request headers
					request_headers := GetHeaders();

					# GET and HEAD request
					if(request_verb->Equals("GET") | request_verb->Equals("HEAD")) {
						# retrieve content
						if(request_path = Nil | request_path->Equals("/") | request_path->Has("..")) {
							request_path := "/index.html";
						};

						# write response
						http_request := Request->New(request_path, request_headers);
						http_response := Response->New(@server_config, http_request->GetPath());
						
						if(ProcessGet(http_request, http_response) & @server_config <> Nil & @server_config->IsHandlingFiles()) {
							@server_config->ProcessGet(http_request, http_response);
						};
						ProcessResponse(http_response, request_verb->Equals("HEAD"));
					}
					# POST request
					else if(request_verb->Equals("POST")) {
						content_length_str := request_headers->Find("content-length");
						if(content_length_str <> Nil) {
							content_length  := content_length_str->ToInt();
							if(content_length > 0) {
								buffer := WebCommon->ReadPost(content_length, @client);
								
								# retrieve content
								if(request_path = Nil | request_path->Equals("/") | request_path->Has("..")) {
									request_path := "/index.html";
								};

								# write response
								http_request := Request->New(request_path, request_headers, buffer);
								http_response := Response->New(@server_config, http_request->GetPath());
								
								if(ProcessPost(http_request, http_response) & @server_config <> Nil & @server_config->IsHandlingFiles()) {
									@server_config->ProcessPost(http_request, http_response);
								};
								ProcessResponse(http_response);
							};
						};
					};
				};
				
				@client->Close();
			};
		}

		method : ProcessResponse(response : Response, is_head : Bool := false) ~ Nil {
			if(response <> Nil) {
				response_headers := response->GetHeaders();
				if(response->GetCode() = 200) {
					response_header := "";
					key_values := response_headers->GetKeyValues()<Pair<String, String>>;
					each(i : key_values) {
						key_value := key_values->Get(i);
						key := key_value->GetFirst();
						value := key_value->GetSecond();
						response_header += "{$key}: {$value}\r\n";
					};

					content := response->GetContent();
					if(content <> Nil) {
						content_size := content->Size();
						response_header += "content-length: {$content_size}\r\nAccept-Ranges: bytes\r\nConnection: close\r\n";

						cookies := response->GetCookies()<Cookie>;
						each(i : cookies) {
							cookie := cookies->Get(i);
							response_header += "Set-Cookie: ";
							response_header += cookie->ToString();
							response_header += "\r\n";
						};

						@client->WriteString("HTTP/1.1 200 OK\r\n{$response_header}\r\n");
						if(<>is_head) {
							@client->WriteBuffer(content);
						};
					}
					else {
						@client->WriteString("HTTP/1.1 200\r\n\r\n");
					};
				}
				else {
					select(response->GetCode()) {
						label 202 {
							@client->WriteString("HTTP/1.1 202 Accepted\r\n\r\n");
						}

						label 302 {
							reason := response->GetReason();
							if(reason <> Nil) {
								@client->WriteString("HTTP/1.1 302 Found\r\nLocation: {$reason}\r\nConnection: close\r\n\r\n");
							}
							else {
								@client->WriteString("HTTP/1.1 400\r\n\r\n");
							};
						}

						label 404 {
							@client->WriteString("HTTP/1.1 404 Not Found\r\n\r\n");
						}

						label 410 {
							@client->WriteString("HTTP/1.1 410 Gone\r\n\r\n");
						}

						other {
							@client->WriteString("HTTP/1.1 400\r\n\r\n");
						}
					};
				};
			};
		}
		
		#~
		Get HTTP headers
		@return HTTP headers
		~#
		method : public : GetHeaders() ~ Map<String, String> {
			headers := Map->New()<String, String>;
			
			header := @client->ReadLine();
			while(header <> Nil & header->Size() > 0) {
				if(@is_debug) {				
					"header: {$header}"->PrintLine();
				};
                
				header_parts := header->Split(": ");
				if(header_parts->Size() = 2) {
					headers->Insert(header_parts[0]->ToLower(), header_parts[1]);
				};

				header := @client->ReadLine();
			};
			
			return headers;
		}

		#~
		Callback for GET requests
		@param request HTTP request
		@param response HTTP response
		@return true to continue processing, false otherwise
		~#
		method : virtual : ProcessGet(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool;

		#~
		Callback for POST requests
		@param request HTTP request
		@param response HTTP response
		@return true to continue processing, false otherwise
		~#
		method : virtual : ProcessPost(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool;
	}
}