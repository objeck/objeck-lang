#~~
# TODO
# Copyright (c) 2025 Randy Hollines
# OpenCV wrapper
~~#	

use System.API, Collection.Tuple;

#~
Open Computer Vision (OpenCV) support for image rendering and compilation. (-lib opencv)
~#
bundle API.OpenCV {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_opencv");
			};

			return @lib_proxy;
		}
	}

	#~
	OpenCV image support routines
	~#
	class Image {
		@image_type : Int;
		@image_cols : Int;
		@image_rows : Int;
		@image_bytes : Byte[];

		#~
		Image type
		~#
		enum Format := 64 {
			JPEG,
			PNG,
			WEBP,
			GIF
		}

		New : private() {
		}

		#~
		Gets image size
		@return image size
		~#
		method : public : Size() ~ Int {
			return @image_bytes->Size();
		}

		#~
		Gets image rows
		@return image rows
		~#
		method : public : Rows() ~ Int {
			return @image_rows;
		}

		#~
		Gets image columns
		@return image columns
		~#
		method : public : Columns() ~ Int {
			return @image_cols;
		}

		#~
		Gets image type
		@return image type
		~#
		method : public : Type() ~ Int {
			return @image_type;
		}

		#~
		Gets image bytes
		@return image bytes
		~#
		method : public : Bytes() ~ Byte[] {
			return @image_bytes;
		}

		#~
		Load image from file
		@param image_path image file path
		@return loaded image
		~#
		function : Load(image_path : String) ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := Nil;
			array_args[1] := image_path;

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_path", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Load image from bytes
		@param image_path image file path
		@return loaded image
		~#
		function : Load(image_bytes : Byte[]) ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := Nil;
			array_args[1] := ByteArrayRef->New(image_bytes);

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_bytes", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Shows an image
		~#
		method : public : Show(title : String) ~ Nil {
			array_args := Base->New[2];

			array_args[0] := @self;
			array_args[1] := title;

			Proxy->GetDllProxy()->CallFunction("opencv_show_image", array_args);
		}

		#~
		Convert an image to a given byte format
		@param format output format
		@return converted image bytes
		~#
		method : public : Convert(format : Image->Format) ~ Byte[] {			
			array_args := Base->New[3];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := @self;
			array_args[2] := IntRef->New(format->As(Int));

			Proxy->GetDllProxy()->CallFunction("opencv_convert_image", array_args);

			holder := array_args[0]->As(ByteArrayRef);
			return holder->Get();
		}

		#~
		Convert an image to a given byte format
		@param format output format
		@return converted image bytes
		~#
		method : public : DrawRectangle(rect : Rect, color : Scalar, thickness : Int, 
				type : LineType := LineType->LINE_8) ~ API.OpenCV.Image {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := rect;
			array_args[3] := color;
			array_args[4] := IntRef->New(thickness);
			array_args[5] := IntRef->New(type);

			Proxy->GetDllProxy()->CallFunction("opencv_draw_rect", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Convert an image to a given byte format
		@param format output format
		@return converted image bytes
		~#
		method : public : DrawCircle(pt : Point, radius : Int , color : Scalar, thickness : Int, 
				type : LineType := LineType->LINE_8) ~ API.OpenCV.Image {
			array_args := Base->New[7];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := pt;
			array_args[3] := IntRef->New(radius);;
			array_args[4] := color;
			array_args[5] := IntRef->New(thickness);
			array_args[6] := IntRef->New(type);

			Proxy->GetDllProxy()->CallFunction("opencv_draw_circle", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Convert an image to a given byte format
		@param format output format
		@return converted image bytes
		~#
		method : public : Resize(sz : Size, px : Float := 0.0, py : Float := 0.0, 
				interpolation : InterpolationFlags := InterpolationFlags->INTER_LINEAR) ~ API.OpenCV.Image {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := sz;
			array_args[3] := FloatRef->New(px);
			array_args[4] := FloatRef->New(py);
			array_args[5] := IntRef->New(interpolation);

			Proxy->GetDllProxy()->CallFunction("opencv_resize_image", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}
	}

	#~
	OpenCV point 
	~#
	class Point {
		@x : Int;
		@y : Int;

		New(x : Int, y : Int) {
			@x := x;
			@y := y;
		}

		method : public : GetX() ~ Int {
			return @x;
		}

		method : public : GetY() ~ Int {
			return @y;
		}
	}

	#~
	OpenCV rectangle 
	~#
	class Rect from Point {
		@width : Int;
		@height : Int;

		New(x : Int, y : Int, width : Int, height : Int) {
			Parent(x, y);

			@width := width;
			@height := height;
		}

		method : public : GetWidth() ~ Int {
			return @width;
		}

		method : public : GetHeight() ~ Int {
			return @height;
		}
	}

	#~
	OpenCV size 
	~#
	class Size {
		@width : Int;
		@height : Int;

		New(width : Int, height : Int) {
			@width := width;
			@height := height;
		}

		method : public : GetWidth() ~ Int {
			return @width;
		}

		method : public : GetHeight() ~ Int {
			return @height;
		}
	}

	#~
	OpenCV scalar 
	~#
	class Scalar {
		@v0 : Float;
		@v1 : Float;
		@v2 : Float;
		@v3 : Float;

		New(v0 : Float, v1 : Float, v2 : Float := 0.0, v3 : Float := 0.0) {
			@v0 := v0;
			@v1 := v1;
			@v2 := v2;
			@v3 := v3;
		}

		method : public : GetV0() ~ Float {
			return @v0;
		}

		method : public : GetV1() ~ Float {
			return @v1;
		}

		method : public : GetV2() ~ Float {
			return @v2;
		}

		method : public : GetV3() ~ Float {
			return @v3;
		}
	}

	consts LineType {
	    FILLED := -1, # fill
	    LINE_4 := 4, # 4-connected line
	    LINE_8 := 8, # 8-connected line
	    LINE_AA := 16 # anti-aliased line
	}

	consts InterpolationFlags {
	    INTER_NEAREST := 0,
	    INTER_LINEAR := 1,
	    INTER_CUBIC := 2,
	    INTER_AREA := 3,
	    INTER_LANCZOS4 := 4,
	    INTER_LINEAR_EXACT := 5,
	    INTER_NEAREST_EXACT := 6,
	    INTER_MAX := 7,
	    WARP_FILL_OUTLIERS := 8,
	    WARP_INVERSE_MAP := 16,
	    WARP_RELATIVE_MAP := 32
	}

	consts ColorConversionCodes {
		COLOR_BGR2BGRA := 0,
		COLOR_RGB2RGBA := 0,
		COLOR_BGRA2BGR := 1,
		COLOR_RGBA2RGB := 1,
		COLOR_BGR2RGBA := 2,
		COLOR_RGB2BGRA := 2,
		COLOR_RGBA2BGR := 3,
		COLOR_BGRA2RGB := 3,
		COLOR_BGR2RGB := 4,
		COLOR_RGB2BGR := 4,
		COLOR_BGRA2RGBA := 5,
		COLOR_RGBA2BGRA := 5,
		COLOR_BGR2GRAY := 6,
		COLOR_RGB2GRAY := 7,
		COLOR_GRAY2BGR := 8,
		COLOR_GRAY2RGB := 8,
		COLOR_GRAY2BGRA := 9,
		COLOR_GRAY2RGBA := 9,
		COLOR_BGRA2GRAY := 10,
		COLOR_RGBA2GRAY := 11,
		COLOR_BGR2BGR565 := 12,
		COLOR_RGB2BGR565 := 13,
		COLOR_BGR5652BGR := 14,
		COLOR_BGR5652RGB := 15,
		COLOR_BGRA2BGR565 := 16,
		COLOR_RGBA2BGR565 := 17,
		COLOR_BGR5652BGRA := 18,
		COLOR_BGR5652RGBA := 19,
		COLOR_GRAY2BGR565 := 20,
		COLOR_BGR5652GRAY := 21,
		COLOR_BGR2BGR555 := 22,
		COLOR_RGB2BGR555 := 23,
		COLOR_BGR5552BGR := 24,
		COLOR_BGR5552RGB := 25,
		COLOR_BGRA2BGR555 := 26,
		COLOR_RGBA2BGR555 := 27,
		COLOR_BGR5552BGRA := 28,
		COLOR_BGR5552RGBA := 29,
		COLOR_GRAY2BGR555 := 30,
		COLOR_BGR5552GRAY := 31,
		COLOR_BGR2XYZ := 32,
		COLOR_RGB2XYZ := 33,
		COLOR_XYZ2BGR := 34,
		COLOR_XYZ2RGB := 35,
		COLOR_BGR2YCrCb := 36,
		COLOR_RGB2YCrCb := 37,
		COLOR_YCrCb2BGR := 38,
		COLOR_YCrCb2RGB := 39,
		COLOR_BGR2HSV := 40,
		COLOR_RGB2HSV := 41,
		COLOR_BGR2Lab := 44,
		COLOR_RGB2Lab := 45,
		COLOR_BGR2Luv := 50,
		COLOR_RGB2Luv := 51,
		COLOR_BGR2HLS := 52,
		COLOR_RGB2HLS := 53,
		COLOR_HSV2BGR := 54,
		COLOR_HSV2RGB := 55,
		COLOR_Lab2BGR := 56,
		COLOR_Lab2RGB := 57,
		COLOR_Luv2BGR := 58,
		COLOR_Luv2RGB := 59,
		COLOR_HLS2BGR := 60,
		COLOR_HLS2RGB := 61,
		COLOR_BGR2HSV_FULL := 66,
		COLOR_RGB2HSV_FULL := 67,
		COLOR_BGR2HLS_FULL := 68,
		COLOR_RGB2HLS_FULL := 69,
		COLOR_HSV2BGR_FULL := 70,
		COLOR_HSV2RGB_FULL := 71,
		COLOR_HLS2BGR_FULL := 72,
		COLOR_HLS2RGB_FULL := 73,
		COLOR_LBGR2Lab := 74,
		COLOR_LRGB2Lab := 75,
		COLOR_LBGR2Luv := 76,
		COLOR_LRGB2Luv := 77,
		COLOR_Lab2LBGR := 78,
		COLOR_Lab2LRGB := 79,
		COLOR_Luv2LBGR := 80,
		COLOR_Luv2LRGB := 81,
		COLOR_BGR2YUV := 82,
		COLOR_RGB2YUV := 83,
		COLOR_YUV2BGR := 84,
		COLOR_YUV2RGB := 85,
		COLOR_YUV2RGB_NV12 := 90,
		COLOR_YUV2BGR_NV12 := 91,
		COLOR_YUV2RGB_NV21 := 92,
		COLOR_YUV2BGR_NV21 := 93,
		COLOR_YUV420sp2RGB := 92,
		COLOR_YUV420sp2BGR := 93,
		COLOR_YUV2RGBA_NV12 := 94,
		COLOR_YUV2BGRA_NV12 := 95,
		COLOR_YUV2RGBA_NV21 := 96,
		COLOR_YUV2BGRA_NV21 := 97,
		COLOR_YUV420sp2RGBA := 96,
		COLOR_YUV420sp2BGRA := 97,
		COLOR_YUV2RGB_YV12 := 98,
		COLOR_YUV2BGR_YV12 := 99,
		COLOR_YUV2RGB_IYUV := 100,
		COLOR_YUV2BGR_IYUV := 101,
		COLOR_YUV2RGB_I420 := 100,
		COLOR_YUV2BGR_I420 := 101,
		COLOR_YUV420p2RGB := 98,
		COLOR_YUV420p2BGR := 99,
		COLOR_YUV2RGBA_YV12 := 102,
		COLOR_YUV2BGRA_YV12 := 103,
		COLOR_YUV2RGBA_IYUV := 104,
		COLOR_YUV2BGRA_IYUV := 105,
		COLOR_YUV2RGBA_I420 := 104,
		COLOR_YUV2BGRA_I420 := 105,
		COLOR_YUV420p2RGBA := 102,
		COLOR_YUV420p2BGRA := 103,
		COLOR_YUV2GRAY_420 := 106,
		COLOR_YUV2GRAY_NV21 := 106,
		COLOR_YUV2GRAY_NV12 := 106,
		COLOR_YUV2GRAY_YV12 := 106,
		COLOR_YUV2GRAY_IYUV := 106,
		COLOR_YUV2GRAY_I420 := 106,
		COLOR_YUV420sp2GRAY := 106,
		COLOR_YUV420p2GRAY := 106,
		COLOR_YUV2RGB_UYVY := 107,
		COLOR_YUV2BGR_UYVY := 108,
		COLOR_YUV2RGB_Y422 := 107,
		COLOR_YUV2BGR_Y422 := 108,
		COLOR_YUV2RGB_UYNV := 107,
		COLOR_YUV2BGR_UYNV := 108,
		COLOR_YUV2RGBA_UYVY := 111,
		COLOR_YUV2BGRA_UYVY := 112,
		COLOR_YUV2RGBA_Y422 := 111,
		COLOR_YUV2BGRA_Y422 := 112,
		COLOR_YUV2RGBA_UYNV := 111,
		COLOR_YUV2BGRA_UYNV := 112,
		COLOR_YUV2RGB_YUY2 := 115,
		COLOR_YUV2BGR_YUY2 := 116,
		COLOR_YUV2RGB_YVYU := 117,
		COLOR_YUV2BGR_YVYU := 118,
		COLOR_YUV2RGB_YUYV := 115,
		COLOR_YUV2BGR_YUYV := 116,
		COLOR_YUV2RGB_YUNV := 115,
		COLOR_YUV2BGR_YUNV := 116,
		COLOR_YUV2RGBA_YUY2 := 119,
		COLOR_YUV2BGRA_YUY2 := 120,
		COLOR_YUV2RGBA_YVYU := 121,
		COLOR_YUV2BGRA_YVYU := 122,
		COLOR_YUV2RGBA_YUYV := 119,
		COLOR_YUV2BGRA_YUYV := 120,
		COLOR_YUV2RGBA_YUNV := 119,
		COLOR_YUV2BGRA_YUNV := 120,
		COLOR_YUV2GRAY_UYVY := 123,
		COLOR_YUV2GRAY_YUY2 := 124,
		COLOR_YUV2GRAY_Y422 := 123,
		COLOR_YUV2GRAY_UYNV := 123,
		COLOR_YUV2GRAY_YVYU := 124,
		COLOR_YUV2GRAY_YUYV := 124,
		COLOR_YUV2GRAY_YUNV := 124,
		COLOR_RGBA2mRGBA := 125,
		COLOR_mRGBA2RGBA := 126,
		COLOR_RGB2YUV_I420 := 127,
		COLOR_BGR2YUV_I420 := 128,
		COLOR_RGB2YUV_IYUV := 127,
		COLOR_BGR2YUV_IYUV := 128,
		COLOR_RGBA2YUV_I420 := 129,
		COLOR_BGRA2YUV_I420 := 130,
		COLOR_RGBA2YUV_IYUV := 129,
		COLOR_BGRA2YUV_IYUV := 130,
		COLOR_RGB2YUV_YV12 := 131,
		COLOR_BGR2YUV_YV12 := 132,
		COLOR_RGBA2YUV_YV12 := 133,
		COLOR_BGRA2YUV_YV12 := 134,
		COLOR_BayerBG2BGR := 46,
		COLOR_BayerGB2BGR := 47,
		COLOR_BayerRG2BGR := 48,
		COLOR_BayerGR2BGR := 49,
		COLOR_BayerRGGB2BGR := 46,
		COLOR_BayerGRBG2BGR := 47,
		COLOR_BayerBGGR2BGR := 48,
		COLOR_BayerGBRG2BGR := 49,
		COLOR_BayerRGGB2RGB := 48,
		COLOR_BayerGRBG2RGB := 49,
		COLOR_BayerBGGR2RGB := 46,
		COLOR_BayerGBRG2RGB := 47,
		COLOR_BayerBG2RGB := 48,
		COLOR_BayerGB2RGB := 49,
		COLOR_BayerRG2RGB := 46,
		COLOR_BayerGR2RGB := 47,
		COLOR_BayerBG2GRAY := 86,
		COLOR_BayerGB2GRAY := 87,
		COLOR_BayerRG2GRAY := 88,
		COLOR_BayerGR2GRAY := 89,
		COLOR_BayerRGGB2GRAY := 86,
		COLOR_BayerGRBG2GRAY := 87,
		COLOR_BayerBGGR2GRAY := 88,
		COLOR_BayerGBRG2GRAY := 89,
		COLOR_BayerBG2BGR_VNG := 62,
		COLOR_BayerGB2BGR_VNG := 63,
		COLOR_BayerRG2BGR_VNG := 64,
		COLOR_BayerGR2BGR_VNG := 65,
		COLOR_BayerRGGB2BGR_VNG := 62,
		COLOR_BayerGRBG2BGR_VNG := 63,
		COLOR_BayerBGGR2BGR_VNG := 64,
		COLOR_BayerGBRG2BGR_VNG := 65,
		COLOR_BayerRGGB2RGB_VNG := 64,
		COLOR_BayerGRBG2RGB_VNG := 64,
		COLOR_BayerBGGR2RGB_VNG := 62,
		COLOR_BayerGBRG2RGB_VNG := 63,
		COLOR_BayerBG2RGB_VNG := 64,
		COLOR_BayerGB2RGB_VNG := 65,
		COLOR_BayerRG2RGB_VNG := 62,
		COLOR_BayerGR2RGB_VNG := 63,
		COLOR_BayerBG2BGR_EA := 135,
		COLOR_BayerGB2BGR_EA := 136,
		COLOR_BayerRG2BGR_EA := 137,
		COLOR_BayerGR2BGR_EA := 138,
		COLOR_BayerRGGB2BGR_EA := 135,
		COLOR_BayerGRBG2BGR_EA := 136,
		COLOR_BayerBGGR2BGR_EA := 137,
		COLOR_BayerGBRG2BGR_EA := 138,
		COLOR_BayerRGGB2RGB_EA := 137,
		COLOR_BayerGRBG2RGB_EA := 138,
		COLOR_BayerBGGR2RGB_EA := 135,
		COLOR_BayerGBRG2RGB_EA := 136,
		COLOR_BayerBG2RGB_EA := 137,
		COLOR_BayerGB2RGB_EA := 138,
		COLOR_BayerRG2RGB_EA := 135,
		COLOR_BayerGR2RGB_EA := 136,
		COLOR_BayerBG2BGRA := 139,
		COLOR_BayerGB2BGRA := 140,
		COLOR_BayerRG2BGRA := 141,
		COLOR_BayerGR2BGRA := 142,
		COLOR_BayerRGGB2BGRA := 139,
		COLOR_BayerGRBG2BGRA := 140,
		COLOR_BayerBGGR2BGRA := 141,
		COLOR_BayerGBRG2BGRA := 142,
		COLOR_BayerRGGB2RGBA := 141,
		COLOR_BayerGRBG2RGBA := 142,
		COLOR_BayerBGGR2RGBA := 139,
		COLOR_BayerGBRG2RGBA := 140,
		COLOR_BayerBG2RGBA := 141,
		COLOR_BayerGB2RGBA := 142,
		COLOR_BayerRG2RGBA := 139,
		COLOR_BayerGR2RGBA := 140,
		COLOR_RGB2YUV_UYVY := 143,
		COLOR_BGR2YUV_UYVY := 144,
		COLOR_RGB2YUV_Y422 := 143,
		COLOR_BGR2YUV_Y422 := 144,
		COLOR_RGB2YUV_UYNV := 143,
		COLOR_BGR2YUV_UYNV := 144,
		COLOR_RGBA2YUV_UYVY := 145,
		COLOR_BGRA2YUV_UYVY := 146,
		COLOR_RGBA2YUV_Y422 := 145,
		COLOR_BGRA2YUV_Y422 := 146,
		COLOR_RGBA2YUV_UYNV := 145,
		COLOR_BGRA2YUV_UYNV := 146,
		COLOR_RGB2YUV_YUY2 := 147,
		COLOR_BGR2YUV_YUY2 := 148,
		COLOR_RGB2YUV_YVYU := 149,
		COLOR_BGR2YUV_YVYU := 150,
		COLOR_RGB2YUV_YUYV := 147,
		COLOR_BGR2YUV_YUYV := 148,
		COLOR_RGB2YUV_YUNV := 147,
		COLOR_BGR2YUV_YUNV := 148,
		COLOR_RGBA2YUV_YUY2 := 151,
		COLOR_BGRA2YUV_YUY2 := 152,
		COLOR_RGBA2YUV_YVYU := 153,
		COLOR_BGRA2YUV_YVYU := 154,
		COLOR_RGBA2YUV_YUYV := 151,
		COLOR_BGRA2YUV_YUYV := 152,
		COLOR_RGBA2YUV_YUNV := 151,
		COLOR_BGRA2YUV_YUNV := 152,
		COLOR_COLORCVT_MAX := 155
	}
}