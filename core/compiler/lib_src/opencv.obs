#~~
# TODO
# Copyright (c) 2025 Randy Hollines
# ONNX and OpenCV wrappers
~~#	

use System.API;

#~
Open Computer Vision (OpenCV) support for image rendering and compilation. (-lib onnx)
~#
bundle API.OpenCV {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_opencv");
			};

			return @lib_proxy;
		}
	}

	#~
	Image manipulation routines
	~#
	class Image {
		@bytes : Byte[]; # TODO: just store length
		@type : Int;
		@rows : Int;
		@cols : Int;

		#~
		Image type
		~#
		enum Format := 64 {
			JPEG,
			PNG,
			WEBP,
			GIF
		}

		New(bytes : Byte[]) {
			@bytes := bytes;
		}

		function : LoadFromFile(image_path : String) ~ API.OpenCV.Image {
			array_args := Base->New[5];

			array_args[0] := Nil;
			array_args[1] := image_path;
			array_args[2] := IntRef->New(); # type
			array_args[3] := IntRef->New(); # rows
			array_args[4] := IntRef->New(); # cols

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_path", array_args);

			type_obj := array_args[2]->As(IntRef);
			type := type_obj->Get();

			rows_obj := array_args[3]->As(IntRef);
			rows := rows_obj->Get();

			cols_obj := array_args[4]->As(IntRef);
			cols := cols_obj->Get();

			bytes_obj := array_args[0]->As(ByteArrayRef);
			bytes := bytes_obj->Get();

			return Nil;
		}

		function : LoadFromMemory(image_bytes : Byte[]) ~ API.OpenCV.Image {
			@image_bytes := image_bytes;
			@image_max := @image_bytes->Size();

			return API.OpenCV.Image->New();
		}

		function : WriteToFile(image_path : String) ~  Bool {
			return false;
		}

		#~ TOOD: update
		Image format conversion
		@param input_image image bytes
		@param output_format image output format
		@return bytes for converted image
		~#
		method : public : Convert(output_format : Image->Format) ~ API.OpenCV.Image {
			array_args := Base->New[3];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := ByteArrayRef->New(@bytes);
			array_args[2] := IntRef->New(output_format->As(Int));

			Proxy->GetDllProxy()->CallFunction("opencv_convert_image", array_args);
			
			holder := array_args[0]->As(ByteArrayRef);
			if(holder <> Nil) {
				return API.OpenCV.Image->New(holder->Get());
			};

			return Nil;
		}
	}
}