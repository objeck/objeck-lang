#~~
# Copyright (c) 2025 Randy Hollines
# OpenCV wrapper
~~#	

use System.API, Data.JSON;

#~
Open Computer Vision (OpenCV) support for image rendering and compilation. (-lib onnx)
~#
bundle API.OpenCV {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_opencv");
			};

			return @lib_proxy;
		}
	}

	#~
	OpenCV VideoCapture 
	~#
	class VideoCapture {
		@capture : Int;

		consts Api {
			CAP_ANY := 0,
			CAP_VFW := 200,
			CAP_V4L := 200,
			CAP_V4L2 := 200,
			CAP_FIREWIRE := 300,
			CAP_FIREWARE := 300,
			CAP_IEEE1394 := 300,
			CAP_DC1394 := 300,
			CAP_CMU1394 := 300,
			CAP_QT := 500,
			CAP_UNICAP := 600,
			CAP_DSHOW := 700,
			CAP_PVApi := 800,
			CAP_OPENNI := 900,
			CAP_OPENNI_ASUS := 910,
			CAP_ANDROID := 1000,
			CAP_XIApi := 1100,
			CAP_AVFOUNDATION := 1200,
			CAP_GIGANETIX := 1300,
			CAP_MSMF := 1400,
			CAP_WINRT := 1410,
			CAP_INTELPERC := 1500,
			CAP_OPENNI2 := 1600,
			CAP_OPENNI2_ASUS := 1610,
			CAP_GPHOTO2 := 1700,
			CAP_GSTREAMER := 1800,
			CAP_FFMPEG := 1900,
			CAP_IMAGES := 2000,
			CAP_ARAVIS := 2100,
			CAP_OPENCV_MJPEG := 2200,
			CAP_INTEL_MFX := 2300,
			CAP_XINE := 2400
		}

		consts Property {
		  CAP_PROP_POS_MSEC := 0,
		  CAP_PROP_POS_FRAMES := 1,
		  CAP_PROP_POS_AVI_RATIO := 2,
		  CAP_PROP_FRAME_WIDTH := 3,
		  CAP_PROP_FRAME_HEIGHT := 4,
		  CAP_PROP_FPS := 5,
		  CAP_PROP_FOURCC := 6,
		  CAP_PROP_FRAME_COUNT := 7,
		  CAP_PROP_FORMAT := 8,
		  CAP_PROP_MODE := 9,
		  CAP_PROP_BRIGHTNESS := 10,
		  CAP_PROP_CONTRAST := 11,
		  CAP_PROP_SATURATION := 12,
		  CAP_PROP_HUE := 13,
		  CAP_PROP_GAIN := 14,
		  CAP_PROP_EXPOSURE := 15,
		  CAP_PROP_CONVERT_RGB := 16,
		  CAP_PROP_WHITE_BALANCE_BLUE_U := 17,
		  CAP_PROP_RECTIFICATION := 18,
		  CAP_PROP_MONOCHROME := 19,
		  CAP_PROP_SHARPNESS := 20,
		  CAP_PROP_AUTO_EXPOSURE := 21,
		  CAP_PROP_GAMMA := 22,
		  CAP_PROP_TEMPERATURE := 23,
		  CAP_PROP_TRIGGER := 24,
		  CAP_PROP_TRIGGER_DELAY := 25,
		  CAP_PROP_WHITE_BALANCE_RED_V := 26,
		  CAP_PROP_ZOOM := 27,
		  CAP_PROP_FOCUS := 28,
		  CAP_PROP_GUID := 29,
		  CAP_PROP_ISO_SPEED := 30,
		  CAP_PROP_BACKLIGHT := 32,
		  CAP_PROP_PAN := 33,
		  CAP_PROP_TILT := 34,
		  CAP_PROP_ROLL := 35,
		  CAP_PROP_IRIS := 36,
		  CAP_PROP_SETTINGS := 37,
		  CAP_PROP_BUFFERSIZE := 38,
		  CAP_PROP_AUTOFOCUS := 39,
		  CAP_PROP_SAR_NUM := 40,
		  CAP_PROP_SAR_DEN := 41,
		  CAP_PROP_BACKEND := 42,
		  CAP_PROP_CHANNEL := 43,
		  CAP_PROP_AUTO_WB := 44,
		  CAP_PROP_WB_TEMPERATURE := 45,
		  CAP_PROP_CODEC_PIXEL_FORMAT := 46,
		  CAP_PROP_BITRATE := 47,
		  CAP_PROP_ORIENTATION_META := 48,
		  CAP_PROP_ORIENTATION_AUTO := 49,
		  CAP_PROP_OPEN_TIMEOUT_MSEC := 53,
		  CAP_PROP_READ_TIMEOUT_MSEC := 54
		}

		New(filename : String, prop : Api) {
			array_args := Base->New[3];

			array_args[0] := IntRef->New();
			array_args[1] := filename;
			array_args[2] := IntRef->New(prop);

			Proxy->GetDllProxy()->CallFunction("opencv_new_video_capture_prop", array_args);

			value := array_args[0]->As(IntRef);
			@capture := value->Get();
		}

		New(filename : String) {
			array_args := Base->New[2];

			array_args[0] := IntRef->New();
			array_args[1] := filename;

			Proxy->GetDllProxy()->CallFunction("opencv_new_video_capture", array_args);

			value := array_args[0]->As(IntRef);
			@capture := value->Get();
		}

		New(id : Int, prop : Api) {
			array_args := Base->New[3];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(id);
			array_args[2] := IntRef->New(prop);

			Proxy->GetDllProxy()->CallFunction("opencv_new_video_capture_prop_id", array_args);

			value := array_args[0]->As(IntRef);
			@capture := value->Get();
		}

		New(id : Int) {
			array_args := Base->New[2];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(id);

			Proxy->GetDllProxy()->CallFunction("opencv_new_video_capture_id", array_args);

			value := array_args[0]->As(IntRef);
			@capture := value->Get();
		}

		#~
		Open video file or a capturing device or a IP video stream
		@param id device ID
		@return true if open, false otherwise
		~#
		method : public : Open(id : Int) ~ Bool {
			array_args := Base->New[3];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@capture);
			array_args[2] := IntRef->New(id);
			Proxy->GetDllProxy()->CallFunction("opencv_open_id", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		#~
		Open video file or a capturing device or a IP video stream
		@param id device ID
		@param pref Api prefernce
		@return true if open, false otherwise
		~#
		method : public : Open(id : Int, pref : Api) ~ Bool {
			array_args := Base->New[4];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@capture);
			array_args[2] := IntRef->New(id);
			array_args[3] := IntRef->New(pref);
			Proxy->GetDllProxy()->CallFunction("opencv_open_id_pref", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		#~
		Open video file or a capturing device or a IP video stream
		@param name device name
		@return true if open, false otherwise
		~#
		method : public : Open(name : String) ~ Bool {
			array_args := Base->New[3];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@capture);
			array_args[2] := name;
			Proxy->GetDllProxy()->CallFunction("opencv_open_name", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		method : public : Read() ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@capture);
			Proxy->GetDllProxy()->CallFunction("opencv_video_read", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		method : public : Get(prop : Property) ~ Float {
			array_args := Base->New[3];

			array_args[0] := FloatRef->New();
			array_args[1] := IntRef->New(@capture);
			array_args[2] := IntRef->New(prop);
			Proxy->GetDllProxy()->CallFunction("opencv_video_get", array_args);

			value := array_args[0]->As(FloatRef);
			return value->Get();
		}

		method : public : Set(prop : Property, prop_value : Float) ~ Bool {
			array_args := Base->New[4];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@capture);
			array_args[2] := IntRef->New(prop);
			array_args[3] := FloatRef->New(prop_value);
			Proxy->GetDllProxy()->CallFunction("opencv_video_set", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		method : public : IsOpen() ~ Bool {
			array_args := Base->New[2];

			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@capture);
			Proxy->GetDllProxy()->CallFunction("opencv_video_is_open", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		method : public : Release() ~ Nil {
			array_args := Base->New[1];

			array_args[0] := IntRef->New(@capture);
			Proxy->GetDllProxy()->CallFunction("opencv_release_video_capture", array_args);
		}
	}

	#~
	OpenCV image
	~#
	class Image {
		@image_type : Int;
		@image_cols : Int;
		@image_rows : Int;
		@image_bytes : Byte[];

		#~
		Image type
		~#
		enum Format := 64 {
			JPEG,
			PNG,
			WEBP,
			GIF
		}

		New : private() {
		}

		#~
		Gets image size
		@return image size
		~#
		method : public : Size() ~ Int {
			return @image_bytes->Size();
		}

		#~
		Gets image rows
		@return image rows
		~#
		method : public : Rows() ~ Int {
			return @image_rows;
		}

		#~
		Gets image columns
		@return image columns
		~#
		method : public : Columns() ~ Int {
			return @image_cols;
		}

		#~
		Gets image type
		@return image type
		~#
		method : public : Type() ~ Int {
			return @image_type;
		}

		#~
		Gets image bytes
		@return image bytes
		~#
		method : public : Bytes() ~ Byte[] {
			return @image_bytes;
		}

		#~
		Load image from file
		@param image_path image file path
		@return loaded image
		~#
		function : Load(image_path : String) ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := Nil;
			array_args[1] := image_path;

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_path", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Load image from bytes
		@param image_path image file path
		@return loaded image
		~#
		function : Load(image_bytes : Byte[]) ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := Nil;
			array_args[1] := ByteArrayRef->New(image_bytes);

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_bytes", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Determines if an image is empty
		@return true if empty, false otherwise
		~#
		method : public : IsEmpty() ~ Bool {
			array_args := Base->New[2];

			array_args[0] := IntRef->New();
			array_args[1] := @self;
			Proxy->GetDllProxy()->CallFunction("opencv_is_empty_image", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		#~
		Shows an image
		@param title dialog title
		~#
		method : public : Show(title : String) ~ Nil {
			Show(title, 1.0);
		}

		#~
		Shows an image
		@param title dialog title
		@param scale scaling percentage 
		~#
		method : public : Show(title : String, scale : Float) ~ Nil {
			array_args := Base->New[3];

			array_args[0] := @self;
			array_args[1] := title;
			array_args[2] := FloatRef->New(scale);

			Proxy->GetDllProxy()->CallFunction("opencv_show_image", array_args);
		}

		#~
		Shows an image
		@param title dialog title
		@param scale scaling percentage 
		@param wait ms wait time between images, 0 to wait for key
		~#
		method : public : Show(title : String, scale : Float, ms_wait : Int) ~ Nil {
			array_args := Base->New[4];

			array_args[0] := @self;
			array_args[1] := title;
			array_args[2] := FloatRef->New(scale);
			array_args[3] := IntRef->New(ms_wait);

			Proxy->GetDllProxy()->CallFunction("opencv_show_image_ms", array_args);
		}

		#~
		Convert an image to a given byte format
		@param format output format
		@return converted image bytes
		~#
		method : public : Convert(format : Image->Format) ~ Byte[] {			
			array_args := Base->New[3];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := @self;
			array_args[2] := IntRef->New(format->As(Int));

			Proxy->GetDllProxy()->CallFunction("opencv_convert_image_format", array_args);

			holder := array_args[0]->As(ByteArrayRef);
			return holder->Get();
		}

		#~
		Draws a bounding rectangle
		@param rect bounding rectangle
		@param color bounding rectangle color
		@param thickness bounding rectangle thickness
		@param type bounding rectangle type
		@return updated image
		~#
		method : public : DrawRectangle(rect : Rect, color : Scalar, thickness : Int := 1, 
				type : LineType := LineType->LINE_8) ~ API.OpenCV.Image {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := rect;
			array_args[3] := color;
			array_args[4] := IntRef->New(thickness);
			array_args[5] := IntRef->New(type);

			Proxy->GetDllProxy()->CallFunction("opencv_draw_rect", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Draws a bounding circle
		@param pt circle center 
		@param radius circle radius 
		@param color bounding circle color
		@param thickness bounding circle thickness
		@param type bounding circle type
		@return updated image		
		~#
		method : public : DrawCircle(pt : Point, radius : Int, color : Scalar, thickness : Int := 1, 
				type : LineType := LineType->LINE_8) ~ API.OpenCV.Image {
			array_args := Base->New[7];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := pt;
			array_args[3] := IntRef->New(radius);;
			array_args[4] := color;
			array_args[5] := IntRef->New(thickness);
			array_args[6] := IntRef->New(type);

			Proxy->GetDllProxy()->CallFunction("opencv_draw_circle", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Draws text on an image
		@param text text to draw
		@param font text font
		@param color bounding circle color
		@param thickness bounding circle thickness
		@param type bounding circle type
		@return updated image
		~#
		method : public : DrawText(text : String, pt : Point, font : Font, scale : Float, color : Scalar, 
				thickness : Int := 1, type : LineType := LineType->LINE_8) ~ API.OpenCV.Image {
			array_args := Base->New[9];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := text;
			array_args[3] := pt;
			array_args[4] := IntRef->New(font);;
			array_args[5] := FloatRef->New(scale);
			array_args[6] := color;
			array_args[7] := IntRef->New(thickness);
			array_args[8] := IntRef->New(type);

			Proxy->GetDllProxy()->CallFunction("opencv_draw_text", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Resizes an image
		@param sz image size
		@param fx x-scale factor
		@param fy y-scale factor
		@param interpolation filling missing pixels method
		@return updated image
		~#
		method : public : Resize(sz : Size, fx : Float := 0.0, fy : Float := 0.0, 
				interpolation : InterpolationFlags := InterpolationFlags->INTER_LINEAR) ~ API.OpenCV.Image {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := sz;
			array_args[3] := FloatRef->New(fx);
			array_args[4] := FloatRef->New(fy);
			array_args[5] := IntRef->New(interpolation);

			Proxy->GetDllProxy()->CallFunction("opencv_resize_image", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Resizes an image
		@param fx x-scale factor
		@param fy y-scale factor
		@param interpolation filling missing pixels method
		@return updated image
		~#
		method : public : Resize(fx : Float, fy : Float, interpolation : InterpolationFlags := InterpolationFlags->INTER_LINEAR) ~ API.OpenCV.Image {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := Nil;
			array_args[3] := FloatRef->New(fx);
			array_args[4] := FloatRef->New(fy);
			array_args[5] := IntRef->New(interpolation);

			Proxy->GetDllProxy()->CallFunction("opencv_resize_image", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Resizes an image
		@param f scale factor
		@return updated image
		~#
		method : public : Resize(f : Float := 0.0, interpolation : InterpolationFlags := InterpolationFlags->INTER_LINEAR) ~ API.OpenCV.Image {
			array_args := Base->New[6];

			array_args[0] := Nil;
			array_args[1] := @self;
			array_args[2] := Nil;
			array_args[3] := FloatRef->New(f);
			array_args[4] := FloatRef->New(f);
			array_args[5] := IntRef->New(interpolation);

			Proxy->GetDllProxy()->CallFunction("opencv_resize_image", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}
	}

	#~
	OpenCV point
	~#
	class Point {
		@x : Int;
		@y : Int;

		#~
		Constructor
		@param x x-position
		@param y y-position
		~#
		New(x : Int, y : Int) {
			@x := x;
			@y := y;
		}

		#~
		Get X position
		@return x-position
		~#
		method : public : GetX() ~ Int {
			return @x;
		}

		#~
		Get Y position
		@return y-position
		~#
		method : public : GetY() ~ Int {
			return @y;
		}
	}

	#~
	OpenCV rectangle
	~#
	class Rect from Point {
		@width : Int;
		@height : Int;

		#~
		Constructor
		@param x x-position
		@param y y-position
		@param width width
		@param height height
		~#
		New(x : Int, y : Int, width : Int, height : Int) {
			Parent(x, y);

			@width := width;
			@height := height;
		}

		#~
		Get width
		@return width
		~#
		method : public : GetWidth() ~ Int {
			return @width;
		}

		#~
		Get height
		@return height
		~#
		method : public : GetHeight() ~ Int {
			return @height;
		}

		#~
		JSON representation 
		@return JSON representation 
		~#
		method : public : ToJson() ~ JsonElement {
			elem_json := JsonElement->New(JsonElement->JsonType->OBJECT);

			elem_json->Insert("width", @width);
			elem_json->Insert("height", @height);

			return elem_json;
		}
	}

	#~
	OpenCV size
	~#
	class Size {
		@width : Int;
		@height : Int;

		#~
		Constructor
		@param width width
		@param height height
		~#
		New(width : Int, height : Int) {
			@width := width;
			@height := height;
		}

		#~
		Get width
		@return width
		~#
		method : public : GetWidth() ~ Int {
			return @width;
		}

		#~
		Get height
		@return height
		~#
		method : public : GetHeight() ~ Int {
			return @height;
		}
	}

	#~
	OpenCV scalar
	~#
	class Scalar {
		@v0 : Float;
		@v1 : Float;
		@v2 : Float;
		@v3 : Float;

		#~
		Constructor
		@param v0 value 0
		@param v1 value 1
		@param v2 value 2
		@param v3 value 3
		~#
		New(v0 : Float, v1 : Float, v2 : Float := 0.0, v3 : Float := 0.0) {
			@v0 := v0;
			@v1 := v1;
			@v2 := v2;
			@v3 := v3;
		}

		#~
		Get value 0
		@return value 0
		~#
		method : public : GetV0() ~ Float {
			return @v0;
		}

		#~
		Get value 1
		@return value 1
		~#
		method : public : GetV1() ~ Float {
			return @v1;
		}

		#~
		Get value 2
		@return value 2
		~#
		method : public : GetV2() ~ Float {
			return @v2;
		}

		#~
		Get value 3
		@return value 3
		~#
		method : public : GetV3() ~ Float {
			return @v3;
		}
	}

	#~
	OpenCV font values
	~#
	consts Font {
		FONT_HERSHEY_SIMPLEX := 0,
		FONT_HERSHEY_PLAIN := 1,
		FONT_HERSHEY_DUPLEX := 2,
		FONT_HERSHEY_COMPLEX := 3,
		FONT_HERSHEY_TRIPLEX := 4,
		FONT_HERSHEY_COMPLEX_SMALL := 5,
		FONT_HERSHEY_SCRIPT_SIMPLEX := 6,
		FONT_HERSHEY_SCRIPT_COMPLEX := 7,
		FONT_ITALIC := 16
	}

	#~
	OpenCV line values
	~#
	consts LineType {
	    FILLED := -1,
	    LINE_4 := 4,
	    LINE_8 := 8,
	    LINE_AA := 16
	}

	#~
	OpenCV interpolation values
	~#
	consts InterpolationFlags {
	    INTER_NEAREST := 0,
	    INTER_LINEAR := 1,
	    INTER_CUBIC := 2,
	    INTER_AREA := 3,
	    INTER_LANCZOS4 := 4,
	    INTER_LINEAR_EXACT := 5,
	    INTER_NEAREST_EXACT := 6,
	    INTER_MAX := 7,
	    WARP_FILL_OUTLIERS := 8,
	    WARP_INVERSE_MAP := 16,
	    WARP_RELATIVE_MAP := 32
	}
}
