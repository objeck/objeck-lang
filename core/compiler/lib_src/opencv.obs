#~~
# TODO
# Copyright (c) 2025 Randy Hollines
# ONNX and OpenCV wrappers
~~#	

use System.API;

#~
Open Computer Vision (OpenCV) support for image rendering and compilation. (-lib onnx)
~#
bundle API.OpenCV {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_opencv");
			};

			return @lib_proxy;
		}
	}

	#~
	Image manipulation routines
	~#
	class Image {
		@image_bytes : Byte[];
		@image_max : Int;

		#~
		Image type
		~#
		enum Format := 64 {
			JPEG,
			PNG,
			WEBP,
			GIF
		}

		New(image_path : String) {
			array_args := Base->New[2];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := image_path;

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_path", array_args);
			holder := array_args[0]->As(ByteArrayRef);

			@image_bytes := holder->Get();
			@image_max := @image_bytes->Size();
		}

		New(image_bytes : Byte[]) {
			@image_bytes := image_bytes;
			@image_max := @image_bytes->Size();
		}

		#~ TOOD: update
		Image format conversion
		@param input_image image bytes
		@param output_format image output format
		@return bytes for converted image
		~#
		function : Convert(input_image : Byte[], output_format : Image->Format) ~ Byte[] {
			array_args := Base->New[3];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := ByteArrayRef->New(input_image);
			array_args[2] := IntRef->New(output_format->As(Int));

			Proxy->GetDllProxy()->CallFunction("opencv_convert_image", array_args);
			
			holder := array_args[0]->As(ByteArrayRef);
			return holder->Get();
		}
	}
}