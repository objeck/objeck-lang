#~~
# TODO
# Copyright (c) 2025 Randy Hollines
# OpenCV wrapper
~~#	

use System.API;

#~
Open Computer Vision (OpenCV) support for image rendering and compilation. (-lib opencv)
~#
bundle API.OpenCV {
	class : private : Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_opencv");
			};

			return @lib_proxy;
		}
	}

	#~
	OpenCV image support routines
	~#
	class Image {
		@image_type : Int;
		@image_cols : Int;
		@image_rows : Int;
		@image_bytes : Byte[];

		#~
		Image type
		~#
		enum Format := 64 {
			JPEG,
			PNG,
			WEBP,
			GIF
		}

		New : private() {
		}

		#~
		Gets image size
		@return image size
		~#
		method : public : Size() ~ Int {
			return @image_bytes->Size();
		}

		#~
		Gets image rows
		@return image rows
		~#
		method : public : Rows() ~ Int {
			return @image_rows;
		}

		#~
		Gets image columns
		@return image columns
		~#
		method : public : Columns() ~ Int {
			return @image_cols;
		}

		#~
		Gets image type
		@return image type
		~#
		method : public : Type() ~ Int {
			return @image_type;
		}

		#~
		Gets image bytes
		@return image bytes
		~#
		method : public : Bytes() ~ Byte[] {
			return @image_bytes;
		}

		#~
		Load image from file
		@param image_path image file path
		@return loaded image
		~#
		function : Load(image_path : String) ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := Nil;
			array_args[1] := image_path;

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_path", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Load image from bytes
		@param image_path image file path
		@return loaded image
		~#
		function : Load(image_bytes : Byte[]) ~ API.OpenCV.Image {
			array_args := Base->New[2];

			array_args[0] := Nil;
			array_args[1] := ByteArrayRef->New(image_bytes);

			Proxy->GetDllProxy()->CallFunction("opencv_load_image_bytes", array_args);

			return array_args[0]->As(API.OpenCV.Image);
		}

		#~
		Shows an image
		~#
		method : public : Show(title : String) ~ Nil {
			array_args := Base->New[2];

			array_args[0] := @self;
			array_args[1] := title;

			Proxy->GetDllProxy()->CallFunction("opencv_show_image", array_args);
		}

		#~
		Convert an image to a given format
		@param format output format
		@return bytes of converted image
		~#
		method : public : Convert(format : Image->Format) ~ Byte[] {			
			array_args := Base->New[3];

			array_args[0] := ByteArrayRef->New();
			array_args[1] := @self;
			array_args[2] := IntRef->New(format->As(Int));

			Proxy->GetDllProxy()->CallFunction("opencv_convert_image", array_args);

			holder := array_args[0]->As(ByteArrayRef);
			return holder->Get();
		}
	}
}