use Collection;

#~
Support for web servers. Note, shared library implementations (.so, .dll) specified in the 'config.ini' file using the 'lib_name' parameter.
~#
bundle Web.Server {
	class : private: Proxy {
		@lib_proxy : static : System.API.DllProxy;
		
		function : GetDllProxy() ~ System.API.DllProxy {
			if(@lib_proxy = Nil) {
				# shared library native implementation (for Nginix, IIS and Apache) fetched from configuration
				@lib_proxy := System.API.DllProxy->New(Runtime->GetProperty("OBJECK_LIB_WEB_SERVER"));
			};

			return @lib_proxy;
		}
	}

	#~
	Web request
	~#
	class Request {
		@request : Int;
		@response : Int;

		#~
		Web request method
		~#
		enum Method {
			GET,
			HEAD,
			POST,
			PUT,
			DELETE,
			CONNECT,
			OPTIONS,
			TRACE,
			PATCH
		}

		#~
		Gets the request method
		@return request method
		~#
		method : public : GetMethod() ~ Request->Method {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntRef->New(@request);

			Proxy->GetDllProxy()->CallFunction("web_request_get_method", array_args);
			req_method := array_args[0]->As(String);

			# TODO: faster way put into a hash, Nginx uses a integer value
			if(req_method->Equals("GET")) {
				return Request->Method->GET;
			}
			else if(req_method->Equals("HEAD")) {
				return Request->Method->HEAD;
			}
			else if(req_method->Equals("POST")) {
				return Request->Method->POST;
			}
			else if(req_method->Equals("PUT")) {
				return Request->Method->PUT;
			}
			else if(req_method->Equals("DELETE")) {
				return Request->Method->DELETE;
			}
			else if(req_method->Equals("CONNECT")) {
				return Request->Method->CONNECT;
			}
			else if(req_method->Equals("OPTIONS")) {
				return Request->Method->OPTIONS;
			}
			else if(req_method->Equals("TRACE")) {
				return Request->Method->TRACE;
			}
			else {
				return Request->Method->PATCH;
			};
		}

		#~
		Gets a the remote address
		@return remote address
		~#
		method : public : GetRequestUrl() ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntRef->New(@request);

			Proxy->GetDllProxy()->CallFunction("web_request_request_url", array_args);

			return array_args[0]->As(String);
		}

		#~
		Gets a the remote address
		@return remote address
		~#
		method : public : GetRemoteAddress() ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntRef->New(@request);

			Proxy->GetDllProxy()->CallFunction("web_request_remote_address", array_args);

			return array_args[0]->As(String);
		}

		#~
		Gets a the local address
		@return local address
		~#
		method : public : GetLocalAddress() ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntRef->New(@request);

			Proxy->GetDllProxy()->CallFunction("web_request_local_address", array_args);

			return array_args[0]->As(String);
		}

		#~
		Gets a HTTP header
		@param name header name
		@return header value
		~#
		method : public : GetHeader(name : String) ~ String {
			array_args := Base->New[3];
			array_args[0] := Nil;
			array_args[1] := IntRef->New(@request);
			array_args[2] := name;

			Proxy->GetDllProxy()->CallFunction("web_request_get_header", array_args);

			return array_args[0]->As(String);
		}

		#~
		Reads the request body (i.e. POST)
		@return request body
		~#
		method : public : ReadBody() ~ Byte[] {
			array_args := Base->New[3];
			array_args[0] := Nil;
			array_args[1] := IntRef->New(@request);
			array_args[2] := IntRef->New(@response);

			Proxy->GetDllProxy()->CallFunction("web_request_read_body", array_args);

			value := array_args[0]->As(ByteArrayRef);
			if(value <> Nil) {
				return value->Get();
			};
			
			return Nil;
		}

		#~
		Parses URL encoding
		@param encoded encoded bytes
		@return name value pairs
		~#
		function : ParseUrlEncoding(encoded : String) ~ Map<String, String> {
	        decodings := Map->New()<String, String>;

	        pairs :=  encoded->Split('&');
	        if(pairs <> Nil) {
	            each(i : pairs) {
	                key_value := pairs[i]->Split('=');
	                if(key_value <> Nil & key_value->Size() = 2) {
	                    key := Web.HTTP.Url->Decode(key_value[0])->ReplaceAll('+', ' ');
	                    value := Web.HTTP.Url->Decode(key_value[1])->ReplaceAll('+', ' ');
	                    decodings->Insert(key, value);
	                };
	            };
	        };

	        return decodings;
	    }

	    #~
		Parses multipart encoding
		@param encoded encoded bytes
		@return content parts
		~#
	    function : native : ParseMultipartEncoding(encoded : Byte[]) ~ Vector<ContentType> {
	        multipart_content := Vector->New()<ContentType>;

	        # read encoding string
	        marker_bytes := ReadLine(0, encoded);
	        if(marker_bytes = Nil) {
	            return Nil;
	        };

	        encoding_size := encoded->Size();
	        
	        # fetch all markers
	        marker_indexes := Byte->FindAll(encoded, marker_bytes);
	        if(marker_indexes = Nil) {
	            return Nil;
	        };

	        boundry_index := 0;
	        for(i := 0; i < marker_indexes->Size() - 1; i += 1;) {
	            boundary_bytes := ReadLine(marker_indexes[i], encoded);
	            if(boundary_bytes = Nil) {
	                return Nil;
	            };
	            boundry_index += boundary_bytes->Size();

	            # read white space
	            if(<>MatchSpace(boundry_index, encoded)) {
	                return Nil;
	            };
	            boundry_index += 2;
	 
	            # read content headers
	            done := false;
	            headers := Map->New()<String, String>;
	            do {
	                # read content line
	                header_bytes := ReadLine(boundry_index, encoded);
	                if(header_bytes <> Nil) {            
	                    boundry_index += header_bytes->Size();
	                    content_str := header_bytes->ToString();
	                    
	                    # parse header name/value pair
	                    content_str_index := content_str->Find(':');
	                    if(content_str_index > 0) {
	                        header_name := content_str->SubString(content_str_index);
	                        content_str_index += 2;
	                        header_value := content_str->SubString(content_str_index, content_str->Size() - content_str_index);
	                        
	                        if(<>header_name->IsEmpty() & <>header_value->IsEmpty()) {
	                            headers->Insert(header_name, header_value);
	                        };
	                    };
	                }
	                else {
	                    done := true;
	                };

	                # read white space
	                if(<>MatchSpace(boundry_index, encoded)) {
	                    return Nil;
	                };
	                boundry_index += 2;
	            }
	            while(<>done);
	            
	            # read content
	            content_size := marker_indexes[i + 1] - boundry_index - 2;
	            
	            content_bytes := Byte->New[content_size];
	            if(Runtime->Copy(content_bytes, 0, encoded, boundry_index, content_size)) {
	                content_str := String->New(content_bytes);
	                ", content: |{$content_str}|"->PrintLine();
	            };
	            boundry_index += content_bytes->Size();

	            # read white space
	            if(<>MatchSpace(boundry_index, encoded)) {
	                return Nil;
	            };
	            boundry_index += 2;

	            multipart_content->AddBack(ContentType->New(headers, content_bytes));
	        };

			# read ending boundary
	        boundary_bytes := ReadLine(marker_indexes[marker_indexes->Size() - 1], encoded);
	        if(boundary_bytes = Nil) {
	            return Nil;
	        };
	        boundry_index += boundary_bytes->Size();

	        # read white space
	        if(<>MatchSpace(boundry_index, encoded)) {
	            return Nil;
	        };
	        boundry_index += 2;

	        boundary_str := boundary_bytes->ToString();
	        if(boundary_str->EndsWith("--") & encoding_size = boundry_index) {
	            return multipart_content;
	        };

	        return Nil;
	    }

	    function : native : ReadLine(offset : Int, encoded : Byte[]) ~ Byte[] {
	        i := offset;
	        if(i < encoded->Size()) {
	            done := false;
	            read := 0;
	            while(<>done & i < encoded->Size()) {
	                byte := encoded[i++];
	                if(byte = '\r') {
	                    done := true;
	                }
	                else {
	                    read += 1;
	                };
	            };

	            line := Byte->New[read];
	            if(Runtime->Copy(line, 0, encoded, offset, read)) {
	                return line;
	            };
	        };

	        return Nil;
	    }

	    function : native : MatchSpace(offset : Int, encoded : Byte[]) ~ Bool {
	        if(offset + 1 < encoded->Size()) {
	            return encoded[offset] = '\r' & encoded[offset + 1] = '\n';
	        };

	        return false;
	    }
	}

	#~
	Multipart content type
	~#
	class ContentType {
	    @headers : Map<String, String>;
	    @content : Byte[];

	    New(headers :  Map<String, String>, content : Byte[]) {
	        @headers := headers;
	        @content := content;
	    }

	    #~
		Get MIME content header
		@param name header name
		@return header value
		~#
	    method : public : GetHeader(name : String) ~ String {    
	        return @headers->Find(name);
	    }

	    #~
		Get MIME content
		@return MIME bytes
		~#
	    method : public : GetContent() ~ Byte[] {
	        return @content;
	    }
	}

	#~
	Web Response 
	~#
	class Response {
		@response : Int;
		
		#~
		Set the content type
		@param type content type
		~#
		method : public : SetContentType(type : String) ~ Nil {
			array_args := Base->New[2];
			array_args[0] := IntRef->New(@response);
			array_args[1] := type;

			Proxy->GetDllProxy()->CallFunction("web_response_set_content_type", array_args);
		}

		#~
		Writes a string response to the message body
		@param data string response
		@return number of bytes sent
		~#
		method : public : WriteBody(data : String) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@response);
			array_args[2] := data;

			Proxy->GetDllProxy()->CallFunction("web_response_append_string", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get();
		}

		#~
		Writes a byte array response to the message body
		@param data byte array response
		@return number of bytes sent
		~#
		method : public : WriteBody(data : Byte[]) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@response);
			array_args[2] := ByteArrayRef->New(data);

			Proxy->GetDllProxy()->CallFunction("web_response_append_bytes", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get();
		}

		#~
		Redirects a quary URL
		@param url URL redirect
		@return number of bytes sent
		~#
		method : public : Redirect (url : String) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@response);
			array_args[2] := url;

			Proxy->GetDllProxy()->CallFunction("web_response_redirect", array_args);

			value := array_args[0]->As(IntRef);
			return value->Get() = 0 ? false : true;
		}

		#~
		Sets a HTTP header
		@param name header name
		@param value header value
		@return true successful, false otherwise
		~#
		method : public : SetHeader(name : String, value : String) ~ Bool {
			array_args := Base->New[4];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@response);
			array_args[2] := name;
			array_args[3] := value;

			Proxy->GetDllProxy()->CallFunction("web_response_set_header", array_args);

			result := array_args[0]->As(IntRef);
			return result->Get() = 0 ? false : true;
		}

		#~
		Removes a HTTP header
		@param name header name
		@return true successful, false otherwise
		~#
		method : public : RemoveHeader(name : String) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntRef->New();
			array_args[1] := IntRef->New(@response);
			array_args[2] := name;

			Proxy->GetDllProxy()->CallFunction("web_response_remove_header", array_args);

			result := array_args[0]->As(IntRef);
			return result->Get() = 0 ? false : true;
		}

		#~
		Clears the entire body response
		~#
		method : public : ClearAll() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntRef->New(@response);
			Proxy->GetDllProxy()->CallFunction("web_response_clear_all", array_args);
		}
	}
}