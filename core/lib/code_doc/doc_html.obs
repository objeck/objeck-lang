#~
Objeck HTML code documentation system
Copyright (c) 2014, 2019 Randy Hollines
~#

use System.IO.Filesystem;
use Collection;

class HtmlMaker {
	@parser : SnippetParser;
	@css_path : String;
	@version : String;
	@bundle_block : BundleSnippet;
	
	#~
	DOC ME
	~#
	New(args : String[]) {
		@css_path := args[0];
		@version := args[1];
		@parser := SnippetParser->New(args);
	}
	
	#~
	DOC ME
	~#
	function : Main(args : String[]) ~ Nil {
		if(args->Size() > 2) {
			HtmlMaker->New(args)->Make();
		};
	}
	
	#~
	DOC ME
	~#
	method : Make() ~ Bool {
		if(<>@parser->Parse()) {
			"--- Unable to parse source file ---"->ErrorLine();
			return false;
		};
		
		template_path := String->New(@css_path);
		template_path += '/';
		template_path += "html_tmpl.dat";
		template_html := FileReader->ReadFile(template_path);
		if(template_html = Nil) {
			"--- Unable load header CSS template ---"->ErrorLine();
			return false;
		};
template_html->PrintLine();		


		
		## bundles
		bundles := @parser->GetBundles();
		nav_html := CreateNav(bundles);

		bundle_keys := bundles->GetKeys()<String>;
		each(i : bundle_keys) {
			@bundle_block := bundles->Find(bundle_keys->Get(i));
			
			##  classes
			classes := @bundle_block->GetClasses();
			class_keys := classes->GetKeys()<String>;
			each(j : class_keys) {
				class_block := classes->Find(class_keys->Get(j));
				if(class_block <> Nil) {
					CreateClassHtml(class_block, nav_html, template_html);
				};
			};
			
			##  enums
			enums := @bundle_block->GetEnums();
			enum_keys := enums->GetKeys()<String>;
			each(j : enum_keys) {
				##  enum
				enum_block := enums->Find(enum_keys->Get(j));
				if(enum_block <> Nil) {
					CreateEnumHtml(enum_block, nav_html, template_html);
				};
			};			
		};
		
		return true;
	}
	
	#~
	DOC ME
	~#
	method : CreateClassHtml(class_block : ClassSnippet, nav_html : String, template_html : String) ~ Nil {
		html := template_html->ReplaceAll("@nav", nav_html);

		foo := "<div class='grey-block'>
<h3>GetCreatedAt</h3><a id='response-getcreatedat'></a><p>Unix timestamp (in seconds) of when the object instance was created</p><code>method : public : GetCreatedAt() ~ Int</code><p>Return<table><tr><th>Type</th><th>Description</th></tr><tr><td><a href='system-int.html' target='main'>Int</a></td><td>time with the object instance was created</td></tr></table></p><br/></div>";

		html := html->ReplaceAll("@main", foo);
	
		file_name := "../html/";
		file_name += class_block->GetBundleName()->ToLower();
		file_name += '-';
		file_name += class_block->GetFileName()->ToLower()->ReplaceAll("&gt;", "$");;
		file_name += ".html";
		
		out := FileWriter->New(file_name);
		out->WriteString(html);
		out->Close();
	}
	
	#~
	DOC ME
	~#
	method : CreateEnumHtml(enum_block : EnumConstSnippet, nav_html : String, template_html : String) ~ Nil {
		html := template_html->ReplaceAll("@nav", nav_html);
		html := html->ReplaceAll("@main", "");
	
		file_name := "../html/";
		file_name += enum_block->GetBundleName()->ToLower();
		file_name += '-';
		file_name += enum_block->GetName()->ToLower()->ReplaceAll("&gt;", "$");;
		file_name += ".html";
		
		out := FileWriter->New(file_name);
		out->WriteString(html);
		out->Close();
	}

	#~
	DOC ME
	~#
	method : CreateNav(bundles : Map<String, BundleSnippet>) ~ String {
		html := "<nav>";

		##  bundles
		bundle_keys := bundles->GetKeys()<String>;
		each(i : bundle_keys) {
			bundle_block := bundles->Find(bundle_keys->Get(i));
			##  class description
			if(bundle_block->IsParsed()) {
				sec_a := "<a id='@short_link'></a><strong>@bundle_name</strong>";
				sec_a := sec_a->ReplaceAll("@bundle_name", bundle_block->GetName());
				sec_a := sec_a->ReplaceAll("@short_link", bundle_block->GetName()->ToLower());
				html += sec_a;
				
				sec_b := "<ul>";
				classes := bundle_block->GetClasses();
				class_keys := classes->GetKeys()<String>;			
				each(j : class_keys) {
					##  class
					class_block := classes->Find(class_keys->Get(j));
					if(class_block->IsParsed()) {
						sec_b += "<li><a href='";
						
						file_name := class_block->GetBundleName()->ToLower();
						file_name += '-';
						file_name += class_block->GetFileName()->ToLower();
						link_name := String->New(file_name)->ReplaceAll("&gt;", "$");;
						link_name += ".html";

						sec_b->Append(link_name->ToLower());
						sec_b += "' target='main'>";
						if(class_block->IsInterface()) {
							sec_b->Append("<i>");
							sec_b->Append(class_block->GetName());
							sec_b->Append("</i>");
						}
						else {
							sec_b->Append(class_block->GetName());
						};
						sec_b += "</a></li>";
					};
				};
				
				enums := bundle_block->GetEnums();
				enum_keys := enums->GetKeys()<String>;
				each(j : enum_keys) {
					##  enum
					enum_block := enums->Find(enum_keys->Get(j));
					if(enum_block <> Nil) {
						sec_b += "<li><a href='";
						
						file_name := enum_block->GetBundleName()->ToLower();
						file_name += '-';
						file_name += enum_block->GetName()->ToLower();
						link_name := String->New(file_name)->ReplaceAll("&gt;", "$");
						link_name += ".html";

						sec_b->Append(link_name->ToLower());
						sec_b += "' target='main'>";
						sec_b->Append(enum_block->GetName());
						sec_b->Append(" (#)");
						sec_b += "</a></li>";
						
					};
				};
				
				sec_b += "</ul>";			
				html += sec_b;
			};
		};

		html += "</nav>";
		return html;		
	}
}
