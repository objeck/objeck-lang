#~
Objeck HTML code documentation system
Copyright (c) 2014, 2019 Randy Hollines
~#

use System.IO.Filesystem;
use Collection;

class HtmlMaker {
	@parser : SnippetParser;
	@css_path : String;
	@version : String;
	@bundle_snippit : BundleSnippet;
	
	#~
	DOC ME
	~#
	New(args : String[]) {
		@css_path := args[0];
		@version := args[1];
		@parser := SnippetParser->New(args);
	}
	
	#~
	DOC ME
	~#
	function : Main(args : String[]) ~ Nil {
		if(args->Size() > 2) {
			HtmlMaker->New(args)->Make();
		};
	}
	
	#~
	DOC ME
	~#
	method : Make() ~ Bool {
		if(<>@parser->Parse()) {
			"--- Unable to parse source file ---"->ErrorLine();
			return false;
		};

		# fiiles -> bundles -> (uses)
		
		template_path := String->New(@css_path);
		template_path += '/';
		template_path += "html_tmpl.dat";
		template_html := FileReader->ReadFile(template_path);
		if(template_html = Nil) {
			"--- Unable load header CSS template ---"->ErrorLine();
			return false;
		};
				
		## bundles
		bundles := @parser->GetBundles();
		nav_html := CreateNav(bundles);

		bundle_keys := bundles->GetKeys()<String>;
		each(i : bundle_keys) {
			@bundle_snippit := bundles->Find(bundle_keys->Get(i));

			# get file uses
			file_uses := @parser->GetFileUses(@bundle_snippit->GetFileName())<String>;

			# process classes
			classes := @bundle_snippit->GetClasses();
			class_keys := classes->GetKeys()<String>;
			each(j : class_keys) {
				class_block := classes->Find(class_keys->Get(j));
				if(class_block <> Nil) {
					CreateClassHtml(class_block, file_uses, nav_html, template_html);
				};
			};
			
			# process enums
			enums := @bundle_snippit->GetEnums();
			enum_keys := enums->GetKeys()<String>;
			each(j : enum_keys) {
				##  enum
				enum_block := enums->Find(enum_keys->Get(j));
				if(enum_block <> Nil) {
					CreateEnumHtml(enum_block, file_uses, nav_html, template_html);
				};
			};			
		};
		
		return true;
	}
	
	#~
	DOC ME
	~#
	method : CreateClassHtml(class_block : ClassSnippet, file_uses : Set<String>, nav_html : String, template_html : String) ~ Nil {
		# set nav
		html := template_html->ReplaceAll("@nav", nav_html);

		# set main
		main_html := "<h2>";
		main_html += class_block->GetShortName();
		main_html += "</h2>";

		main_html += "<ul>";
		func_names := class_block->GetFunctionNames();
		each(func_name in func_names) {
			func_link := class_block->GetShortName()->ToLower() + '-' + func_name->ToLower();
			
			main_html += "<li><a href='#"
			main_html += func_link;
			main_html += "'>";
			main_html += func_name;
			main_html += "</a></li>";
		};
		main_html += "</ul>";

      	func_names := class_block->GetFunctionNames();
		each(func_name in func_names) {
			funcs := class_block->GetFunctions(func_name);
			each(func in funcs) {
				func_name := func->GetName();
				func_desc := func->GetDesc();
				func_sig := func->GetSignature();

				func_link := class_block->GetShortName()->ToLower() + '-' + func_name->ToLower();

				main_html += "<div class='grey-block'><a id='";
				main_html += func_link;
				main_html += "'></a><h3>";
      			
      			main_html += func_name;
      			main_html += "</h3><p>";
      			main_html += func_desc;
      			
      			main_html += "</p><code>"
      			main_html += func_sig;
      			main_html += "</code>";


      			# write parameters

      			param_tags := func->GetParamTags();
				param_names := func->GetParams();

				if(<>param_names->IsEmpty()) {
	      			main_html += "<p>Parameters<table><tr><th>Name</th><th>Type</th><th>Description</th></tr>";

					each(param in param_names) {
						param_tag := param_tags->Find(param->GetName())->As(SnippetTag);
						if(param_tag <> Nil & <>param_tag->IsIgnore()) {	      				
		      				param_name := param_tag->GetName();
		      				param_type_name := param->GetTypeName();
		      				param_type_desc := param_tag->GetDesc();

			      			main_html += "<td>";
			      			main_html += param_name;
			      			main_html += "</td>";
			      			
			      			type_link := GetTypeLink(param_type_name, file_uses);
			      			main_html += "<td><a href='{$type_link}' target='main'>";
			      			main_html += param_type_name;
			      			main_html += "</a></td>";
			      			
			      			main_html += "<td>";
			      			main_html += param_type_desc;
			      			main_html += "</td>";
			      		};

			      		main_html += "</tr>";
			      	};

	      			main_html += "</table></p>";
	      		};

	      		if(func->GetReturnTag() <> Nil) {
	      			main_html += "<p>Return<table><tr><th>Type</th><th>Description</th></tr>";

	      			rtrn_type_name := func->GetReturnType()->GetTypeName();
      				rtrn_desc := func->GetReturnTag()->GetDesc();

	      			main_html += "<td><a href='system-int.html' target='main'>";
	      			main_html += rtrn_type_name;
	      			main_html += "</a></td>";

	      			main_html += "<td>";
	      			main_html += rtrn_desc;
	      			main_html += "</td>";

	      			main_html += "</table></p>";
	      		};

	      		main_html += "</p><br/></div>";
			}
		};

		# write file	
		html := html->ReplaceAll("@main", main_html);

		filename := GetClassLink(class_block, "../html/");
# "=> {$filename}"->PrintLine();

		out := FileWriter->New(filename);
		out->WriteString(html);
		out->Close();
	}

	method : GetTypeLink(name : String, file_uses : Set<String>) ~ String {
		decoded_name := name->ReplaceAll("&lt;", "<");
		decoded_name := decoded_name->ReplaceAll("&gt;", ">");
# "type-name: '{$decoded_name}'"->PrintLine();
		
		# top level parsing
		bundle_str : String; class_enum_str : String; enum_value_str : String;
		class_index := decoded_name->Find('.');
		if(class_index > -1) {
			bundle_str := decoded_name->SubString(class_index);
			class_index += 1;
			class_enum_str := decoded_name->SubString(class_index, decoded_name->Size() - class_index);
		}
		else {
			enum_index := class_index := decoded_name->Find("->");
			if(enum_index > -1) {
				class_enum_str := decoded_name->SubString(enum_index);
				enum_index += 2;
				enum_value_str := decoded_name->SubString(enum_index, decoded_name->Size() - enum_index);
			}
			else {
				class_enum_str := decoded_name;
			};
		};

		array_dim := 0;
		if(class_enum_str <> Nil & class_enum_str->Has('[')) {
			array_index := class_enum_str->Find('[');
			temp_str := class_enum_str->SubString(array_index);
			array_dim := class_enum_str->SubString(array_index, class_enum_str->Size() - array_index)->Count('[');
			class_enum_str := temp_str;
		};

		# bundle and class name
		if(bundle_str <> Nil & class_enum_str <> Nil) {
			bundles := @parser->GetBundles();

			bundle_block := bundles->Find(bundle_str);
			if(bundle_block <> Nil) {
				classes := bundle_block->GetClasses();

				generic_index := class_enum_str->Find('<');
				if(generic_index > -1) {
					return GetComplexTypeLink(decoded_name, file_uses);
				}
				else {
					class_block := classes->Find(class_enum_str);
					if(class_block <> Nil) {
						class_link := "<a href='"
						class_link += GetClassLink(class_block);
						class_link += "'>";
						class_link += class_enum_str;
						class_link += "</a>";

"class_link=\"{$class_link}\""->PrintLine();
						return class_link;
					};					
				};
			};
		}
		else if(class_enum_str <> Nil) {
			generic_index := class_enum_str->Find('<');
			if(generic_index > -1) {
				return GetComplexTypeLink(decoded_name, file_uses);
			}
			else {
				bundles := @parser->GetBundles();
				
				bundle_keys := bundles->GetKeys()<String>;
				each(bundle_key in bundle_keys) {
					# look at bundles that are in our scope
					bundle_snippit := bundles->Find(bundle_key);
					if(file_uses->Has(bundle_key)) {
						classes := bundle_snippit->GetClasses();
						class_keys := classes->GetKeys()<String>;
						each(class_key in class_keys) {
							# find class within the bundle scope
							class_block := classes->Find(class_enum_str);
							if(class_block <> Nil) {
								class_link := "<a href='"
								class_link += GetClassLink(class_block);
								class_link += "'>";
								class_link += class_enum_str;
								class_link += "</a>";

"class_link=\"{$class_link}\""->PrintLine();							
								return class_link;
							};
						};
					};
				};
			};
		};

		if(enum_value_str <> Nil) {
# "enum_value_str='{$enum_value_str}', array_dim={$array_dim}\n---"->PrintLine();
		};

		if(decoded_name->Has('<') | decoded_name->Has('[') | decoded_name->Has('~') | decoded_name->Has(',')) {
			return GetComplexTypeLink(decoded_name, file_uses);
		};

"class_link=\"{$name}\""->PrintLine();
		return name;
	}

	method : GetComplexTypeLink(decoded_name : String, file_uses : Set<String>) ~ String {
		class_link := ""; 
		temp := "";

# "=> {$decoded_name}"->PrintLine();

		each(c in decoded_name) {
			if(c->IsChar() | c->IsDigit()) {
				temp += c;
			}
			else {
				select(c) {
					label '<': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							temp := "";
						};
						class_link += "&lt;";
					}

					label '[': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							class_link += '[';
							temp := "";
						};
					}

					label '(': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							temp := "";
						};
						class_link += '(';
					}

					label ',': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							temp := "";
						};
						class_link += ',';
					}

					label '~': {
						class_link += '~';
					}

					label '>': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							temp := "";
						};
						class_link += "&gt;";
					}
							
					label ']': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							temp := "";
						};
						class_link += ']';
					}

					label ')': {
						if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
							class_link += GetTypeLink(temp, file_uses);
							temp := "";
						};
						class_link += ')';
					}
				};
			};
		};

		if(<>temp->IsEmpty()) {
# "'{$temp}'"->PrintLine();
			class_link += GetTypeLink(temp, file_uses);
			temp := "";
		};

"class_link=\"{$class_link}\""->PrintLine();		
		return class_link;
	}

	#~
	DOC ME
	~#
	method : CreateEnumHtml(enum_block : EnumConstSnippet, file_uses : Set<String>, nav_html : String, template_html : String) ~ Nil {
		html := template_html->ReplaceAll("@nav", nav_html);
		html := html->ReplaceAll("@main", "");
	
		filename := GetEnumLink(enum_block, "../html/");
# "=> {$filename}"->PrintLine();

		out := FileWriter->New(filename);
		out->WriteString(html);
		out->Close();
	}

	#~
	DOC ME
	~#
	method : CreateNav(bundles : Map<String, BundleSnippet>) ~ String {
		html := "<nav>";

		# process bundles
		bundle_keys := bundles->GetKeys()<String>;
		each(i : bundle_keys) {
			bundle_block := bundles->Find(bundle_keys->Get(i));
			if(bundle_block->IsParsed()) {
				block_name := bundle_block->GetName();
				html += "<a id='";
				html += block_name->ToLower();
				html += "'></a><strong>";
				html += block_name;
				html += "</strong>";
				html += "<ul>";

				# process classes
				classes := bundle_block->GetClasses();
				class_keys := classes->GetKeys()<String>;			
				each(j : class_keys) {
					class_block := classes->Find(class_keys->Get(j));
					if(class_block->IsParsed()) {
						html += "<li><a href='";
						link_name := GetClassLink(class_block);

						html->Append(link_name);
						html += "' target='main'>";
						if(class_block->IsInterface()) {
							html->Append("<i>");
							html->Append(class_block->GetName());
							html->Append("</i>");
						}
						else {
							html->Append(class_block->GetName());
						};
						html += "</a></li>";
					};
				};
				
				# process enums
				enums := bundle_block->GetEnums();
				enum_keys := enums->GetKeys()<String>;
				each(j : enum_keys) {
					enum_block := enums->Find(enum_keys->Get(j));
					if(enum_block <> Nil) {
						html += "<li><a href='";
						link_name := GetEnumLink(enum_block);

						html->Append(link_name);
						html += "' target='main'>";
						html->Append(enum_block->GetName());
						html->Append(" (#)");
						html += "</a></li>";
						
					};
				};
				
				html += "</ul>";			
			};
		};

		html += "</nav>";
		return html;		
	}

	method : GetClassLink(class_block : ClassSnippet, prefix : String := Nil) ~ String {
		filename := "";

		if(prefix <> Nil) {
			filename := prefix;
		}
		filename += class_block->GetBundleName()->ToLower();

		filename += '-';
		filename += class_block->GetFileName()->ToLower();

		link_name := String->New(filename)->ReplaceAll("&gt;", "$");;
		link_name += ".html";

		return link_name;
	}

	method : GetEnumLink(enum_block : EnumConstSnippet, prefix : String := Nil) ~ String {
		filename := "";

		if(prefix <> Nil) {
			filename := prefix;
		}
		filename += enum_block->GetBundleName()->ToLower();

		filename += '-';
		filename += enum_block->GetName()->ToLower();

		link_name := String->New(filename)->ReplaceAll("&gt;", "$");
		link_name += ".html";

		return link_name;
	}
}
